<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用WSL的加快你的下载</title>
    <link href="/2021/06/27/%E4%BD%BF%E7%94%A8WSL%E7%9A%84%E5%8A%A0%E5%BF%AB%E4%BD%A0%E7%9A%84%E4%B8%8B%E8%BD%BD/"/>
    <url>/2021/06/27/%E4%BD%BF%E7%94%A8WSL%E7%9A%84%E5%8A%A0%E5%BF%AB%E4%BD%A0%E7%9A%84%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<blockquote><p>  前言</p></blockquote><p>当我使用了开启了WSL之后，我感觉到了Windows不愧为最好的Linux系统(滑稽)，现在目前我使用了Ubuntu 18.04版本的Linux，在了解到了WSL 1 和WSL 2 的差别之后，我义不容辞选择了 WSL 1(因为我还用不到doucker，1对我来说已经够了，还在学习中。)在了解到WSL 的网络和本机Windows的网络相通之后，又想到了Aria2之后，我就有了一个想法：为什么我不把WSL搭建成我的本机工作站呢？</p><p>(嘿嘿，虽然Windows也能够作为工作站，但是还是感觉Linux做工作站舒服点。)</p><blockquote><p>  WSL做下载机的后台服务</p></blockquote><p>Aria2，一给开源的下载器，能够实现多</p>]]></content>
    
    
    <categories>
      
      <category>快捷</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WSL</tag>
      
      <tag>下载</tag>
      
      <tag>便利</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于C++中fstream使用(ios::in|ios::out)在当文件不存在时不创建文件而是打开错误</title>
    <link href="/2020/12/20/C++fstream%E4%BD%BF%E7%94%A8in%E5%92%8Cout%E4%B8%8D%E8%83%BD%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6/"/>
    <url>/2020/12/20/C++fstream%E4%BD%BF%E7%94%A8in%E5%92%8Cout%E4%B8%8D%E8%83%BD%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>起因</p></blockquote><p>&emsp;&emsp;今天晚上本来闲聊的时候,突然滴滴的一声,我的小眼睛一瞟,哦~,原来是学弟在群里面问问题,本着学长的心态,依然义无反顾的点击进去,准备好好的回答一下学弟的小问题,结果,自己学艺不精,被难倒了.于是,就有了这一次记录.</p><blockquote><p>学弟的问题</p></blockquote><p>&emsp;&emsp;<strong>为什么fstream在使用ios::in|ios::out|ios::binary打开文件(文件不存在)时,不会创建文件,且打开文件失败.</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E5%85%B3%E4%BA%8EC-%E4%B8%ADfstream%E4%BD%BF%E7%94%A8-ios-in%E6%88%96ios-out-%E5%9C%A8%E5%BD%93%E6%96%87%E4%BB%B6%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%97%B6%E4%B8%8D%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E8%80%8C%E6%98%AF%E6%89%93%E5%BC%80%E9%94%99%E8%AF%AF/option1.png" alt="图1"></p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E5%85%B3%E4%BA%8EC-%E4%B8%ADfstream%E4%BD%BF%E7%94%A8-ios-in%E6%88%96ios-out-%E5%9C%A8%E5%BD%93%E6%96%87%E4%BB%B6%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%97%B6%E4%B8%8D%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E8%80%8C%E6%98%AF%E6%89%93%E5%BC%80%E9%94%99%E8%AF%AF/option2.png" alt="图2"></p><blockquote><p>解决问题</p></blockquote><p>&emsp;&emsp;起初,本以为是因为ios::in的问题,猜测可能是先使用了ios::in,结果文件不存在,导致文件打开失败,然后直接返回,而忽略了ios::out的文件不存在则创建文件.然后,总感觉哪里不对,于是,我决定去源文件中去看看到底是为什么导致了文件无法创建.</p><p>&emsp;&emsp;首先是去头文件中查看以下,以下是fstream的部分代码(只挑选了一些比较重要的代码,外加删除了一点点.):</p><pre><code class="hljs sqf"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _GLIBCXX_FSTREAM</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _GLIBCXX_FSTREAM 1</span><span class="hljs-meta">#pragma GCC system_header</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;istream&gt;             //输入流头文件</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ostream&gt;             //输出流头文件</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/codecvt.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;             // For BUFSIZ</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/basic_file.h&gt;  // For __basic_file, __c_lock</span></span><span class="hljs-meta">#if __cplusplus &gt;= 201103L</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;             // For std::string overloads.</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><span class="hljs-comment">//basic_filebuf类,继承的basic_streambuf类</span><span class="hljs-comment">// [27.8.1.1] template class basic_filebuf</span><span class="hljs-comment">/**</span><span class="hljs-comment"> *  @brief  The actual work of input and output (for files).</span><span class="hljs-comment"> *  @ingroup io</span><span class="hljs-comment"> *</span><span class="hljs-comment"> *  @tparam _CharT  Type of character stream.</span><span class="hljs-comment"> *  @tparam _Traits  Traits for character type, defaults to</span><span class="hljs-comment"> *                   char_traits&lt;_CharT&gt;.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> *  This class associates both its input and output sequence with an</span><span class="hljs-comment"> *  external disk file, and maintains a joint file position for both</span><span class="hljs-comment"> *  sequences.  Many of its semantics are described in terms of similar</span><span class="hljs-comment"> *  behavior in the Standard C Library&#x27;s @c FILE streams.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> *  Requirements on traits_type, specific to this class:</span><span class="hljs-comment"> *  - traits_type::pos_type must be fpos&lt;traits_type::state_type&gt;</span><span class="hljs-comment"> *  - traits_type::off_type must be streamoff</span><span class="hljs-comment"> *  - traits_type::state_type must be Assignable and DefaultConstructible,</span><span class="hljs-comment"> *  - traits_type::state_type() must be the initial state for codecvt.</span><span class="hljs-comment"> */</span>template&lt;<span class="hljs-built_in">typename</span> <span class="hljs-variable">_CharT</span>, <span class="hljs-built_in">typename</span> <span class="hljs-variable">_Traits</span>&gt;  class basic_filebuf : public basic_streambuf&lt;<span class="hljs-variable">_CharT</span>, <span class="hljs-variable">_Traits</span>&gt;  &#123;  public:    <span class="hljs-comment">// Types:</span>    typedef <span class="hljs-variable">_CharT</span>                             char_type;    typedef <span class="hljs-variable">_Traits</span>                            traits_type;    typedef <span class="hljs-built_in">typename</span> traits_type::int_type int_type;    typedef <span class="hljs-built_in">typename</span> traits_type::pos_type pos_type;    typedef <span class="hljs-built_in">typename</span> traits_type::off_type off_type;    typedef basic_streambuf&lt;char_type, traits_type&gt;  <span class="hljs-variable">__streambuf_type</span>;    typedef basic_filebuf&lt;char_type, traits_type&gt;     <span class="hljs-variable">__filebuf_type</span>;    typedef <span class="hljs-variable">__basic_file</span>&lt;char&gt;        <span class="hljs-variable">__file_type</span>;    typedef <span class="hljs-built_in">typename</span> traits_type::state_type          <span class="hljs-variable">__state_type</span>;    typedef codecvt&lt;char_type, char, <span class="hljs-variable">__state_type</span>&gt;    <span class="hljs-variable">__codecvt_type</span>;    friend class ios_base; <span class="hljs-comment">// For sync_with_stdio.</span>  protected:    <span class="hljs-comment">// Data Members:</span>    <span class="hljs-comment">// MT lock inherited from libio or other low-level io library.</span>    <span class="hljs-variable">__c_lock</span>          <span class="hljs-variable">_M_lock</span>;    <span class="hljs-comment">// External buffer.</span>    <span class="hljs-variable">__file_type</span> <span class="hljs-variable">_M_file</span>;    <span class="hljs-comment">/// Place to stash in || out || in | out settings for current filebuf.</span>    ios_base::openmode <span class="hljs-variable">_M_mode</span>;    <span class="hljs-comment">// Beginning state type for codecvt.</span>    <span class="hljs-variable">__state_type</span> <span class="hljs-variable">_M_state_beg</span>;    <span class="hljs-comment">// During output, the state that corresponds to pptr(),</span>    <span class="hljs-comment">// during input, the state that corresponds to egptr() and</span>    <span class="hljs-comment">// _M_ext_next.</span>    <span class="hljs-variable">__state_type</span><span class="hljs-variable">_M_state_cur</span>;    <span class="hljs-comment">// Not used for output. During input, the state that corresponds</span>    <span class="hljs-comment">// to eback() and _M_ext_buf.</span>    <span class="hljs-variable">__state_type</span><span class="hljs-variable">_M_state_last</span>;    <span class="hljs-comment">/// Pointer to the beginning of internal buffer.</span>    char_type*<span class="hljs-variable">_M_buf</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Actual size of internal buffer. This number is equal to the size</span><span class="hljs-comment">     *  of the put area + 1 position, reserved for the overflow char of</span><span class="hljs-comment">     *  a full area.</span><span class="hljs-comment">     */</span>    size_t<span class="hljs-variable">_M_buf_size</span>;    <span class="hljs-comment">// Set iff _M_buf is allocated memory from _M_allocate_internal_buffer.</span>    bool<span class="hljs-variable">_M_buf_allocated</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  _M_reading == false &amp;&amp; _M_writing == false for @b uncommitted mode;</span><span class="hljs-comment">     *  _M_reading == true for @b read mode;</span><span class="hljs-comment">     *  _M_writing == true for @b write mode;</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  NB: _M_reading == true &amp;&amp; _M_writing == true is unused.</span><span class="hljs-comment">     */</span>    bool                      <span class="hljs-variable">_M_reading</span>;    bool                      <span class="hljs-variable">_M_writing</span>;    <span class="hljs-comment">//@&#123;</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Necessary bits for putback buffer management.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  @note pbacks of over one character are not currently supported.</span><span class="hljs-comment">     */</span>    char_type<span class="hljs-variable">_M_pback</span>;    char_type*<span class="hljs-variable">_M_pback_cur_save</span>;    char_type*<span class="hljs-variable">_M_pback_end_save</span>;    bool<span class="hljs-variable">_M_pback_init</span>;    <span class="hljs-comment">//@&#125;</span>    <span class="hljs-comment">// Cached codecvt facet.</span>    const <span class="hljs-variable">__codecvt_type</span>* <span class="hljs-variable">_M_codecvt</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Buffer for external characters. Used for input when</span><span class="hljs-comment">     *  codecvt::always_noconv() == false. When valid, this corresponds</span><span class="hljs-comment">     *  to eback().</span><span class="hljs-comment">     */</span>    char*<span class="hljs-variable">_M_ext_buf</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Size of buffer held by _M_ext_buf.</span><span class="hljs-comment">     */</span>    streamsize<span class="hljs-variable">_M_ext_buf_size</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Pointers into the buffer held by _M_ext_buf that delimit a</span><span class="hljs-comment">     *  subsequence of bytes that have been read but not yet converted.</span><span class="hljs-comment">     *  When valid, _M_ext_next corresponds to egptr().</span><span class="hljs-comment">     */</span>    const char*<span class="hljs-variable">_M_ext_next</span>;    char*<span class="hljs-variable">_M_ext_end</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Initializes pback buffers, and moves normal buffers to safety.</span><span class="hljs-comment">     *  Assumptions:</span><span class="hljs-comment">     *  _M_in_cur has already been moved back</span><span class="hljs-comment">     */</span>    void    <span class="hljs-variable">_M_create_pback</span>()    &#123;<span class="hljs-keyword">if</span> (!<span class="hljs-variable">_M_pback_init</span>)  &#123;    <span class="hljs-variable">_M_pback_cur_save</span> = this-&gt;gptr();    <span class="hljs-variable">_M_pback_end_save</span> = this-&gt;egptr();    this-&gt;setg(&amp;<span class="hljs-variable">_M_pback</span>, &amp;<span class="hljs-variable">_M_pback</span>, &amp;<span class="hljs-variable">_M_pback</span> + <span class="hljs-number">1</span>);    <span class="hljs-variable">_M_pback_init</span> = <span class="hljs-literal">true</span>;  &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Deactivates pback buffer contents, and restores normal buffer.</span><span class="hljs-comment">     *  Assumptions:</span><span class="hljs-comment">     *  The pback buffer has only moved forward.</span><span class="hljs-comment">     */</span>    void    <span class="hljs-variable">_M_destroy_pback</span>() <span class="hljs-keyword">throw</span>()    &#123;<span class="hljs-keyword">if</span> (<span class="hljs-variable">_M_pback_init</span>)  &#123;    <span class="hljs-comment">// Length _M_in_cur moved in the pback buffer.</span>    <span class="hljs-variable">_M_pback_cur_save</span> += this-&gt;gptr() != this-&gt;eback();    this-&gt;setg(<span class="hljs-variable">_M_buf</span>, <span class="hljs-variable">_M_pback_cur_save</span>, <span class="hljs-variable">_M_pback_end_save</span>);    <span class="hljs-variable">_M_pback_init</span> = <span class="hljs-literal">false</span>;  &#125;    &#125;  public:    <span class="hljs-comment">// Constructors/destructor:</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Does not open any files.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  The default constructor initializes the parent class using its</span><span class="hljs-comment">     *  own default ctor.</span><span class="hljs-comment">     */</span>    basic_filebuf();    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  The destructor closes the file first.</span><span class="hljs-comment">     */</span>    virtual    ~basic_filebuf()    &#123; this-&gt;close(); &#125;    <span class="hljs-comment">// Members:</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Returns true if the external file is open.</span><span class="hljs-comment">     */</span>    bool    is_open() const <span class="hljs-keyword">throw</span>()    &#123; return <span class="hljs-variable">_M_file</span>.is_open(); &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Opens an external file.</span><span class="hljs-comment">     *  @param  __s  The name of the file.</span><span class="hljs-comment">     *  @param  __mode  The open mode flags.</span><span class="hljs-comment">     *  @return  @c this on success, NULL on failure</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If a file is already open, this function immediately fails.</span><span class="hljs-comment">     *  Otherwise it tries to open the file named @a __s using the flags</span><span class="hljs-comment">     *  given in @a __mode.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  Table 92, adapted here, gives the relation between openmode</span><span class="hljs-comment">     *  combinations and the equivalent @c fopen() flags.</span><span class="hljs-comment">     *  (NB: lines app, in|out|app, in|app, binary|app, binary|in|out|app,</span><span class="hljs-comment">     *  and binary|in|app per DR 596)</span><span class="hljs-comment">     *  &lt;pre&gt;</span><span class="hljs-comment">     *  +---------------------------------------------------------+</span><span class="hljs-comment">     *  | ios_base Flag combination            stdio equivalent   |</span><span class="hljs-comment">     *  |binary  in  out  trunc  app                              |</span><span class="hljs-comment">     *  +---------------------------------------------------------+</span><span class="hljs-comment">     *  |             +                        w                  |</span><span class="hljs-comment">     *  |             +           +            a                  |</span><span class="hljs-comment">     *  |                         +            a                  |</span><span class="hljs-comment">     *  |             +     +                  w                  |</span><span class="hljs-comment">     *  |         +                            r                  |</span><span class="hljs-comment">     *  |         +   +                        r+                 |</span><span class="hljs-comment">     *  |         +   +     +                  w+                 |</span><span class="hljs-comment">     *  |         +   +           +            a+                 |</span><span class="hljs-comment">     *  |         +               +            a+                 |</span><span class="hljs-comment">     *  +---------------------------------------------------------+</span><span class="hljs-comment">     *  |   +         +                        wb                 |</span><span class="hljs-comment">     *  |   +         +           +            ab                 |</span><span class="hljs-comment">     *  |   +                     +            ab                 |</span><span class="hljs-comment">     *  |   +         +     +                  wb                 |</span><span class="hljs-comment">     *  |   +     +                            rb                 |</span><span class="hljs-comment">     *  |   +     +   +                        r+b                |</span><span class="hljs-comment">     *  |   +     +   +     +                  w+b                |</span><span class="hljs-comment">     *  |   +     +   +           +            a+b                |</span><span class="hljs-comment">     *  |   +     +               +            a+b                |</span><span class="hljs-comment">     *  +---------------------------------------------------------+</span><span class="hljs-comment">     *  &lt;/pre&gt;</span><span class="hljs-comment">     */</span>    <span class="hljs-variable">__filebuf_type</span>*    open(const char* <span class="hljs-variable">__s</span>, ios_base::openmode <span class="hljs-variable">__mode</span>);<span class="hljs-meta">#if __cplusplus &gt;= 201103L</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Opens an external file.</span><span class="hljs-comment">     *  @param  __s  The name of the file.</span><span class="hljs-comment">     *  @param  __mode  The open mode flags.</span><span class="hljs-comment">     *  @return  @c this on success, NULL on failure</span><span class="hljs-comment">     */</span>    <span class="hljs-variable">__filebuf_type</span>*    open(const std::string&amp; <span class="hljs-variable">__s</span>, ios_base::openmode <span class="hljs-variable">__mode</span>)    &#123; return open(<span class="hljs-variable">__s</span>.c_str(), <span class="hljs-variable">__mode</span>); &#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// C++11</span></span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Closes the currently associated file.</span><span class="hljs-comment">     *  @return  @c this on success, NULL on failure</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If no file is currently open, this function immediately fails.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If a &lt;em&gt;put buffer area&lt;/em&gt; exists, @c overflow(eof) is</span><span class="hljs-comment">     *  called to flush all the characters.  The file is then</span><span class="hljs-comment">     *  closed.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If any operations fail, this function also fails.</span><span class="hljs-comment">     */</span>    <span class="hljs-variable">__filebuf_type</span>*    close();  protected:    void    <span class="hljs-variable">_M_allocate_internal_buffer</span>();    void    <span class="hljs-variable">_M_destroy_internal_buffer</span>() <span class="hljs-keyword">throw</span>();    <span class="hljs-comment">// [27.8.1.4] overridden virtual functions</span>    virtual streamsize    showmanyc();    <span class="hljs-comment">// Stroustrup, 1998, p. 628</span>    <span class="hljs-comment">// underflow() and uflow() functions are called to get the next</span>    <span class="hljs-comment">// character from the real input source when the buffer is empty.</span>    <span class="hljs-comment">// Buffered input uses underflow()</span>    virtual int_type    underflow();    virtual int_type    pbackfail(int_type <span class="hljs-variable">__c</span> = <span class="hljs-variable">_Traits</span>::eof());    <span class="hljs-comment">// Stroustrup, 1998, p 648</span>    <span class="hljs-comment">// The overflow() function is called to transfer characters to the</span>    <span class="hljs-comment">// real output destination when the buffer is full. A call to</span>    <span class="hljs-comment">// overflow(c) outputs the contents of the buffer plus the</span>    <span class="hljs-comment">// character c.</span>    <span class="hljs-comment">// 27.5.2.4.5</span>    <span class="hljs-comment">// Consume some sequence of the characters in the pending sequence.</span>    virtual int_type    overflow(int_type <span class="hljs-variable">__c</span> = <span class="hljs-variable">_Traits</span>::eof());    <span class="hljs-comment">// Convert internal byte sequence to external, char-based</span>    <span class="hljs-comment">// sequence via codecvt.</span>    bool    <span class="hljs-variable">_M_convert_to_external</span>(char_type*, streamsize);    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Manipulates the buffer.</span><span class="hljs-comment">     *  @param  __s  Pointer to a buffer area.</span><span class="hljs-comment">     *  @param  __n  Size of @a __s.</span><span class="hljs-comment">     *  @return  @c this</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If no file has been opened, and both @a __s and @a __n are zero, then</span><span class="hljs-comment">     *  the stream becomes unbuffered.  Otherwise, @c __s is used as a</span><span class="hljs-comment">     *  buffer; see</span><span class="hljs-comment">     *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html#io.streambuf.buffering</span><span class="hljs-comment">     *  for more.</span><span class="hljs-comment">     */</span>    virtual <span class="hljs-variable">__streambuf_type</span>*    setbuf(char_type* <span class="hljs-variable">__s</span>, streamsize <span class="hljs-variable">__n</span>);    virtual pos_type    seekoff(off_type <span class="hljs-variable">__off</span>, ios_base::seekdir <span class="hljs-variable">__way</span>,      ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out);    virtual pos_type    seekpos(pos_type <span class="hljs-variable">__pos</span>,      ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out);    <span class="hljs-comment">// Common code for seekoff, seekpos, and overflow</span>    pos_type    <span class="hljs-variable">_M_seek</span>(off_type <span class="hljs-variable">__off</span>, ios_base::seekdir <span class="hljs-variable">__way</span>, <span class="hljs-variable">__state_type</span> <span class="hljs-variable">__state</span>);    int    <span class="hljs-variable">_M_get_ext_pos</span>(<span class="hljs-variable">__state_type</span> &amp;<span class="hljs-variable">__state</span>);    virtual int    sync();    virtual void    imbue(const locale&amp; <span class="hljs-variable">__loc</span>);    virtual streamsize    xsgetn(char_type* <span class="hljs-variable">__s</span>, streamsize <span class="hljs-variable">__n</span>);    virtual streamsize    xsputn(const char_type* <span class="hljs-variable">__s</span>, streamsize <span class="hljs-variable">__n</span>);    <span class="hljs-comment">// Flushes output buffer, then writes unshift sequence.</span>    bool    <span class="hljs-variable">_M_terminate_output</span>();    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  This function sets the pointers of the internal buffer, both get</span><span class="hljs-comment">     *  and put areas. Typically:</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *   __off == egptr() - eback() upon underflow/uflow (@b read mode);</span><span class="hljs-comment">     *   __off == 0 upon overflow (@b write mode);</span><span class="hljs-comment">     *   __off == -1 upon open, setbuf, seekoff/pos (@b uncommitted mode).</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  NB: epptr() - pbase() == _M_buf_size - 1, since _M_buf_size</span><span class="hljs-comment">     *  reflects the actual allocated memory and the last cell is reserved</span><span class="hljs-comment">     *  for the overflow char of a full put area.</span><span class="hljs-comment">     */</span>    void    <span class="hljs-variable">_M_set_buffer</span>(streamsize <span class="hljs-variable">__off</span>)    &#123;const bool <span class="hljs-variable">__testin</span> = <span class="hljs-variable">_M_mode</span> &amp; ios_base::<span class="hljs-built_in">in</span>;const bool <span class="hljs-variable">__testout</span> = (<span class="hljs-variable">_M_mode</span> &amp; ios_base::out      || <span class="hljs-variable">_M_mode</span> &amp; ios_base::app);<span class="hljs-keyword">if</span> (<span class="hljs-variable">__testin</span> &amp;&amp; <span class="hljs-variable">__off</span> &gt; <span class="hljs-number">0</span>)  this-&gt;setg(<span class="hljs-variable">_M_buf</span>, <span class="hljs-variable">_M_buf</span>, <span class="hljs-variable">_M_buf</span> + <span class="hljs-variable">__off</span>);<span class="hljs-keyword">else</span>  this-&gt;setg(<span class="hljs-variable">_M_buf</span>, <span class="hljs-variable">_M_buf</span>, <span class="hljs-variable">_M_buf</span>);<span class="hljs-keyword">if</span> (<span class="hljs-variable">__testout</span> &amp;&amp; <span class="hljs-variable">__off</span> == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">_M_buf_size</span> &gt; <span class="hljs-number">1</span> )  this-&gt;setp(<span class="hljs-variable">_M_buf</span>, <span class="hljs-variable">_M_buf</span> + <span class="hljs-variable">_M_buf_size</span> - <span class="hljs-number">1</span>);<span class="hljs-keyword">else</span>  this-&gt;setp(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);    &#125;  &#125;;  <span class="hljs-comment">//basic_fstream类,继承basic_iostream</span>  <span class="hljs-comment">//basic_fstream类就是fstream类,只不过使用了typedef</span>  <span class="hljs-comment">//typedef basic_fstream&lt;char&gt; fstream;</span>  <span class="hljs-comment">// [27.8.1.11] Template class basic_fstream</span>  <span class="hljs-comment">/**</span><span class="hljs-comment">   *  @brief  Controlling input and output for files.</span><span class="hljs-comment">   *  @ingroup io</span><span class="hljs-comment">   *</span><span class="hljs-comment">   *  @tparam _CharT  Type of character stream.</span><span class="hljs-comment">   *  @tparam _Traits  Traits for character type, defaults to</span><span class="hljs-comment">   *                   char_traits&lt;_CharT&gt;.</span><span class="hljs-comment">   *</span><span class="hljs-comment">   *  This class supports reading from and writing to named files, using</span><span class="hljs-comment">   *  the inherited functions from std::basic_iostream.  To control the</span><span class="hljs-comment">   *  associated sequence, an instance of std::basic_filebuf is used, which</span><span class="hljs-comment">   *  this page refers to as @c sb.</span><span class="hljs-comment">   */</span>  template&lt;<span class="hljs-built_in">typename</span> <span class="hljs-variable">_CharT</span>, <span class="hljs-built_in">typename</span> <span class="hljs-variable">_Traits</span>&gt;    class basic_fstream : public basic_iostream&lt;<span class="hljs-variable">_CharT</span>, <span class="hljs-variable">_Traits</span>&gt;    &#123;    public:      <span class="hljs-comment">// Types:</span>      typedef <span class="hljs-variable">_CharT</span> char_type;      typedef <span class="hljs-variable">_Traits</span> traits_type;      typedef <span class="hljs-built_in">typename</span> traits_type::int_type int_type;      typedef <span class="hljs-built_in">typename</span> traits_type::pos_type pos_type;      typedef <span class="hljs-built_in">typename</span> traits_type::off_type off_type;      <span class="hljs-comment">// Non-standard types:</span>      typedef basic_filebuf&lt;char_type, traits_type&gt; <span class="hljs-variable">__filebuf_type</span>;      typedef basic_ios&lt;char_type, traits_type&gt;<span class="hljs-variable">__ios_type</span>;      typedef basic_iostream&lt;char_type, traits_type&gt;<span class="hljs-variable">__iostream_type</span>;    <span class="hljs-keyword">private</span>:      <span class="hljs-variable">__filebuf_type</span><span class="hljs-variable">_M_filebuf</span>;    public:      <span class="hljs-comment">// Constructors/destructor:</span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Default constructor.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  Initializes @c sb using its default constructor, and passes</span><span class="hljs-comment">       *  @c &amp;sb to the base class initializer.  Does not open any files</span><span class="hljs-comment">       *  (you haven&#x27;t given it a filename to open).</span><span class="hljs-comment">       */</span>      basic_fstream()      : <span class="hljs-variable">__iostream_type</span>(), <span class="hljs-variable">_M_filebuf</span>()      &#123; this-&gt;init(&amp;<span class="hljs-variable">_M_filebuf</span>); &#125;      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Create an input/output file stream.</span><span class="hljs-comment">       *  @param  __s  Null terminated string specifying the filename.</span><span class="hljs-comment">       *  @param  __mode  Open file in specified mode (see std::ios_base).</span><span class="hljs-comment">       */</span>      explicit      basic_fstream(const char* <span class="hljs-variable">__s</span>,        ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out)      : <span class="hljs-variable">__iostream_type</span>(<span class="hljs-number">0</span>), <span class="hljs-variable">_M_filebuf</span>()      &#123;  this-&gt;init(&amp;<span class="hljs-variable">_M_filebuf</span>);  this-&gt;open(<span class="hljs-variable">__s</span>, <span class="hljs-variable">__mode</span>);      &#125;<span class="hljs-meta">#if __cplusplus &gt;= 201103L</span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Create an input/output file stream.</span><span class="hljs-comment">       *  @param  __s  Null terminated string specifying the filename.</span><span class="hljs-comment">       *  @param  __mode  Open file in specified mode (see std::ios_base).</span><span class="hljs-comment">       */</span>      explicit      basic_fstream(const std::string&amp; <span class="hljs-variable">__s</span>,        ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out)      : <span class="hljs-variable">__iostream_type</span>(<span class="hljs-number">0</span>), <span class="hljs-variable">_M_filebuf</span>()      &#123;  this-&gt;init(&amp;<span class="hljs-variable">_M_filebuf</span>);  this-&gt;open(<span class="hljs-variable">__s</span>, <span class="hljs-variable">__mode</span>);      &#125;      basic_fstream(const basic_fstream&amp;) = delete;      basic_fstream(basic_fstream&amp;&amp; <span class="hljs-variable">__rhs</span>)      : <span class="hljs-variable">__iostream_type</span>(std::<span class="hljs-built_in">move</span>(<span class="hljs-variable">__rhs</span>)),      <span class="hljs-variable">_M_filebuf</span>(std::<span class="hljs-built_in">move</span>(<span class="hljs-variable">__rhs</span>.<span class="hljs-variable">_M_filebuf</span>))      &#123; <span class="hljs-variable">__iostream_type</span>::set_rdbuf(&amp;<span class="hljs-variable">_M_filebuf</span>); &#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  The destructor does nothing.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  The file is closed by the filebuf object, not the formatting</span><span class="hljs-comment">       *  stream.</span><span class="hljs-comment">       */</span>      ~basic_fstream()      &#123; &#125;      <span class="hljs-comment">// Members:</span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Accessing the underlying buffer.</span><span class="hljs-comment">       *  @return  The current basic_filebuf buffer.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  This hides both signatures of std::basic_ios::rdbuf().</span><span class="hljs-comment">       */</span>      <span class="hljs-variable">__filebuf_type</span>*      rdbuf() const      &#123; return const_cast&lt;<span class="hljs-variable">__filebuf_type</span>*&gt;(&amp;<span class="hljs-variable">_M_filebuf</span>); &#125;      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Wrapper to test for an open file.</span><span class="hljs-comment">       *  @return  @c rdbuf()-&gt;is_open()</span><span class="hljs-comment">       */</span>      bool      is_open()      &#123; return <span class="hljs-variable">_M_filebuf</span>.is_open(); &#125;      <span class="hljs-comment">// _GLIBCXX_RESOLVE_LIB_DEFECTS</span>      <span class="hljs-comment">// 365. Lack of const-qualification in clause 27</span>      bool      is_open() const      &#123; return <span class="hljs-variable">_M_filebuf</span>.is_open(); &#125;      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Opens an external file.</span><span class="hljs-comment">       *  @param  __s  The name of the file.</span><span class="hljs-comment">       *  @param  __mode  The open mode flags.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  Calls @c std::basic_filebuf::open(__s,__mode).  If that</span><span class="hljs-comment">       *  function fails, @c failbit is set in the stream&#x27;s error state.</span><span class="hljs-comment">       */</span>      void      open(const char* <span class="hljs-variable">__s</span>,     ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out)      &#123;  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">_M_filebuf</span>.open(<span class="hljs-variable">__s</span>, <span class="hljs-variable">__mode</span>))    this-&gt;setstate(ios_base::failbit);  <span class="hljs-keyword">else</span>    <span class="hljs-comment">// _GLIBCXX_RESOLVE_LIB_DEFECTS</span>    <span class="hljs-comment">// 409. Closing an fstream should clear error state</span>    this-&gt;clear();      &#125;<span class="hljs-meta">#if __cplusplus &gt;= 201103L</span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Opens an external file.</span><span class="hljs-comment">       *  @param  __s  The name of the file.</span><span class="hljs-comment">       *  @param  __mode  The open mode flags.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  Calls @c std::basic_filebuf::open(__s,__mode).  If that</span><span class="hljs-comment">       *  function fails, @c failbit is set in the stream&#x27;s error state.</span><span class="hljs-comment">       */</span>      void      open(const std::string&amp; <span class="hljs-variable">__s</span>,     ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out)      &#123;  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">_M_filebuf</span>.open(<span class="hljs-variable">__s</span>, <span class="hljs-variable">__mode</span>))    this-&gt;setstate(ios_base::failbit);  <span class="hljs-keyword">else</span>    <span class="hljs-comment">// _GLIBCXX_RESOLVE_LIB_DEFECTS</span>    <span class="hljs-comment">// 409. Closing an fstream should clear error state</span>    this-&gt;clear();      &#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// C++11</span></span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Close the file.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  Calls @c std::basic_filebuf::close().  If that function</span><span class="hljs-comment">       *  fails, @c failbit is set in the stream&#x27;s error state.</span><span class="hljs-comment">       */</span>      void      close()      &#123;  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">_M_filebuf</span>.close())    this-&gt;setstate(ios_base::failbit);      &#125;    &#125;;</code></pre><p>&emsp;&emsp;看的头皮发麻,还得删掉一些,得找到重点</p><pre><code class="hljs sqf"><span class="hljs-comment">/** @file include/fstream</span><span class="hljs-comment"> *  This is a Standard C++ Library header.</span><span class="hljs-comment"> */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;istream&gt;             //输入流头文件</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ostream&gt;             //输出流头文件</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/codecvt.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;             // For BUFSIZ</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/basic_file.h&gt;  // For __basic_file, __c_lock</span></span><span class="hljs-meta">#if __cplusplus &gt;= 201103L</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;             // For std::string overloads.</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><span class="hljs-comment">//basic_filebuf类,继承的basic_streambuf类</span>template&lt;<span class="hljs-built_in">typename</span> <span class="hljs-variable">_CharT</span>, <span class="hljs-built_in">typename</span> <span class="hljs-variable">_Traits</span>&gt;  class basic_filebuf : public basic_streambuf&lt;<span class="hljs-variable">_CharT</span>, <span class="hljs-variable">_Traits</span>&gt;  &#123;  public:    typedef <span class="hljs-variable">_CharT</span>                           char_type;<span class="hljs-comment">//重命名_CharT为char_type</span>    typedef <span class="hljs-variable">_Traits</span>                          traits_type;<span class="hljs-comment">//重命名_Traits为traits_type</span>    typedef <span class="hljs-built_in">typename</span> traits_type::int_type int_type;<span class="hljs-comment">//同理</span>    typedef <span class="hljs-built_in">typename</span> traits_type::pos_type pos_type;<span class="hljs-comment">//同理</span>    typedef <span class="hljs-built_in">typename</span> traits_type::off_type off_type;<span class="hljs-comment">//同理</span>    typedef basic_streambuf&lt;char_type, traits_type&gt;  <span class="hljs-variable">__streambuf_type</span>;<span class="hljs-comment">//同理</span>    <span class="hljs-comment">//!!!!!!!!!!!!!</span>    <span class="hljs-comment">//留意一下,比较重要,它将自身重命名了__filebuf_type类型,也就是说__filebuf_type类型的对象就是basic_filebuf类的对象</span>    typedef basic_filebuf&lt;char_type, traits_type&gt;     <span class="hljs-variable">__filebuf_type</span>;<span class="hljs-comment">//重命名basic_filebuf&lt;char_type, traits_type&gt;为__filebuf_type</span>    typedef <span class="hljs-variable">__basic_file</span>&lt;char&gt;        <span class="hljs-variable">__file_type</span>;<span class="hljs-comment">//同理</span>    typedef <span class="hljs-built_in">typename</span> traits_type::state_type          <span class="hljs-variable">__state_type</span>;<span class="hljs-comment">//同理</span>    typedef codecvt&lt;char_type, char, <span class="hljs-variable">__state_type</span>&gt;    <span class="hljs-variable">__codecvt_type</span>;<span class="hljs-comment">//同理</span>    <span class="hljs-comment">//朋友类,ios_base,也就ios::in,ios::out这些</span>    friend class ios_base; <span class="hljs-comment">// For sync_with_stdio.</span>  protected:    <span class="hljs-comment">//数据定义</span>    <span class="hljs-variable">__file_type</span> <span class="hljs-variable">_M_file</span>;<span class="hljs-comment">//留意一下,自身保存了自己的一个对象!</span>    ios_base::openmode <span class="hljs-variable">_M_mode</span>;    <span class="hljs-comment">//打开文件的模式</span>    <span class="hljs-variable">__c_lock</span>          <span class="hljs-variable">_M_lock</span>;    <span class="hljs-variable">__state_type</span> <span class="hljs-variable">_M_state_beg</span>;<span class="hljs-comment">//文件指针状态开头</span>    <span class="hljs-variable">__state_type</span><span class="hljs-variable">_M_state_cur</span>;<span class="hljs-comment">//文件指针状态当前位置</span>    <span class="hljs-variable">__state_type</span><span class="hljs-variable">_M_state_last</span>;<span class="hljs-comment">//文件指针状态末尾</span>    <span class="hljs-comment">/// Pointer to the beginning of internal buffer.</span>    char_type*<span class="hljs-variable">_M_buf</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Actual size of internal buffer. This number is equal to the size</span><span class="hljs-comment">     *  of the put area + 1 position, reserved for the overflow char of</span><span class="hljs-comment">     *  a full area.</span><span class="hljs-comment">     */</span>    size_t<span class="hljs-variable">_M_buf_size</span>;    <span class="hljs-comment">// Set iff _M_buf is allocated memory from _M_allocate_internal_buffer.</span>    bool<span class="hljs-variable">_M_buf_allocated</span>;    bool                      <span class="hljs-variable">_M_reading</span>;    bool                      <span class="hljs-variable">_M_writing</span>;    char_type<span class="hljs-variable">_M_pback</span>;    char_type*<span class="hljs-variable">_M_pback_cur_save</span>;    char_type*<span class="hljs-variable">_M_pback_end_save</span>;    bool<span class="hljs-variable">_M_pback_init</span>;    const <span class="hljs-variable">__codecvt_type</span>* <span class="hljs-variable">_M_codecvt</span>;    char*<span class="hljs-variable">_M_ext_buf</span>;    streamsize<span class="hljs-variable">_M_ext_buf_size</span>;    const char*<span class="hljs-variable">_M_ext_next</span>;    char*<span class="hljs-variable">_M_ext_end</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Initializes pback buffers, and moves normal buffers to safety.</span><span class="hljs-comment">     *  Assumptions:</span><span class="hljs-comment">     *  _M_in_cur has already been moved back</span><span class="hljs-comment">     */</span>    void    <span class="hljs-variable">_M_create_pback</span>()    &#123;<span class="hljs-keyword">if</span> (!<span class="hljs-variable">_M_pback_init</span>)  &#123;    <span class="hljs-variable">_M_pback_cur_save</span> = this-&gt;gptr();    <span class="hljs-variable">_M_pback_end_save</span> = this-&gt;egptr();    this-&gt;setg(&amp;<span class="hljs-variable">_M_pback</span>, &amp;<span class="hljs-variable">_M_pback</span>, &amp;<span class="hljs-variable">_M_pback</span> + <span class="hljs-number">1</span>);    <span class="hljs-variable">_M_pback_init</span> = <span class="hljs-literal">true</span>;  &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Deactivates pback buffer contents, and restores normal buffer.</span><span class="hljs-comment">     *  Assumptions:</span><span class="hljs-comment">     *  The pback buffer has only moved forward.</span><span class="hljs-comment">     */</span>    void    <span class="hljs-variable">_M_destroy_pback</span>() <span class="hljs-keyword">throw</span>()    &#123;<span class="hljs-keyword">if</span> (<span class="hljs-variable">_M_pback_init</span>)  &#123;    <span class="hljs-comment">// Length _M_in_cur moved in the pback buffer.</span>    <span class="hljs-variable">_M_pback_cur_save</span> += this-&gt;gptr() != this-&gt;eback();    this-&gt;setg(<span class="hljs-variable">_M_buf</span>, <span class="hljs-variable">_M_pback_cur_save</span>, <span class="hljs-variable">_M_pback_end_save</span>);    <span class="hljs-variable">_M_pback_init</span> = <span class="hljs-literal">false</span>;  &#125;    &#125;  public:    <span class="hljs-comment">// Constructors/destructor:</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Does not open any files.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  The default constructor initializes the parent class using its</span><span class="hljs-comment">     *  own default ctor.</span><span class="hljs-comment">     */</span>    basic_filebuf();<span class="hljs-comment">//构造函数</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  The destructor closes the file first.</span><span class="hljs-comment">     */</span>    virtual    ~basic_filebuf()<span class="hljs-comment">//销毁函数</span>    &#123; this-&gt;close(); &#125;    <span class="hljs-comment">// Members:</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Returns true if the external file is open.</span><span class="hljs-comment">     */</span>    bool    is_open() const <span class="hljs-keyword">throw</span>()<span class="hljs-comment">//判断是否打开文件</span>    &#123; return <span class="hljs-variable">_M_file</span>.is_open(); &#125;    <span class="hljs-comment">//我们的重点,打开文件的函数</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Opens an external file.</span><span class="hljs-comment">     *  @param  __s  The name of the file.</span><span class="hljs-comment">     *  @param  __mode  The open mode flags.</span><span class="hljs-comment">     *  @return  @c this on success, NULL on failure</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If a file is already open, this function immediately fails.</span><span class="hljs-comment">     *  Otherwise it tries to open the file named @a __s using the flags</span><span class="hljs-comment">     *  given in @a __mode.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  Table 92, adapted here, gives the relation between openmode</span><span class="hljs-comment">     *  combinations and the equivalent @c fopen() flags.</span><span class="hljs-comment">     *  (NB: lines app, in|out|app, in|app, binary|app, binary|in|out|app,</span><span class="hljs-comment">     *  and binary|in|app per DR 596)</span><span class="hljs-comment">     *  &lt;pre&gt;</span><span class="hljs-comment">     *  +---------------------------------------------------------+</span><span class="hljs-comment">     *  | ios_base Flag combination            stdio equivalent   |</span><span class="hljs-comment">     *  |binary  in  out  trunc  app                              |</span><span class="hljs-comment">     *  +---------------------------------------------------------+</span><span class="hljs-comment">     *  |             +                        w                  |</span><span class="hljs-comment">     *  |             +           +            a                  |</span><span class="hljs-comment">     *  |                         +            a                  |</span><span class="hljs-comment">     *  |             +     +                  w                  |</span><span class="hljs-comment">     *  |         +                            r                  |</span><span class="hljs-comment">     *  |         +   +                        r+                 |</span><span class="hljs-comment">     *  |         +   +     +                  w+                 |</span><span class="hljs-comment">     *  |         +   +           +            a+                 |</span><span class="hljs-comment">     *  |         +               +            a+                 |</span><span class="hljs-comment">     *  +---------------------------------------------------------+</span><span class="hljs-comment">     *  |   +         +                        wb                 |</span><span class="hljs-comment">     *  |   +         +           +            ab                 |</span><span class="hljs-comment">     *  |   +                     +            ab                 |</span><span class="hljs-comment">     *  |   +         +     +                  wb                 |</span><span class="hljs-comment">     *  |   +     +                            rb                 |</span><span class="hljs-comment">     *  |   +     +   +                        r+b                |</span><span class="hljs-comment">     *  |   +     +   +     +                  w+b                |</span><span class="hljs-comment">     *  |   +     +   +           +            a+b                |</span><span class="hljs-comment">     *  |   +     +               +            a+b                |</span><span class="hljs-comment">     *  +---------------------------------------------------------+</span><span class="hljs-comment">     *  &lt;/pre&gt;</span><span class="hljs-comment">     */</span>     <span class="hljs-comment">//没有函数体,视乎是一个声明,不管了,先放着一边,返回值是自身类型的一个指针</span>    <span class="hljs-variable">__filebuf_type</span>*    open(const char* <span class="hljs-variable">__s</span>, ios_base::openmode <span class="hljs-variable">__mode</span>);<span class="hljs-meta">#if __cplusplus &gt;= 201103L</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Opens an external file.</span><span class="hljs-comment">     *  @param  __s  The name of the file.</span><span class="hljs-comment">     *  @param  __mode  The open mode flags.</span><span class="hljs-comment">     *  @return  @c this on success, NULL on failure</span><span class="hljs-comment">     */</span>     <span class="hljs-comment">//又是一个打开文件函数,不管使用了预编译,需要大于特定版本</span>    <span class="hljs-variable">__filebuf_type</span>*    open(const std::string&amp; <span class="hljs-variable">__s</span>, ios_base::openmode <span class="hljs-variable">__mode</span>)    &#123; return open(<span class="hljs-variable">__s</span>.c_str(), <span class="hljs-variable">__mode</span>); &#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// C++11</span></span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Closes the currently associated file.</span><span class="hljs-comment">     *  @return  @c this on success, NULL on failure</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If no file is currently open, this function immediately fails.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If a &lt;em&gt;put buffer area&lt;/em&gt; exists, @c overflow(eof) is</span><span class="hljs-comment">     *  called to flush all the characters.  The file is then</span><span class="hljs-comment">     *  closed.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If any operations fail, this function also fails.</span><span class="hljs-comment">     */</span>    <span class="hljs-variable">__filebuf_type</span>*    close();<span class="hljs-comment">//关闭函数</span>  protected:    <span class="hljs-comment">//...还有一大把函数</span>  &#125;;  <span class="hljs-comment">//basic_fstream类,继承basic_iostream</span>  <span class="hljs-comment">//basic_fstream类就是fstream类,只不过使用了typedef</span>  <span class="hljs-comment">//typedef basic_fstream&lt;char&gt; fstream;</span>  template&lt;<span class="hljs-built_in">typename</span> <span class="hljs-variable">_CharT</span>, <span class="hljs-built_in">typename</span> <span class="hljs-variable">_Traits</span>&gt;    class basic_fstream : public basic_iostream&lt;<span class="hljs-variable">_CharT</span>, <span class="hljs-variable">_Traits</span>&gt;    &#123;    public:      typedef <span class="hljs-variable">_CharT</span> char_type;<span class="hljs-comment">//重命名_CharT为char_type</span>      typedef <span class="hljs-variable">_Traits</span> traits_type;<span class="hljs-comment">//重命名_Traits为traits_type</span>      typedef <span class="hljs-built_in">typename</span> traits_type::int_type int_type;<span class="hljs-comment">//同理</span>      typedef <span class="hljs-built_in">typename</span> traits_type::pos_type pos_type;<span class="hljs-comment">//同理</span>      typedef <span class="hljs-built_in">typename</span> traits_type::off_type off_type;<span class="hljs-comment">//同理</span>      <span class="hljs-comment">//留意一下,比较重要,它重命名了basic_filebuf为__filebuf_type</span>      typedef basic_filebuf&lt;char_type, traits_type&gt; <span class="hljs-variable">__filebuf_type</span>;      typedef basic_ios&lt;char_type, traits_type&gt;<span class="hljs-variable">__ios_type</span>;<span class="hljs-comment">//同理</span>      typedef basic_iostream&lt;char_type, traits_type&gt;<span class="hljs-variable">__iostream_type</span>;<span class="hljs-comment">//同理</span>    <span class="hljs-keyword">private</span>:      <span class="hljs-comment">//只有一个私有对象,那就是上面提到的basic_filebuf类的对象</span>      <span class="hljs-comment">//(重命名了basic_filebuf&lt;char_type, traits_type&gt;为basic_filebuf)</span>      <span class="hljs-variable">__filebuf_type</span><span class="hljs-variable">_M_filebuf</span>;    public:      basic_fstream()<span class="hljs-comment">//构造函数</span>      : <span class="hljs-variable">__iostream_type</span>(), <span class="hljs-variable">_M_filebuf</span>()      &#123; this-&gt;init(&amp;<span class="hljs-variable">_M_filebuf</span>); &#125;      explicit      basic_fstream(const char* <span class="hljs-variable">__s</span>,        ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out)<span class="hljs-comment">//又是一个构造函数</span>      : <span class="hljs-variable">__iostream_type</span>(<span class="hljs-number">0</span>), <span class="hljs-variable">_M_filebuf</span>()      &#123;  this-&gt;init(&amp;<span class="hljs-variable">_M_filebuf</span>);  this-&gt;open(<span class="hljs-variable">__s</span>, <span class="hljs-variable">__mode</span>);<span class="hljs-comment">//这个构造函数,调用了自身的一个打开函数,需要关注一下</span>      &#125;<span class="hljs-meta">#if __cplusplus &gt;= 201103L</span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Create an input/output file stream.</span><span class="hljs-comment">       *  @param  __s  Null terminated string specifying the filename.</span><span class="hljs-comment">       *  @param  __mode  Open file in specified mode (see std::ios_base).</span><span class="hljs-comment">       */</span>       <span class="hljs-comment">//预编译的构造函数,需要C++版本大于一定的版本</span>      explicit      basic_fstream(const std::string&amp; <span class="hljs-variable">__s</span>,        ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out)      : <span class="hljs-variable">__iostream_type</span>(<span class="hljs-number">0</span>), <span class="hljs-variable">_M_filebuf</span>()      &#123;  this-&gt;init(&amp;<span class="hljs-variable">_M_filebuf</span>);  this-&gt;open(<span class="hljs-variable">__s</span>, <span class="hljs-variable">__mode</span>);<span class="hljs-comment">//也打开了这个函数</span>      &#125;      basic_fstream(const basic_fstream&amp;) = delete;      basic_fstream(basic_fstream&amp;&amp; <span class="hljs-variable">__rhs</span>)      : <span class="hljs-variable">__iostream_type</span>(std::<span class="hljs-built_in">move</span>(<span class="hljs-variable">__rhs</span>)),      <span class="hljs-variable">_M_filebuf</span>(std::<span class="hljs-built_in">move</span>(<span class="hljs-variable">__rhs</span>.<span class="hljs-variable">_M_filebuf</span>))      &#123; <span class="hljs-variable">__iostream_type</span>::set_rdbuf(&amp;<span class="hljs-variable">_M_filebuf</span>); &#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  The destructor does nothing.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  The file is closed by the filebuf object, not the formatting</span><span class="hljs-comment">       *  stream.</span><span class="hljs-comment">       */</span>      ~basic_fstream()<span class="hljs-comment">//析构函数</span>      &#123; &#125;      <span class="hljs-comment">// Members:</span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Accessing the underlying buffer.</span><span class="hljs-comment">       *  @return  The current basic_filebuf buffer.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  This hides both signatures of std::basic_ios::rdbuf().</span><span class="hljs-comment">       */</span>      <span class="hljs-variable">__filebuf_type</span>*      rdbuf() const      &#123; return const_cast&lt;<span class="hljs-variable">__filebuf_type</span>*&gt;(&amp;<span class="hljs-variable">_M_filebuf</span>); &#125;      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Wrapper to test for an open file.</span><span class="hljs-comment">       *  @return  @c rdbuf()-&gt;is_open()</span><span class="hljs-comment">       */</span>      bool      is_open()      &#123; return <span class="hljs-variable">_M_filebuf</span>.is_open(); &#125;      <span class="hljs-comment">// _GLIBCXX_RESOLVE_LIB_DEFECTS</span>      <span class="hljs-comment">// 365. Lack of const-qualification in clause 27</span>      bool      is_open() const      &#123; return <span class="hljs-variable">_M_filebuf</span>.is_open(); &#125;<span class="hljs-comment">/*************************************这次解决问题的重点**********************/</span>      <span class="hljs-comment">//在构造时,调用到的打开函数</span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Opens an external file.</span><span class="hljs-comment">       *  @param  __s  The name of the file.</span><span class="hljs-comment">       *  @param  __mode  The open mode flags.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  Calls @c std::basic_filebuf::open(__s,__mode).  If that</span><span class="hljs-comment">       *  function fails, @c failbit is set in the stream&#x27;s error state.</span><span class="hljs-comment">       */</span>       <span class="hljs-comment">//第一个参数是字符数组指针(字符串),第二个参数是打开模式</span>       <span class="hljs-comment">//打开模式默认为ios_base::in | ios_base::out</span>      void      open(const char* <span class="hljs-variable">__s</span>,     ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out)      &#123;  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">_M_filebuf</span>.open(<span class="hljs-variable">__s</span>, <span class="hljs-variable">__mode</span>))<span class="hljs-comment">//调用basic_filebuf类中的open,如果打开失败,则设置failbit(会使得fail()函数返回真,其它的为false)</span>    this-&gt;setstate(ios_base::failbit);  <span class="hljs-keyword">else</span>    <span class="hljs-comment">// _GLIBCXX_RESOLVE_LIB_DEFECTS</span>    <span class="hljs-comment">// 409. Closing an fstream should clear error state</span>    this-&gt;clear();<span class="hljs-comment">//打开成功的话,就清除错误状态,(可能之前就有)</span>      &#125;<span class="hljs-comment">/*************************************这次解决问题的重点**********************/</span><span class="hljs-meta">#if __cplusplus &gt;= 201103L</span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Opens an external file.</span><span class="hljs-comment">       *  @param  __s  The name of the file.</span><span class="hljs-comment">       *  @param  __mode  The open mode flags.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  Calls @c std::basic_filebuf::open(__s,__mode).  If that</span><span class="hljs-comment">       *  function fails, @c failbit is set in the stream&#x27;s error state.</span><span class="hljs-comment">       */</span>      void      open(const std::string&amp; <span class="hljs-variable">__s</span>,     ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out)      &#123;  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">_M_filebuf</span>.open(<span class="hljs-variable">__s</span>, <span class="hljs-variable">__mode</span>))    this-&gt;setstate(ios_base::failbit);  <span class="hljs-keyword">else</span>    <span class="hljs-comment">// _GLIBCXX_RESOLVE_LIB_DEFECTS</span>    <span class="hljs-comment">// 409. Closing an fstream should clear error state</span>    this-&gt;clear();      &#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// C++11</span></span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Close the file.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  Calls @c std::basic_filebuf::close().  If that function</span><span class="hljs-comment">       *  fails, @c failbit is set in the stream&#x27;s error state.</span><span class="hljs-comment">       */</span>      void      close()      &#123;  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">_M_filebuf</span>.close())    this-&gt;setstate(ios_base::failbit);      &#125;    &#125;;</code></pre><p>&emsp;&emsp;好家伙,总算找到了,它调用basic_filebuf类中的open函数,但是basic_filebuf类中的open函数只有一个声明,没有函数体,emmmmm,不管咯,先上网查一下basic_filebuf类.</p><p><a href="https://www.apiref.com/cpp-zh/cpp/io/basic_filebuf.html">basic_filebuf类详情链接</a></p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E5%85%B3%E4%BA%8EC-%E4%B8%ADfstream%E4%BD%BF%E7%94%A8-ios-in%E6%88%96ios-out-%E5%9C%A8%E5%BD%93%E6%96%87%E4%BB%B6%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%97%B6%E4%B8%8D%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E8%80%8C%E6%98%AF%E6%89%93%E5%BC%80%E9%94%99%E8%AF%AF/basic_filebuf%E7%B1%BB1.png" alt="basic_filebuf类"><br><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E5%85%B3%E4%BA%8EC-%E4%B8%ADfstream%E4%BD%BF%E7%94%A8-ios-in%E6%88%96ios-out-%E5%9C%A8%E5%BD%93%E6%96%87%E4%BB%B6%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%97%B6%E4%B8%8D%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E8%80%8C%E6%98%AF%E6%89%93%E5%BC%80%E9%94%99%E8%AF%AF/basic_filebuf%E7%B1%BB2.png" alt="basic_filebuf类"></p><p>&emsp;&emsp;点击open函数,看看是怎么样的</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E5%85%B3%E4%BA%8EC-%E4%B8%ADfstream%E4%BD%BF%E7%94%A8-ios-in%E6%88%96ios-out-%E5%9C%A8%E5%BD%93%E6%96%87%E4%BB%B6%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%97%B6%E4%B8%8D%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E8%80%8C%E6%98%AF%E6%89%93%E5%BC%80%E9%94%99%E8%AF%AF/basic_filebuf%E7%B1%BB3open%E5%87%BD%E6%95%B0.png" alt="basic_filebuf类的open函数"></p><p>&emsp;&emsp;!!!找到原因</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E5%85%B3%E4%BA%8EC-%E4%B8%ADfstream%E4%BD%BF%E7%94%A8-ios-in%E6%88%96ios-out-%E5%9C%A8%E5%BD%93%E6%96%87%E4%BB%B6%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%97%B6%E4%B8%8D%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E8%80%8C%E6%98%AF%E6%89%93%E5%BC%80%E9%94%99%E8%AF%AF/basic_filebuf%E7%B1%BB3open%E5%87%BD%E6%95%B0%E5%B8%A6%E6%B3%A8%E8%A7%A3.png" alt="basic_filebuf类的open函数"></p><blockquote><p>问题结果答案</p></blockquote><p>&emsp;&emsp;当我们在fstream类中使用ios::in|ios::out或者ios::in|ios::out打开文件时,就是r+(C语言文件打开方式,扩展性读取,可读可写,但是文件不存在打开失败!)或者r+b(C语言文件打开方式,扩展性读取二进制文件,可读可写,但是文件不存在打开失败!)</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E5%85%B3%E4%BA%8EC-%E4%B8%ADfstream%E4%BD%BF%E7%94%A8-ios-in%E6%88%96ios-out-%E5%9C%A8%E5%BD%93%E6%96%87%E4%BB%B6%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%97%B6%E4%B8%8D%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E8%80%8C%E6%98%AF%E6%89%93%E5%BC%80%E9%94%99%E8%AF%AF/result.png" alt="问题答案结果"></p><blockquote><p>结语</p></blockquote><p>&emsp;&emsp;嗯,不错,总算解决了当初为什么一定要加ios::app才能创建文件的问题了.不过,我也感觉到自己好蠢啊,我丢,明明在basic_filebuf类中的open有个表的,自己也看了一下,结果就秒过去了,自己找basic_filebuf类的open函数的函数体找了半天,如果看到那个表,就能早早结束了……….</p><pre><code class="hljs gherkin"><span class="hljs-symbol">*</span>  Table 92, adapted here, gives the relation between openmode<span class="hljs-symbol">*</span>  combinations and the equivalent <span class="hljs-meta">@c</span> fopen() flags.<span class="hljs-symbol">*</span>  (NB: lines app, in|<span class="hljs-string">out</span>|<span class="hljs-string">app, in</span>|<span class="hljs-string">app, binary</span>|<span class="hljs-string">app, binary</span>|<span class="hljs-string">in</span>|<span class="hljs-string">out</span>|<span class="hljs-string">app,</span><span class="hljs-string">*  and binary</span>|<span class="hljs-string">in</span>|<span class="hljs-string">app per DR 596)</span><span class="hljs-string">*  &lt;pre&gt;</span><span class="hljs-string">*  +---------------------------------------------------------+</span><span class="hljs-string">*  </span>|<span class="hljs-string"> ios_base Flag combination            stdio equivalent   </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">binary  in  out  trunc  app                              </span>|<span class="hljs-symbol">*</span>  +---------------------------------------------------------+<span class="hljs-symbol">*</span>  |<span class="hljs-string">             +                        w                  </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">             +           +            a                  </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">                         +            a                  </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">             +     +                  w                  </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">         +                            r                  </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">         +   +                        r+                 </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">         +   +     +                  w+                 </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">         +   +           +            a+                 </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">         +               +            a+                 </span>|<span class="hljs-symbol">*</span>  +---------------------------------------------------------+<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +         +                        wb                 </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +         +           +            ab                 </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +                     +            ab                 </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +         +     +                  wb                 </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +     +                            rb                 </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +     +   +                        r+b                </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +     +   +     +                  w+b                </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +     +   +           +            a+b                </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +     +               +            a+b                </span>|<span class="hljs-symbol">*</span>  +---------------------------------------------------------+</code></pre><p>&emsp;&emsp; 现在时间是晚上2点14分,该睡觉了,晚安.</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>C++</tag>
      
      <tag>文件操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建一份属于你的博客吧</title>
    <link href="/2020/11/21/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/"/>
    <url>/2020/11/21/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这是一篇使用GitHub Pages + Hexo搭建自己博客的笔记。内容会尽可能的详细,因为怕自己哪天就忘记了。</p><p>&emsp;&emsp;在搭建之前,我们需要了解一下GitHub Pages 和Hexo。</p><h4 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a><a href="https://pages.github.com/">GitHub Pages</a></h4><p>&emsp;&emsp;相信会编程的人都知道一个网站 <a href="https://github.com/">github</a> ，这是一个面向开源及私有软件项目的托管平台。这是一个拥有百万程序员的网站，许多人都将自己的代码开源，并将代码托管给github。而GitHub Pages，则是github提供给用户用来展示个人或者项目主页的静态网页系统。也就是说，自己可以搭建一个静态的网页，将其交给GitHub Pages去呈现。就相当于一个微型服务器啦,重点是，这玩意是免费的.<br><a href="https://pages.github.com/"><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/GitHubPages.png" alt="GitHub Pages" title="GitHub Pages"></a></p><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a><a href="https://hexo.io/zh-cn/index.html">Hexo</a></h4><p>&emsp;&emsp;Hexo是一个快速，简洁且高效的博客框架。其能够根据配置，主题，原始数据能够自动生成静态网页，而且Hexo还支持Github Flavored Markdown的所有功能,，外加一些强大的框架(网站数据统计,评论系统等等)。所以,我们就用Hexo生成静态网页，再将其发布到GitHub Pages上，最后由GitHub Pages展现出来。<br><a href="https://hexo.io/zh-cn/index.html"><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/Hexo.png" alt="Hexo中文网站" title="Hexo中文网站"></a></p><h4 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown"></a><a href="https://markdown.com.cn/">MarkDown</a></h4><p>&emsp;&emsp;MarkDown，这里需要提及一下，因为Hexo的原始博客数据是由MardDown编写的，所以写博客的话需要了解一下MarkDown的语法。那么MarkDown是什么呢？这里引用<a href="https://markdown.com.cn/">MarkDown语法教程</a>的一句话：Markdown是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub 和技术问答网站 StackOverFlow 的御用书写格式。MarkDown可以让你专注你的文字内容而不是排版样式，使其编写出美观，直观可读的文本。<br><a href="https://markdown.com.cn/"><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/MarkDown.png" alt="Markdown语法教程网站" title="MarkDown语法教程网站"></a>‘</p><p>好了，当了解了这些之后，我们便可以开始搭建一下自己的小博客网站了。</p><blockquote><h4 id="1-创建一个GitHub账户"><a href="#1-创建一个GitHub账户" class="headerlink" title="1. 创建一个GitHub账户"></a>1. 创建一个GitHub账户</h4></blockquote><p>&emsp;&emsp;因为GitHub Pages是GitHub提供的，所以我们理所当然的需要一个GitHub账户。创建GitHub是一个很简单的过程，这里也不会多说，就是一个普通的使用邮箱创建账户罢了。<strong>但是需要注意的是，用户名不能随便起哦，一定要想好，想清楚再起哦。一方面是因为GitHUb Pages提供的域名(网站名)是用户名.github.io，另一方面是在GitHub中改用户名很麻烦的。</strong></p><p><a href="https://github.com/join?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=/&source=header-home">点击我创建GitHub账户</a><br><a href="https://github.com/join?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=/&source=header-home"><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/CreateGitHubAccount.png" alt="创建GitHub账户" title="创建GitHub账户"></a></p><blockquote><h4 id="2-登录GitHub网站"><a href="#2-登录GitHub网站" class="headerlink" title="2. 登录GitHub网站"></a>2. 登录GitHub网站</h4></blockquote><p><a href="https://github.com/">点击我登录GitHub网站</a><br><a href="https://github.com/"><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/LoginGitHub.png" alt="登录GitHub账户" title="登录GitHub账户"></a></p><blockquote><h4 id="4-创建一个仓库"><a href="#4-创建一个仓库" class="headerlink" title="4.创建一个仓库"></a>4.创建一个仓库</h4></blockquote><p>&emsp;&emsp;创建一个GitHub仓库，用于搭建GitHub Pages，当然，这个仓库名不能随便乱起，必须是用户名.github.io。<br><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%931.png" alt="创建仓库1" title="创建仓库1"><br><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%932.png" alt="创建仓库2" title="创建仓库2"><br><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%933.png" alt="创建仓库3" title="创建仓库3"></p><p>创建好之后的大概的样子.（因为我已经发布了文件,所以可能不一样。）<br><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%934.png" alt="创建仓库4" title="创建仓库4"></p><blockquote><h4 id="5-下载Node-js"><a href="#5-下载Node-js" class="headerlink" title="5.下载Node.js"></a>5.下载Node.js</h4></blockquote><p>&emsp;&emsp;因为Hexo是需要Node.js环境的，所以我们需要下载安装Node.js。</p><p>&emsp;&emsp;根据<a href="http://nodejs.cn/download/">Node.js下载官网</a>自己选择相对应的Node.js包即可。<br><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/NodeJS1.png" alt="下载Node.js" title="下载Node.js"></p><blockquote><h4 id="6-判断是否环境配置完成"><a href="#6-判断是否环境配置完成" class="headerlink" title="6.判断是否环境配置完成"></a>6.判断是否环境配置完成</h4></blockquote><p>&emsp;&emsp;打开Cmd(命令控制台),然后输入<strong>node -v</strong>,当出现版本号时,则Node.js安装完成.然后输入<strong>npm -v</strong>,检测npm包管理器是否正常.</p><p>如下图所示<br><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E6%A3%80%E6%B5%8BNodeJS%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" alt="检测NodeJS是否安装完成" title="检测NodeJS是否安装完成"></p><p>当然,也可以点击以下链接了解以下</p><p><a href="https://jingyan.baidu.com/article/20095761e58096cb0721b4fc.html">百度知道-如何检查Node.js是否安装正常</a></p><p><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">菜鸟教程-Node.js 安装配置</a></p><p><a href="https://www.cnblogs.com/xt-Corrine/p/10812503.html">博客园-Node.js安装及环境配置</a></p><blockquote><h4 id="7-安装Hexo"><a href="#7-安装Hexo" class="headerlink" title="7.安装Hexo"></a>7.安装Hexo</h4></blockquote><p>&emsp;&emsp;推荐查看<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>进行学习.安装Hexo很简单,只需要打开Cmd,然后输入<strong>npm install -g hexo-cli</strong>,回车即可.然后不出意外的话,一会儿就会安装完成(因为我已经安装过一次了,所以也没办法截图.).然后我们检测一下Hexo是否安装成功.</p><p>&emsp;&emsp;我们在Cmd中,输入<strong>hexo -v</strong>,回车后会出现Hexo版本的一些信息.(如果没有的话,就输入<strong>npx hexo -v</strong>.因为Hexo的环境变量没有配置好,所以就无法直接使用hexo指令,不过我们完全可以使用npx来调用执行hexo.)</p><p>如图<br><a href="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E6%A3%80%E6%B5%8BHexo%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" title="检测Hexo是否安装完成">!检测Hexo是否安装完成</a></p><p>可以看看这些博客</p><p><a href="https://www.jianshu.com/p/09875c4a629c">简书-hexo安装与配置</a></p><blockquote><h4 id="8-安装Git"><a href="#8-安装Git" class="headerlink" title="8.安装Git"></a>8.安装Git</h4></blockquote><p>&emsp;&emsp;因为Hexo生成的静态网页文件需要上传到Github上面,所以Git当然是必不可少的啦.我们需要安装Git.(同上,Git已经安装过了,所以没办法截图.不过需要注意的是,Git下载有个PortableGit,这是一个免安装版本,下载后运行,选择安装目录,然后配置环境就可以使用了.方便了许多.)</p><p><a href="https://git-scm.com/downloads">Git下载官网</a></p><p><a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝的Git镜像网站</a></p><p>(<strong>推荐使用淘宝的Git镜像网站,下载会快一点,往下面拉,选择最新版本哦~</strong>)</p><p>可以看看这些博客</p><p><a href="https://www.jianshu.com/p/bebba0d8038e">简书-Git安装教程（详细）</a></p><p><a href="https://www.cnblogs.com/ximiaomiao/p/7140456.html">博客园-Git安装和使用</a></p><p><a href="https://www.runoob.com/git/git-tutorial.html">菜鸟教程-Git</a></p><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496">廖雪峰的官方网站-Git教程中的安装Git</a></p><blockquote><h4 id="9-初始化Hexo博客目录"><a href="#9-初始化Hexo博客目录" class="headerlink" title="9.初始化Hexo博客目录"></a>9.初始化Hexo博客目录</h4></blockquote><p>&emsp;&emsp;打开一个文件目录.选中你心仪的文件夹.例如我选择了D盘,初始化一个名为blog的博客目录.就是在Cmd命令中,输入<strong>hexo init blog</strong>或者<strong>npx hexo init blog</strong>,进行初始化博客目录.这时,hexo就开始下载.下载完成后,就自动帮你创建一个名为blog的文件夹.</p><p><a href="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E5%88%9D%E5%A7%8B%E5%8C%96Hexo%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95%E4%B8%AD.png" title="初始化Hexo博客目录中">!初始化Hexo博客目录中</a><br><a href="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E5%88%9D%E5%A7%8B%E5%8C%96Hexo%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95%E5%AE%8C%E6%88%90.png" title="初始化Hexo博客目录完成">!初始化Hexo博客目录完成</a></p><blockquote><h4 id="10-修改Hexo的配置文件"><a href="#10-修改Hexo的配置文件" class="headerlink" title="10.修改Hexo的配置文件"></a>10.修改Hexo的配置文件</h4></blockquote><p>&emsp;&emsp;推荐查看<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>进行学习配置Hexo的配置文件.在博客目录中,有着一个_config.yml文件,这个文件就是Hexo的配置文件.</p><p>&emsp;&emsp;我的Hexo配置文件</p><pre><code class="hljs yaml"><span class="hljs-comment"># Hexo Configuration</span><span class="hljs-comment">## Docs: https://hexo.io/docs/configuration.html</span><span class="hljs-comment">## Source: https://github.com/hexojs/hexo/</span><span class="hljs-comment"># Site</span><span class="hljs-attr">title:</span> <span class="hljs-string">筏执的小课本</span> <span class="hljs-comment">#网站标题</span><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;青春激昂,裙角撩人&#x27;</span> <span class="hljs-comment">#网站副标题</span><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#网站描述</span><span class="hljs-attr">keywords:</span> <span class="hljs-comment">#网站的关键词。支援多个关键词。</span><span class="hljs-attr">author:</span> <span class="hljs-string">筏执</span> <span class="hljs-comment">#您的名字</span><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span> <span class="hljs-comment">#网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</span><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;UTC&#x27;</span> <span class="hljs-comment">#网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。</span><span class="hljs-comment"># URL</span><span class="hljs-comment">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span><span class="hljs-attr">url:</span> <span class="hljs-string">http://example.com</span> <span class="hljs-comment">#网址, must starts with http:// or https://</span><span class="hljs-attr">root:</span> <span class="hljs-string">/</span> <span class="hljs-comment">#网站根目录</span><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span> <span class="hljs-comment">#文章的 永久链接 格式</span><span class="hljs-attr">permalink_defaults:</span> <span class="hljs-comment">#永久链接中各部分的默认值</span><span class="hljs-attr">pretty_urls:</span> <span class="hljs-comment">#改写 permalink 的值来美化 URL</span>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks(是否在永久链接中保留尾部的 index.html，设置为 false 时去除)</span>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks(是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效))</span><span class="hljs-comment"># Directory</span><span class="hljs-attr">source_dir:</span> <span class="hljs-string">source</span> <span class="hljs-comment">#资源文件夹，这个文件夹用来存放内容</span><span class="hljs-attr">public_dir:</span> <span class="hljs-string">public</span> <span class="hljs-comment">#公共文件夹，这个文件夹用于存放生成的站点文件。</span><span class="hljs-attr">tag_dir:</span> <span class="hljs-string">tags</span> <span class="hljs-comment">#标签文件夹</span><span class="hljs-attr">archive_dir:</span> <span class="hljs-string">archives</span> <span class="hljs-comment">#归档文件夹</span><span class="hljs-attr">category_dir:</span> <span class="hljs-string">categories</span> <span class="hljs-comment">#分类文件夹</span><span class="hljs-attr">code_dir:</span> <span class="hljs-string">downloads/code</span> <span class="hljs-comment">#Include code 文件夹，source_dir 下的子目录</span><span class="hljs-attr">i18n_dir:</span> <span class="hljs-string">:lang</span> <span class="hljs-comment">#国际化（i18n）文件夹</span><span class="hljs-comment">#skip_render：跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可使用 glob 表达式来匹配路径。</span><span class="hljs-comment">#skip_render: &quot;mypage/**/*&quot;</span><span class="hljs-comment"># 将会直接将 `source/mypage/index.html` 和 `source/mypage/code.js` 不做改动地输出到 &#x27;public&#x27; 目录</span><span class="hljs-comment"># 你也可以用这种方法来跳过对指定文章文件的渲染</span><span class="hljs-comment">#skip_render: &quot;_posts/test-post.md&quot;</span><span class="hljs-comment"># 这将会忽略对 &#x27;test-post.md&#x27; 的渲染</span><span class="hljs-comment">#如果您刚刚开始接触 Hexo，通常没有必要修改这一部分的值。</span><span class="hljs-attr">skip_render:</span>                     <span class="hljs-comment"># Writing</span><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:title.md</span> <span class="hljs-comment"># File name of new posts(新文章的文件名称)</span><span class="hljs-attr">default_layout:</span> <span class="hljs-string">post</span> <span class="hljs-comment">#(预设布局)</span><span class="hljs-attr">auto_spacing:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#在中文和英文之间加入空格</span><span class="hljs-attr">titlecase:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Transform title into titlecase #(把标题转换为 title case)</span><span class="hljs-attr">external_link:</span> <span class="hljs-comment">#在新标签中打开链接</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Open external links in new tab(对整个网站（site）生效或仅对文章（post）生效)</span>  <span class="hljs-attr">field:</span> <span class="hljs-string">site</span> <span class="hljs-comment"># Apply to the whole site(对整个网站（site）生效或仅对文章（post）生效)</span>  <span class="hljs-attr">exclude:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#需要排除的域名。主域名和子域名如 www 需分别配置</span><span class="hljs-attr">filename_case:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#把文件名称转换为 (1) 小写或 (2) 大写 (0)不需要</span><span class="hljs-attr">render_drafts:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#显示草稿</span><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#启动 Asset 文件夹</span><span class="hljs-attr">relative_link:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#把链接改为与根目录的相对位址</span><span class="hljs-attr">future:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#显示未来的文章</span><span class="hljs-attr">highlight:</span> <span class="hljs-comment">#代码块的设置</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">false</span><span class="hljs-attr">prismjs:</span> <span class="hljs-comment">#代码块的设置, see PrismJS section for usage guide</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#默认情况下，Hexo 生成的超链接都是绝对地址。</span><span class="hljs-comment">#例如，如果您的网站域名为 example.com,您有一篇文章名为 hello，那么绝对链接可能像这样：http://example.com/hello.html，它是绝对于域名的。</span><span class="hljs-comment">#相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</span><span class="hljs-comment"># Home page setting</span><span class="hljs-comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)(您的博客索引页的根路径。)</span><span class="hljs-comment"># per_page: Posts displayed per page. (0 = disable pagination)(每页显示的文章。(0 =禁用分页))</span><span class="hljs-comment"># order_by: Posts order. (Order by date descending by default)(文章的顺序。(默认按日期降序排列))</span><span class="hljs-attr">index_generator:</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><span class="hljs-comment"># Category &amp; Tag</span><span class="hljs-attr">default_category:</span> <span class="hljs-string">uncategorized</span> <span class="hljs-comment">#默认分类</span><span class="hljs-attr">category_map:</span> <span class="hljs-comment">#分类别名</span><span class="hljs-attr">tag_map:</span> <span class="hljs-comment">#标签别名</span><span class="hljs-comment"># Metadata elements</span><span class="hljs-comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span><span class="hljs-attr">meta_generator:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># Date / Time format</span><span class="hljs-comment">## Hexo uses Moment.js to parse and display date</span><span class="hljs-comment">## You can customize the date format as defined in</span><span class="hljs-comment">## http://momentjs.com/docs/#/displaying/format/</span><span class="hljs-attr">date_format:</span> <span class="hljs-string">YYYY-MM-DD</span> <span class="hljs-comment">#日期格式</span><span class="hljs-attr">time_format:</span> <span class="hljs-string">HH:mm:ss</span> <span class="hljs-comment">#时间格式</span><span class="hljs-comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span><span class="hljs-attr">updated_option:</span> <span class="hljs-string">&#x27;mtime&#x27;</span> <span class="hljs-comment">#(当Front Matter 中没有指定updated时updated的取值)</span><span class="hljs-comment"># Pagination</span><span class="hljs-comment">## Set per_page to 0 to disable pagination</span><span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span> <span class="hljs-comment">#每页显示的文章量(0为关闭分页功能)</span><span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">page</span> <span class="hljs-comment">#分页目录</span><span class="hljs-comment"># Include / Exclude file(s)</span><span class="hljs-comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span><span class="hljs-comment">#include配置：</span><span class="hljs-comment">## Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 . 开头的文件和文件夹，Hexo 的 _posts 和 _data 等目录除外）。</span><span class="hljs-comment">## 通过设置此字段将使 Hexo 处理他们并将它们复制到 source 目录下。</span><span class="hljs-comment"># 举例</span><span class="hljs-comment"># Include/Exclude Files/Folders</span><span class="hljs-comment"># include:</span><span class="hljs-comment">#  - &quot;.nojekyll&quot;</span><span class="hljs-comment"># # 包括 &#x27;source/css/_typing.css&#x27;</span><span class="hljs-comment">#  - &quot;css/_typing.css&quot;</span><span class="hljs-comment">#  # 包括 &#x27;source/_css/&#x27; 中的任何文件，但不包括子目录及其其中的文件。</span><span class="hljs-comment">#  - &quot;_css/*&quot;</span><span class="hljs-comment">#  # 包含 &#x27;source/_css/&#x27; 中的任何文件和子目录下的任何文件</span><span class="hljs-comment">#  - &quot;_css/**/*&quot;</span><span class="hljs-comment">#</span><span class="hljs-comment">#exclude:</span><span class="hljs-comment">#  # 不包括 &#x27;source/js/test.js&#x27;</span><span class="hljs-comment">#  - &quot;js/test.js&quot;</span><span class="hljs-comment">#  # 不包括 &#x27;source/js/&#x27; 中的文件、但包括子目录下的所有目录和文件</span><span class="hljs-comment">#  - &quot;js/*&quot;</span><span class="hljs-comment">#  # 不包括 &#x27;source/js/&#x27; 中的文件和子目录下的任何文件</span><span class="hljs-comment">#  - &quot;js/**/*&quot;</span><span class="hljs-comment">#  # 不包括 &#x27;source/js/&#x27; 目录下的所有文件名以 &#x27;test&#x27; 开头的文件，但包括其它文件和子目录下的单文件</span><span class="hljs-comment">#  - &quot;js/test*&quot;</span><span class="hljs-comment">#  # 不包括 &#x27;source/js/&#x27; 及其子目录中任何以 &#x27;test&#x27; 开头的文件</span><span class="hljs-comment">#  - &quot;js/**/test*&quot;</span><span class="hljs-comment">#  # 不要用 exclude 来忽略 &#x27;source/_posts/&#x27; 中的文件。你应该使用 &#x27;skip_render&#x27;，或者在要忽略的文件的文件名之前加一个下划线 &#x27;_&#x27;</span><span class="hljs-comment">#  # 在这里配置一个 - &quot;_posts/hello-world.md&quot; 是没有用的。</span><span class="hljs-comment">#</span><span class="hljs-comment">#ignore:</span><span class="hljs-comment">#  # Ignore any folder named &#x27;foo&#x27;.</span><span class="hljs-comment">#  - &quot;**/foo&quot;</span><span class="hljs-comment">#  # Ignore &#x27;foo&#x27; folder in &#x27;themes/&#x27; only.</span><span class="hljs-comment">#  - &quot;**/themes/*/foo&quot;</span><span class="hljs-comment">#  # Same as above, but applies to every subfolders of &#x27;themes/&#x27;.</span><span class="hljs-comment">#  - &quot;**/themes/**/foo&quot;</span><span class="hljs-attr">include:</span><span class="hljs-attr">exclude:</span> <span class="hljs-comment">#Hexo 会忽略这些文件和目录</span><span class="hljs-attr">ignore:</span> <span class="hljs-comment">#Ignore files/folders</span><span class="hljs-comment"># Extensions</span><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><span class="hljs-attr">theme:</span> <span class="hljs-string">landscape</span> <span class="hljs-comment">#当前主题名称。值为false时禁用主题</span><span class="hljs-comment">#theme_config：#主题的配置文件。在这里放置的配置会覆盖主题目录下的 _config.yml 中的配置</span><span class="hljs-comment"># Deployment</span><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="hljs-comment">##(部署部分的设置)</span><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repo:</span> <span class="hljs-comment">#git的链接</span>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span></code></pre><blockquote><h4 id="11-Hexo的一些命令了解和使用"><a href="#11-Hexo的一些命令了解和使用" class="headerlink" title="11.Hexo的一些命令了解和使用"></a>11.Hexo的一些命令了解和使用</h4></blockquote><p>&emsp;&emsp;在进入Hexo博客目录之前,我们在Cmd中输入<strong>hexo help</strong>,就弹出了如下的信息.<br><a href="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/Hexo%E6%9C%AA%E8%BF%9B%E5%85%A5%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8C%87%E4%BB%A4.png" title="Hexo未进入博客目录中的一些指令">!Hexo未进入博客目录中的一些指令</a></p><p>1.hexo help : 弹出帮助指令</p><p>2.hexo init 博客目录名: 初始化博客目录</p><p>3.hexo version : hexo版本信息</p><p>&emsp;&emsp;在进入Hexo博客目录之后,我们在Cmd中输入<strong>hexo help</strong>,就弹出了如下的信息.</p><p><a href="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/Hexo%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8C%87%E4%BB%A4.png" title="Hexo博客目录中的一些指令">!Hexo博客目录中的一些指令.png</a></p><ol><li><p>hexo clean : 清除生成的博客网站信息包括文件</p></li><li><p>hexo config : 查看配置文件</p></li><li><p>hexo deploy : 部署你的网站</p></li><li><p>hexo generate : 生成静态博客网站文件</p></li><li><p>hexo help : 帮助</p></li><li><p>hexo init : 初始化博客目录</p></li><li><p>hexo list : 列出站点信息</p></li><li><p>hexo migrate : 将您的站点从其他系统迁移到Hexo</p></li><li><p>hexo new 文章名 : 创建一个post类型的文章</p></li><li><p>hexo server : 开启服务器预览</p></li></ol><p>&emsp;&emsp;主要的还是<strong>hexo clean</strong>,<strong>hexo deploy</strong>,<strong>hexo generate</strong>,<strong>hexo server</strong>,<strong>hexo new 文章名</strong>.这些.</p><ol><li><p>当生成静态博客时,推荐使用<strong>hexo clean &amp; hexo generate</strong> 或 <strong>hexo clean &amp; hexo g</strong>;</p></li><li><p>当生成静态博客并且预览时,推荐使用<strong>hexo clean &amp; hexo generate &amp; hexo server</strong> 或 <strong>hexo clean &amp; hexo g &amp; hexo s</strong>;</p></li><li><p>当生成静态博客并且部署时,推荐使用<strong>hexo clean &amp; hexo generate &amp; hexo deploy</strong> 或 <strong>hexo clean &amp; hexo g &amp; hexo d</strong>;</p></li></ol><blockquote><h4 id="12-使用Hexo生成文章"><a href="#12-使用Hexo生成文章" class="headerlink" title="12.使用Hexo生成文章"></a>12.使用Hexo生成文章</h4></blockquote><p>&emsp;&emsp;在博客目录下,使用Cmd,输入<strong>hexo new 文章名</strong>或者<strong>npx hexo new 文章名</strong>,即可创建一个文章,然后在<strong>source</strong>的目录下,找到<strong>_post</strong>目录下带有文章名.md文件,打开编辑即可.<br><a href="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/hexo%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E6%96%87%E7%AB%A0.png" title="hexo创建新的文章">!hexo创建新的文章</a><br><a href="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/hexo%E7%94%9F%E6%88%90%E7%9A%84%E6%96%87%E7%AB%A0%E6%89%80%E5%9C%A8%E5%9C%B0.png" title="hexo生成的文章所在地">!hexo生成的文章所在地</a></p><p>&emsp;&emsp;然后编辑md文件即可，如果需要删除文章，只需要删除文件即可。</p><blockquote><h4 id="13-部署Hexo博客到GitHub-Pages上面"><a href="#13-部署Hexo博客到GitHub-Pages上面" class="headerlink" title="13.部署Hexo博客到GitHub Pages上面"></a>13.部署Hexo博客到GitHub Pages上面</h4></blockquote><p>&emsp;&esmp;在部署之前，我们需要先在博客目录下，打开cmd，输入<strong>npm install hexo-deployer-git –save</strong>安装插件。然后在博客目录找到<strong>_config.yml</strong>文件,打开,找到以下信息:</p><pre><code class="hljs clean"># Deployment## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span>deploy:</code></pre><p>修改成这样</p><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span></span><span class="hljs-symbol">deploy:</span><span class="hljs-symbol">  type:</span> git<span class="hljs-symbol">  repo:</span> GitHub仓库的git地址<span class="hljs-symbol">  branch:</span> master</code></pre><p>GitHub仓库的git地址查看方式</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E8%8E%B7%E5%8F%96Git%E5%9C%B0%E5%9D%801.png" alt="获取Git地址1" title="获取Git地址1"><br><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E8%8E%B7%E5%8F%96Git%E5%9C%B0%E5%9D%802.png" alt="获取Git地址2" title="获取Git地址2"></p><p>修改完成配置完成后,保存,然后执行 <strong>hexo clean &amp; hexo g &amp; hexo d</strong>即可生成静态网站.</p><blockquote><h4 id="14-主题"><a href="#14-主题" class="headerlink" title="14.主题"></a>14.主题</h4></blockquote><p>&emsp;&emsp;我使用的是fluid主题.这是<a href="https://github.com/fluid-dev/hexo-theme-fluid">地址</a>,这里就不再累赘了.</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一份博客</title>
    <link href="/2020/11/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/11/18/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%BB%BD%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="我的第一份博客"><a href="#我的第一份博客" class="headerlink" title="我的第一份博客"></a>我的第一份博客</h3><p>在今天，我使用了Hexo+Github Pages搭建了这一份自己的静态博客,原本之前是在<a href="https://www.jianshu.com/u/b8e4d58db7d4">简书-筏执</a>上面写博客的，但是后来总想着自己搭建一个博客系统,自己慢慢写,虽然,这样看的人更少了，但是,博客有时候不是写给别人看的，更多的是写给自己，给自己这个粗心大意的人提个醒。</p><p>现如今我以及大三了，再过一年便要出入社会了，回忆起自己在大学的时光里，自己的时间匆匆流过,以前想的大学里面做的事情，现如今一件事情也没有完成，反而觉得越来越远了。</p><p>自己的事情,终究要自己去解决，虽然有时候放弃是最好的选择，但是,当在劫难逃，索性不逃！</p>]]></content>
    
    
    <categories>
      
      <category>随心说</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WindowsTerminal配置</title>
    <link href="/2020/02/05/WindowsTerminal%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/02/05/WindowsTerminal%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>(转至自己的简书,所以时间比较早)</p><h5 id="如果转载。请注明来源。-翻译不易呀"><a href="#如果转载。请注明来源。-翻译不易呀" class="headerlink" title="如果转载。请注明来源。(翻译不易呀)"></a>如果转载。请注明来源。(翻译不易呀)</h5><p>前言<br>Windows Terminal是微软新出的一个终端管理器。使用终端进行操作。会比鼠标操作更加便捷。(=-=忘不了带鼠标的那种痛苦。)。而Windows Terminal是一个帮助你管理在Windows中各种终端的。其美化了许多。(主要是美观很多呀,我终于不要总是面对cmd的黑色框框和powershell的蓝色框框了！！)。虽然说现如今的Windows Terminal还只是一个预览版。但是目前为止我暂时没有发现什么错误。</p><h4 id="下载Windows-Terminal"><a href="#下载Windows-Terminal" class="headerlink" title="下载Windows Terminal"></a>下载Windows Terminal</h4><p>下载Windows Terminal也很简单。<br>直接在自带的商店中搜索 Windows Terminal即可找到安装。<br>需要注意的是。目前Windows Terminal只支持1909版本。1803版本不支持。<br>(也可以直接下载源码编辑 ：Github地址:<a href="https://github.com/microsoft/terminal">https://github.com/microsoft/terminal</a>)</p><h4 id="Windows-Terminal配置"><a href="#Windows-Terminal配置" class="headerlink" title="Windows Terminal配置"></a>Windows Terminal配置</h4><p>话不多说。直接配图。(我透明度是0.75。没错，我就是看图的。)<br><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]WindowsTerminal%E9%85%8D%E7%BD%AE/1.png" alt="Windows Terminal"></p><h4 id="目前我的配置"><a href="#目前我的配置" class="headerlink" title="目前我的配置"></a>目前我的配置</h4><pre><code class="hljs json"><span class="hljs-comment">// To view the default settings, hold &quot;alt&quot; while clicking on the &quot;Settings&quot; button.</span><span class="hljs-comment">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span>&#123;    <span class="hljs-attr">&quot;$schema&quot;</span>: <span class="hljs-string">&quot;https://aka.ms/terminal-profiles-schema&quot;</span>,    <span class="hljs-attr">&quot;defaultProfile&quot;</span>: <span class="hljs-string">&quot;&#123;c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40&#125;&quot;</span>,<span class="hljs-comment">//设置默认的shell。通过独立ID(guid)设置</span>    <span class="hljs-attr">&quot;profiles&quot;</span>:    [        &#123;            <span class="hljs-comment">// Make changes here to the powershell.exe profile</span>            <span class="hljs-attr">&quot;guid&quot;</span>: <span class="hljs-string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,<span class="hljs-comment">//独立ID。可以自己设定</span>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Windows PowerShell&quot;</span>,<span class="hljs-comment">//姓名，便于区分</span>            <span class="hljs-attr">&quot;commandline&quot;</span>: <span class="hljs-string">&quot;powershell.exe&quot;</span>,<span class="hljs-comment">//启动时执行的语句。可以用作连接远程终端</span>            <span class="hljs-attr">&quot;startingDirectory&quot;</span>: <span class="hljs-string">&quot;./&quot;</span>,<span class="hljs-comment">//在当前路径下启动</span>            <span class="hljs-attr">&quot;useAcrylic&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//背景毛玻璃效果</span>            <span class="hljs-attr">&quot;backgroundImage&quot;</span> : <span class="hljs-string">&quot;E:\\CMD.jpg&quot;</span>, <span class="hljs-comment">//背景图片路径</span>            <span class="hljs-attr">&quot;backgroundImageOpacity&quot;</span> : <span class="hljs-number">0.75</span>, <span class="hljs-comment">//背景图片的透明度（只是图片透明，背景不透明并不会透明到看到窗口下层的东西）</span>            <span class="hljs-attr">&quot;backgroundImageStretchMode&quot;</span> : <span class="hljs-string">&quot;fill&quot;</span>,<span class="hljs-comment">//背景图像填充方式</span>            <span class="hljs-attr">&quot;hidden&quot;</span>: <span class="hljs-literal">false</span><span class="hljs-comment">//是否隐藏</span>        &#125;,        &#123;            <span class="hljs-comment">// Make changes here to the cmd.exe profile</span>            <span class="hljs-attr">&quot;guid&quot;</span>: <span class="hljs-string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span>,            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;cmd&quot;</span>,            <span class="hljs-attr">&quot;commandline&quot;</span>: <span class="hljs-string">&quot;cmd.exe&quot;</span>,            <span class="hljs-attr">&quot;startingDirectory&quot;</span>: <span class="hljs-string">&quot;./&quot;</span>,            <span class="hljs-attr">&quot;useAcrylic&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//背景毛玻璃效果</span>            <span class="hljs-attr">&quot;backgroundImage&quot;</span> : <span class="hljs-string">&quot;E:\\CMD.jpg&quot;</span>, <span class="hljs-comment">//背景图片路径</span>            <span class="hljs-attr">&quot;backgroundImageOpacity&quot;</span> : <span class="hljs-number">0.75</span>, <span class="hljs-comment">//背景图片的透明度（只是图片透明，背景不透明并不会透明到看到窗口下层的东西）</span>            <span class="hljs-attr">&quot;backgroundImageStretchMode&quot;</span> : <span class="hljs-string">&quot;fill&quot;</span>,<span class="hljs-comment">//背景图像填充方式</span>            <span class="hljs-attr">&quot;hidden&quot;</span>: <span class="hljs-literal">false</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;guid&quot;</span>: <span class="hljs-string">&quot;&#123;c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40&#125;&quot;</span>,            <span class="hljs-attr">&quot;hidden&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Ubuntu-18.04&quot;</span>,            <span class="hljs-attr">&quot;startingDirectory&quot;</span>: <span class="hljs-string">&quot;./&quot;</span>,            <span class="hljs-attr">&quot;useAcrylic&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//背景毛玻璃效果</span>            <span class="hljs-attr">&quot;backgroundImage&quot;</span> : <span class="hljs-string">&quot;E:\\CMD.jpg&quot;</span>, <span class="hljs-comment">//背景图片路径</span>            <span class="hljs-attr">&quot;backgroundImageOpacity&quot;</span> : <span class="hljs-number">0.75</span>, <span class="hljs-comment">//背景图片的透明度（只是图片透明，背景不透明并不会透明到看到窗口下层的东西）</span>            <span class="hljs-attr">&quot;backgroundImageStretchMode&quot;</span> : <span class="hljs-string">&quot;fill&quot;</span>,<span class="hljs-comment">//背景图像填充方式</span>            <span class="hljs-attr">&quot;source&quot;</span>: <span class="hljs-string">&quot;Windows.Terminal.Wsl&quot;</span><span class="hljs-comment">//启动源</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;guid&quot;</span>: <span class="hljs-string">&quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;</span>,            <span class="hljs-attr">&quot;hidden&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Azure Cloud Shell&quot;</span>,            <span class="hljs-attr">&quot;source&quot;</span>: <span class="hljs-string">&quot;Windows.Terminal.Azure&quot;</span>        &#125;    ],    <span class="hljs-comment">// Add custom color schemes to this array</span>    <span class="hljs-attr">&quot;schemes&quot;</span>: [],<span class="hljs-comment">//配色方案</span>    <span class="hljs-comment">// Add any keybinding overrides to this array.</span>    <span class="hljs-comment">// To unbind a default keybinding, set the command to &quot;unbound&quot;</span>    <span class="hljs-attr">&quot;keybindings&quot;</span>: []<span class="hljs-comment">//快捷键设置</span>&#125;</code></pre><blockquote><p>##官方配置翻译<br>####(<a href="https://github.com/microsoft/terminal/blob/master/doc/cascadia/SettingsSchema.md">官方配置英文</a>)</p></blockquote><h1 id="Profiles-json-文档"><a href="#Profiles-json-文档" class="headerlink" title="Profiles.json 文档"></a>Profiles.json 文档</h1><h2 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h2><p>下面列出的属性会影响整个窗口，而不考虑配置文件设置。</p><table><thead><tr><th>属性名称</th><th>必要性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>alwaysShowTabs</code></td><td>必要的</td><td>Boolean</td><td><code>true</code></td><td>设置为 <code>true</code>时, t选项卡始终显示。 设置为<code>false</code> 或 <code>showTabsInTitlebar</code> 时, 选项卡仅在输入Ctrl+ T后才显示。</td></tr><tr><td><code>copyOnSelect</code></td><td>可选择的</td><td>Boolean</td><td><code>false</code></td><td>当设置为<code>true</code>时, 在创建时，选中的内容会立即复制到剪贴板。当设置为 <code>false</code>时,所选内容将保留并等待进一步操作。</td></tr><tr><td><code>defaultProfile</code></td><td>必要的</td><td>String</td><td>PowerShell guid</td><td>设置默认配置文件(设置打开后默认的终端。通过guid设置。)。通过输入Ctrl + T或者单击 ‘+’ 图标打开. 所需默认配置文件的 guid 用作值。</td></tr><tr><td><code>initialCols</code></td><td>必要的</td><td>Integer</td><td><code>120</code></td><td>首次加载时窗口中显示的列数。</td></tr><tr><td><code>initialPosition</code></td><td>可选择的</td><td>String</td><td><code>&quot;,&quot;</code></td><td>首次加载时窗口左上角的位置。在具有多个显示器的系统上，这些坐标相对于主显示器的左上角。如果 <code>launchMode</code> 设置为 <code>&quot;maximized&quot;</code>窗口将在这些坐标指定的监视器上最大化。</td></tr><tr><td><code>initialRows</code></td><td>必要的</td><td>Integer</td><td><code>30</code></td><td>首次加载时窗口中显示的行数。</td></tr><tr><td><code>launchMode</code></td><td>可选择的</td><td>String</td><td><code>default</code></td><td>定义终端是否将作为最大化启动。可能的值: <code>&quot;default&quot;</code>, <code>&quot;maximized&quot;</code></td></tr><tr><td><code>rowsToScroll</code></td><td>可选择的的</td><td>Integer</td><td><code>system</code></td><td>使用鼠标滚轮一次滚动的行数。如果值不是zero或”system”，这将覆盖系统设置。</td></tr><tr><td><code>requestedTheme</code></td><td>必要的</td><td>String</td><td><code>system</code></td><td>设置应用程序的主题。可能的值： <code>&quot;light&quot;</code>, <code>&quot;dark&quot;</code>, <code>&quot;system&quot;</code></td></tr><tr><td><code>showTerminalTitleInTitlebar</code></td><td>必要的</td><td>Boolean</td><td><code>true</code></td><td>设置为 <code>true</code>时,标题栏将显示所选选项卡的标题。当设置为 <code>false</code>时, 标题栏将显示”Windows Terminal”.</td></tr><tr><td><code>showTabsInTitlebar</code></td><td>可选择的</td><td>Boolean</td><td><code>true</code></td><td>当设置为 <code>true</code>时, t选项卡将移动到标题栏中，标题栏将消失。 设置为<code>false</code>时,标题栏位于选项卡上方。</td></tr><tr><td><code>snapToGridOnResize</code></td><td>可选择的</td><td>Boolean</td><td><code>false</code></td><td>设置为 <code>true</code>时,窗口将在调整大小时捕捉到最接近的字符边界。 设置为 <code>false</code>时, 窗口将调整”平滑”大小。</td></tr><tr><td><code>tabWidthMode</code></td><td>可选择的</td><td>String</td><td><code>equal</code></td><td>设置选项卡的宽度。可能的值：  <code>&quot;equal&quot;</code>, <code>&quot;titleLength&quot;</code></td></tr><tr><td><code>wordDelimiters</code></td><td>可选择的</td><td>String</td><td>/()”‘-:,.;&lt;&gt;<del>!@#$%^&amp;*| +=[]{}</del>?│(*是U_2502 盒式灯)</td><td>确定双击选择中使用的分隔符。</td></tr><tr><td><code>confirmCloseAllTabs</code></td><td>可选择的</td><td>Boolean</td><td><code>true</code></td><td>当设置为 <code>true</code>时，在 关闭打开多个选项卡的窗口时，需要确认。 当设置为 <code>false</code>时关闭打开多个选项卡的窗口时，不需要确认。</td></tr></tbody></table><h2 id="Profiles设置"><a href="#Profiles设置" class="headerlink" title="Profiles设置"></a>Profiles设置</h2><p>下面列出的属性特定于每个唯一配置文件(唯一的终端配置。以下的配置文件全部都指的是终端。)。</p><table><thead><tr><th>属性名称</th><th>必须性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>guid</code></td><td>必要的</td><td>String</td><td></td><td>配置文件的唯一标识符。以注册表格式编写<code>&quot;&#123;00000000-0000-0000-0000-000000000000&#125;&quot;</code>.</td></tr><tr><td><code>name</code></td><td>必要的</td><td>String</td><td></td><td>配置文件的名称。显示在下拉菜单中。此外，此值将用作启动时传递到 shell 的”标题”。 一些shells (如 <code>bash</code>)）可以选择忽略此初始值， 而其他的 (<code>cmd</code>, <code>powershell</code>) 可能会在应用程序的生存期内使用此值。可以使用”title”可以覆盖此<code>tabTitle</code>.行为。</td></tr><tr><td><code>acrylicOpacity</code></td><td>可选择的</td><td>Number</td><td><code>0.5</code></td><td>当<code>useAcrylic</code>设置为<code>true</code>时, 它将设置配置文件窗口的透明度。接受 0-1 的浮点值。</td></tr><tr><td><code>background</code></td><td>可选择的</td><td>String</td><td></td><td>(设置背景颜色) 设置配置文件的背景颜色。如果设置了<code>background</code> ,则覆盖在配色方案中设置的<code>colorscheme</code> 。使用十六进制颜色格式: <code>&quot;#rrggbb&quot;</code>.</td></tr><tr><td><code>backgroundImage</code></td><td>可选择的</td><td>String</td><td></td><td>(设置图片路径)设置要在窗口背景上绘制的图像的文件位置。</td></tr><tr><td><code>backgroundImageAlignment</code></td><td>可选择的</td><td>String</td><td><code>center</code></td><td>设置背景图像如何与窗口边界对齐。可能的值: <code>&quot;center&quot;</code>, <code>&quot;left&quot;</code>, <code>&quot;top&quot;</code>, <code>&quot;right&quot;</code>, <code>&quot;bottom&quot;</code>, <code>&quot;topLeft&quot;</code>, <code>&quot;topRight&quot;</code>, <code>&quot;bottomLeft&quot;</code>, <code>&quot;bottomRight&quot;</code></td></tr><tr><td><code>backgroundImageOpacity</code></td><td>可选择的</td><td>Number</td><td><code>1.0</code></td><td>设置背景图像的透明度。接受 0-1 的浮点值。</td></tr><tr><td><code>backgroundImageStretchMode</code></td><td>可选择的</td><td>String</td><td><code>uniformToFill</code></td><td>设置调整背景图像以填充窗口的方式。可能的值： <code>&quot;none&quot;</code>, <code>&quot;fill&quot;</code>, <code>&quot;uniform&quot;</code>, <code>&quot;uniformToFill&quot;</code></td></tr><tr><td><code>closeOnExit</code></td><td>可选择的</td><td>String</td><td><code>graceful</code></td><td>设置配置文件对终止或启动失败的反应。可能的值：<code>&quot;graceful&quot;</code> (当按下退出键时关闭或进程正常退出), <code>&quot;always&quot;</code> (始终关闭) and <code>&quot;never&quot;</code> (从不关闭). <code>true</code> 和<code>false</code>  分别被接受为<code>&quot;graceful&quot;</code> and <code>&quot;never&quot;</code> 的同义词.</td></tr><tr><td><code>colorScheme</code></td><td>可选择的</td><td>String</td><td><code>Campbell</code></td><td>要使用的终端配色方案的名称。 配色方案在<code>schemes</code>下定义.</td></tr><tr><td><code>colorTable</code></td><td>可选择的</td><td>Array[String]</td><td></td><td>如果<code>colorscheme</code> 未设置， 则配置文件中使用的颜色数组。数组遵循 <code>schemes</code>中定义的格式。</td></tr><tr><td><code>commandline</code></td><td>可选择的</td><td>String</td><td></td><td>(打开时启动的文件或语句)配置文件中使用的可执行文件。</td></tr><tr><td><code>cursorColor</code></td><td>可选择的</td><td>String</td><td><code>#FFFFFF</code></td><td>设置配置文件的光标颜色。使用十六进制颜色格式：<code>&quot;#rrggbb&quot;</code>.</td></tr><tr><td><code>cursorHeight</code></td><td>可选择的</td><td>Integer</td><td></td><td>从底部开始设置光标的百分比高度。仅当<code>cursorShape</code> 设置为 <code>&quot;vintage&quot;</code>时才起作用 .接受 25-100 中的值。</td></tr><tr><td><code>cursorShape</code></td><td>可选择的</td><td>String</td><td><code>bar</code></td><td>设置配置文件的光标形状。可能的值：<code>&quot;vintage&quot;</code> ( &#x2583; ), <code>&quot;bar&quot;</code> ( &#x2503; ), <code>&quot;underscore&quot;</code> ( &#x2581; ), <code>&quot;filledBox&quot;</code> ( &#x2588; ), <code>&quot;emptyBox&quot;</code> ( &#x25AF; )</td></tr><tr><td><code>fontFace</code></td><td>可选择的</td><td>String</td><td><code>Consolas</code></td><td>(注意!该选项是个坑。如果你的电脑里面没有该字体，Windows Terminal将会英文配置错误而打不开。)配置文件中使用的字体的名称。如果找不到或无效，我们将尝试回退到 Consolas。</td></tr><tr><td><code>fontSize</code></td><td>可选择的</td><td>Integer</td><td><code>12</code></td><td>设置字体大小。</td></tr><tr><td><code>foreground</code></td><td>可选择的</td><td>String</td><td></td><td>设置配置文件的前景颜色。如果设置了<code>foreground</code> 则覆盖在配色方案中设置的。<code>colorscheme</code> 。 使用十六进制颜色格式： <code>#rgb</code> or <code>&quot;#rrggbb&quot;</code>.</td></tr><tr><td><code>hidden</code></td><td>可选择的</td><td>Boolean</td><td><code>false</code></td><td>如果设置为 <code>true</code>.则配置文件将不会显示在配置文件列表中。这可用于隐藏默认配置文件和动态生成的配置文件，同时将它们保留在设置文件中。</td></tr><tr><td><code>historySize</code></td><td>可选择的</td><td>Integer</td><td><code>9001</code></td><td>可以滚动到的窗口中显示的行数。</td></tr><tr><td><code>icon</code></td><td>可选择的</td><td>String</td><td></td><td>配置文件中使用的图标的图像文件位置。显示在选项卡和下拉菜单中。</td></tr><tr><td><code>padding</code></td><td>可选择的</td><td>String</td><td><code>8, 8, 8, 8</code></td><td>设置窗口中文本周围的填充。可以有三种不同的格式 <code>&quot;#&quot;</code> 为所有边设置相同的填充，<code>&quot;#, #&quot;</code>为左右和自上而下设置相同的填充, <code>&quot;#, #, #, #&quot;</code>并为左、上、右和下分别设置填充。</td></tr><tr><td><code>scrollbarState</code></td><td>可选择的</td><td>String</td><td></td><td>定义滚动条的可见性。可能的值：<code>&quot;visible&quot;</code>, <code>&quot;hidden&quot;</code></td></tr><tr><td><code>selectionBackground</code></td><td>可选择的</td><td>String</td><td></td><td>设置配置文件的选择背景颜色。如果设置了 <code>selectionBackground</code>则覆盖在配色方案中设置的<code>colorscheme</code>。使用十六进制颜色格式： <code>&quot;#rrggbb&quot;</code>.</td></tr><tr><td><code>snapOnInput</code></td><td>可选择的</td><td>Boolean</td><td><code>true</code></td><td>设置为  <code>true</code>时,窗口将在键入时滚动到命令输入行。设置为<code>false</code>时， 窗口在开始键入时不会滚动。</td></tr><tr><td><code>source</code></td><td>可选择的</td><td>String</td><td></td><td>存储发起此配置文件的配置文件生成器的名称。此字段没有可发现值。</td></tr><tr><td><code>startingDirectory</code></td><td>可选择的</td><td>String</td><td><code>%USERPROFILE%</code></td><td>shell 加载时启动的目录。</td></tr><tr><td><code>suppressApplicationTitle</code></td><td>可选择的</td><td>Boolean</td><td></td><td>设置为 <code>true</code>时, <code>tabTitle</code> 将覆盖选项卡的默认标题，应用程序中的任何标题更改消息都将被抑制。设置为<code>false</code>, <code>tabTitle</code> 其将会回归正常。</td></tr><tr><td><code>tabTitle</code></td><td>可选择的</td><td>String</td><td></td><td>如果设置了，将会将 <code>name</code>替换 为标题在启动时，一些shells (像<code>bash</code>) 可以选择忽略此初始值，而其他的 (<code>cmd</code>, <code>powershell</code>) 可能会在应用程序的生存期内使用此值。</td></tr><tr><td><code>useAcrylic</code></td><td>可选择的</td><td>Boolean</td><td><code>false</code></td><td>设置为 <code>true</code>时，窗口将具有毛玻璃特效背景.当设置时<code>false</code>时, 窗口将具有纯化、无纹理的背景。</td></tr><tr><td><code>experimental.retroTerminalEffect</code></td><td>可选择的</td><td>Boolean</td><td><code>false</code></td><td>设置为<code>true</code>时, 启用复古终端效果。这是一个实验特征，它的存在是不能保证的。</td></tr></tbody></table><h2 id="Schemes设置"><a href="#Schemes设置" class="headerlink" title="Schemes设置"></a>Schemes设置</h2><p>下面列出的属性特定于每个配色方案。<a href="https://github.com/microsoft/terminal/tree/master/src/tools/ColorTool">ColorTool</a>是一个伟大的工具，可用于创建和探索新的配色方案。所有颜色都使用十六进制颜色格式。</p><table><thead><tr><th>属性名称</th><th>必要性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>name</code></td><td>必要的</td><td>String</td><td>配色方案的名称。</td></tr><tr><td><code>foreground</code></td><td>必要的</td><td>String</td><td>设置配色方案的前景颜色。</td></tr><tr><td><code>background</code></td><td>必要的</td><td>String</td><td>设置配色方案的背景颜色。</td></tr><tr><td><code>selectionBackground</code></td><td>可选择的</td><td>String</td><td>设置配色方案的选择背景颜色。</td></tr><tr><td><code>black</code></td><td>必要的</td><td>String</td><td>设置用作 ANSI 黑色的颜色。</td></tr><tr><td><code>blue</code></td><td>必要的</td><td>String</td><td>设置用作 ANSI 蓝色的颜色。</td></tr><tr><td><code>brightBlack</code></td><td>必要的</td><td>String</td><td>设置用作 ANSI 亮黑色的颜色。</td></tr><tr><td><code>brightBlue</code></td><td>必要的</td><td>String</td><td>设置用作 ANSI 亮蓝色的颜色。</td></tr><tr><td><code>brightCyan</code></td><td>必要的</td><td>String</td><td>设置用作 ANSI 亮青色的颜色。</td></tr><tr><td><code>brightGreen</code></td><td>必要的</td><td>String</td><td>设置用作 ANSI 亮绿色的颜色。</td></tr><tr><td><code>brightPurple</code></td><td>必要的</td><td>String</td><td>设置用作 ANSI 亮紫色的颜色。</td></tr><tr><td><code>brightRed</code></td><td>必要的</td><td>String</td><td>设置用作 ANSI 亮红色的颜色。</td></tr><tr><td><code>brightWhite</code></td><td>必要的</td><td>String</td><td>设置用作 ANSI 亮白色的颜色。</td></tr><tr><td><code>brightYellow</code></td><td>必要的</td><td>String</td><td>设置用作 ANSI 亮黄色的颜色。</td></tr><tr><td><code>cyan</code></td><td>必要的</td><td>String</td><td>设置用作 ANSI 青色的颜色。</td></tr><tr><td><code>green</code></td><td>必要的</td><td>String</td><td>设置用作 ANSI 绿色的颜色。</td></tr><tr><td><code>purple</code></td><td>必要的</td><td>String</td><td>设置用作 ANSI 紫色的颜色。</td></tr><tr><td><code>red</code></td><td>必要的</td><td>String</td><td>设置用作 ANSI 红色的颜色。</td></tr><tr><td><code>white</code></td><td>必要的</td><td>String</td><td>设置用作 ANSI 白色的颜色。</td></tr><tr><td><code>yellow</code></td><td>必要的</td><td>String</td><td>设置用作 ANSI 黄色的颜色。</td></tr></tbody></table><h2 id="Keybindings-快捷键设置"><a href="#Keybindings-快捷键设置" class="headerlink" title="Keybindings(快捷键设置)"></a>Keybindings(快捷键设置)</h2><p>下面列出的属性特定于每个自定义Key绑定。</p><table><thead><tr><th>属性</th><th>必要性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>command</code></td><td>必填</td><td>String</td><td>T按下关联的键绑定时执行的命令</td></tr><tr><td><code>keys</code></td><td>必填</td><td>Array[String]</td><td>定义用于调用命令的键组合。</td></tr></tbody></table><h3 id="Implemented-Commands-已实现的命令"><a href="#Implemented-Commands-已实现的命令" class="headerlink" title="Implemented Commands(已实现的命令)"></a>Implemented Commands(已实现的命令)</h3><p>下面列出的命令根据<a href="https://github.com/microsoft/terminal/blob/master/src/cascadia/TerminalApp/AppKeyBindingsSerialization.cpp"><code>src/cascadia/TerminalApp/AppKeyBindingsSerialization.cpp</code></a>实现进行。</p><ul><li>copy //复制</li><li>copyTextWithoutNewlines//复制没有新行的文本</li><li>paste //粘贴</li><li>newTab //新建一个Tab</li><li>openNewTabDropdown //打开新标签下拉列表</li><li>duplicateTab //重复标签</li><li>newTabProfile0 //新标签配置文件0</li><li>newTabProfile1 //新标签配置文件1</li><li>newTabProfile2 //新标签配置文件2</li><li>newTabProfile3 //新标签配置文件3</li><li>newTabProfile4 //新标签配置文件4</li><li>newTabProfile5 //新标签配置文件5</li><li>newTabProfile6 //新标签配置文件6</li><li>newTabProfile7 //新标签配置文件7</li><li>newTabProfile8 //新标签配置文件8</li><li>closeWindow //关闭窗口</li><li>closeTab //关闭Tab</li><li>closePane //关闭窗格</li><li>switchToTab //切换到Tab</li><li>nextTab  //下一个标签</li><li>prevTab //上一个标签Tab</li><li>increaseFontSize //增加字体大小</li><li>decreaseFontSize //放大缩小字体功能</li><li>resetFontSize //重置FontSize</li><li>scrollUp //向上滚动</li><li>scrollDown //向下滚动</li><li>scrollUpPage //滚动到上页</li><li>scrollDownPage //滚动到下页</li><li>switchToTab0 //切换至Tab0</li><li>switchToTab1 //切换至Tab1</li><li>switchToTab2 //切换至Tab2</li><li>switchToTab3 //切换至Tab3</li><li>switchToTab4 //切换至Tab4</li><li>switchToTab5 //切换至Tab5</li><li>switchToTab6 //切换至Tab6</li><li>switchToTab7 //切换至Tab7</li><li>switchToTab8 //切换至Tab8</li><li>openSettings //打开设置</li><li>splitPane  //拆分窗格</li><li>resizePaneLeft // 调整窗格左侧的大小</li><li>resizePaneRight //调整窗格右</li><li>resizePaneUp //调整窗格大小</li><li>resizePaneDown //调整窗格大小</li><li>moveFocusLeft //移动焦点向左侧</li><li>moveFocusRight //移动焦点向右</li><li>moveFocusUp //移动焦点向上</li><li>moveFocusDown //移动焦点向下</li><li>toggleFullscreen //切换全屏</li><li>find //查找</li></ul><h2 id="Example-Keys-示例键"><a href="#Example-Keys-示例键" class="headerlink" title="Example Keys (示例键)"></a>Example Keys (示例键)</h2><ul><li>ctrl+1</li><li>ctrl+plus</li><li>alt+-</li><li>shift+numpad_1</li><li>ctrL+shift+numpad_plus</li><li>ctrl+pgdn</li><li>ctrl+alt+shift+pgup</li></ul><h2 id="Background-Images-and-Icons-背景图像和图标"><a href="#Background-Images-and-Icons-背景图像和图标" class="headerlink" title="Background Images and Icons(背景图像和图标)"></a>Background Images and Icons(背景图像和图标)</h2><p>某些终端设置允许您指定自定义背景图像和图标。建议将自定义图像和图标存储在系统提供的文件夹中，并使用正确的<a href="https://docs.microsoft.com/en-us/windows/uwp/app-resources/uri-schemes">URI 方案</a>进行引用。URI 方案提供了一种独立于其物理路径（将来可能会更改）引用文件的方法。</p><p>自定义背景图像和图标时要记住的最有用的 URI 方案是：</p><table><thead><tr><th>URI 方案</th><th>相应的物理路径</th><th>使用/ 描述</th></tr></thead><tbody><tr><td><code>ms-appdata:///Local/</code></td><td><code>%localappdata%\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState\</code></td><td>计算机文件</td></tr><tr><td><code>ms-appdata:///Roaming/</code></td><td><code>%localappdata%\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\RoamingState\</code></td><td>常见文件</td></tr></tbody></table><blockquote><p>⚠ 注意：不要依赖使用 URI 方案（即图标）的文件引用。这些文件被视为内部实现详细信息，可能会更改名称/位置，或将来可能会省略。<code>ms-appx</code></p></blockquote><h3 id="Icons-图标"><a href="#Icons-图标" class="headerlink" title="Icons(图标)"></a>Icons(图标)</h3><p>终端会显示终端为任何内置外壳生成的每个配置文件的图标 – PowerShell Core, PowerShell, 和任何已安装的Linux/WSL distros. Each发行版。每个配置文件都通过 URI 方案引用图标。<code>ms-appx</code></p><blockquote><p>⚠ 注意：不要依赖 URI 方案引用的文件 - 这些文件被视为内部实现详细信息，可能会更改名称/位置，或者将来可能会省略。<code>ms-appx</code></p></blockquote><p>如果你愿意，你可以参考你自己的图标，例如：</p><pre><code class="hljs json">&quot;icon&quot; : &quot;C:\\Users\\richturn\\OneDrive\\WindowsTerminal\\icon-ubuntu-32.png&quot;,</code></pre><blockquote><p>👉提示：图标应以适当的栅格图像格式大小为 32x32px（例如 。Png。GIF 或 。ICO），以避免在运行时扩展图标（导致明显的延迟和质量损失）。</p></blockquote><h3 id="Custom-Background-Images-自定义背景图像"><a href="#Custom-Background-Images-自定义背景图像" class="headerlink" title="Custom Background Images(自定义背景图像)"></a>Custom Background Images(自定义背景图像)</h3><p>您可以将背景图像应用于每个配置文件，从而允许您根据需要单独配置/品牌/样式每个配置文件。<br>为此，请指定您的首选<code>backgroundImage</code> ，使用 <code>backgroundImageAlignment</code>定位它，用 <code>backgroundImageOpacity</code>设置不集中性，和/或指定如何使用 <code>backgroundImageStretchMode</code>填充可用空间的图像</p><p>例如：:</p><pre><code class="hljs json">&quot;backgroundImage&quot;: &quot;C:\\Users\\richturn\\OneDrive\\WindowsTerminal\\bg-ubuntu-256.png&quot;,&quot;backgroundImageAlignment&quot;: &quot;bottomRight&quot;,&quot;backgroundImageOpacity&quot;: 0.1,&quot;backgroundImageStretchMode&quot;: &quot;none&quot;</code></pre><blockquote><p>👉 提示：您可以通过在 OneDrive 中存储图标和图像，轻松地在所有计算机上漫游图像和图标集合（如上所示）。</p></blockquote><p>###<a href="https://github.com/microsoft/terminal">Windows TerminalGitHub地址</a></p><blockquote><p>###将Windows Terminal添加到你的鼠标右键<br>#####首先，下载一个<a href="https://raw.githubusercontent.com/microsoft/terminal/master/res/terminal.ico">图标</a>。图标链接：<a href="https://raw.githubusercontent.com/microsoft/terminal/master/res/terminal.ico">https://raw.githubusercontent.com/microsoft/terminal/master/res/terminal.ico</a><br>#####然后，新建一个注册表文件.<br>######新建一个文件，文件名随便(我的就是addWT.reg)，但是后缀需要是.reg。<br>######将以下内容稍作修改后用管理员权限打开。</p></blockquote><pre><code class="hljs taggerscript">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT<span class="hljs-symbol">\D</span>irectory<span class="hljs-symbol">\B</span>ackground<span class="hljs-symbol">\s</span>hell<span class="hljs-symbol">\w</span>t]@=&quot;Windows Terminal here&quot;&quot;Icon&quot;=&quot;你下载好后的图片目录名！注意！一旦确定后，该图标一定要是这个地址！<span class="hljs-symbol">\\</span>terminal.ico&quot;[HKEY_CLASSES_ROOT<span class="hljs-symbol">\D</span>irectory<span class="hljs-symbol">\B</span>ackground<span class="hljs-symbol">\s</span>hell<span class="hljs-symbol">\w</span>t<span class="hljs-symbol">\c</span>ommand]@=&quot;C:<span class="hljs-symbol">\\</span>Users<span class="hljs-symbol">\\</span>[注意！！！这是你的电脑名！]<span class="hljs-symbol">\\</span>AppData<span class="hljs-symbol">\\</span>Local<span class="hljs-symbol">\\</span>Microsoft<span class="hljs-symbol">\\</span>WindowsApps<span class="hljs-symbol">\\</span>wt.exe&quot;</code></pre><p>#####例如我的:</p><pre><code class="hljs taggerscript">Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT<span class="hljs-symbol">\D</span>irectory<span class="hljs-symbol">\B</span>ackground<span class="hljs-symbol">\s</span>hell<span class="hljs-symbol">\w</span>t]@=&quot;Windows Terminal here&quot;&quot;Icon&quot;=&quot;E:<span class="hljs-symbol">\\</span>terminal.ico&quot;[HKEY_CLASSES_ROOT<span class="hljs-symbol">\D</span>irectory<span class="hljs-symbol">\B</span>ackground<span class="hljs-symbol">\s</span>hell<span class="hljs-symbol">\w</span>t<span class="hljs-symbol">\c</span>ommand]@=&quot;C:<span class="hljs-symbol">\\</span>Users<span class="hljs-symbol">\\</span>palz<span class="hljs-symbol">\\</span>AppData<span class="hljs-symbol">\\</span>Local<span class="hljs-symbol">\\</span>Microsoft<span class="hljs-symbol">\\</span>WindowsApps<span class="hljs-symbol">\\</span>wt.exe&quot;</code></pre><p>#####图标文件放在E盘的路径下。而我的电脑名是palz。<br>#####不会看电脑名？打开Windows Terminal。切换到cmd终端。<br>#####输入<code>echo %USERPROFILE%</code><br>#####就会打印C:\Users\你的电脑名。</p><blockquote><p>####取消Windows Terminal电脑右键<br>#####在开始菜单中找到注册表编辑器。打开。<br>#####在搜索栏中输入<code>HKEY_CLASSES_ROOT\Directory\Background\shell\wt</code><br>#####删掉即可。(因为这个是我们在上面添加的。)<br>#####(注意不要随便删除注册表中的数据。)<br><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]WindowsTerminal%E9%85%8D%E7%BD%AE/2.png" alt="取消Windows Terminal右键"></p></blockquote><blockquote><p>2021年2月9日 </p></blockquote><p>&emsp;&emsp;因为随着版本的升级，目前配置文件已经更改了。下面是最新的我的配置文件。（估计配置属性那些应该没有改。）</p><pre><code class="hljs json"><span class="hljs-comment">// This file was initially generated by Windows Terminal 1.4.3243.0</span><span class="hljs-comment">// It should still be usable in newer versions, but newer versions might have additional</span><span class="hljs-comment">// settings, help text, or changes that you will not see unless you clear this file</span><span class="hljs-comment">// and let us generate a new one for you.</span><span class="hljs-comment">// To view the default settings, hold &quot;alt&quot; while clicking on the &quot;Settings&quot; button.</span><span class="hljs-comment">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span>&#123;    <span class="hljs-attr">&quot;$schema&quot;</span>: <span class="hljs-string">&quot;https://aka.ms/terminal-profiles-schema&quot;</span>,    <span class="hljs-attr">&quot;defaultProfile&quot;</span>: <span class="hljs-string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span>,    <span class="hljs-comment">// You can add more global application settings here.</span>    <span class="hljs-comment">// To learn more about global settings, visit https://aka.ms/terminal-global-settings</span>    <span class="hljs-comment">// If enabled, selections are automatically copied to your clipboard.</span>    <span class="hljs-attr">&quot;copyOnSelect&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-comment">// If enabled, formatted data is also copied to your clipboard</span>    <span class="hljs-attr">&quot;copyFormatting&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-comment">// A profile specifies a command to execute paired with information about how it should look and feel.</span>    <span class="hljs-comment">// Each one of them will appear in the &#x27;New Tab&#x27; dropdown,</span>    <span class="hljs-comment">//   and can be invoked from the commandline with `wt.exe -p xxx`</span>    <span class="hljs-comment">// To learn more about profiles, visit https://aka.ms/terminal-profile-settings</span>    <span class="hljs-attr">&quot;profiles&quot;</span>:    &#123;        <span class="hljs-attr">&quot;defaults&quot;</span>:        &#123;            <span class="hljs-comment">// Put settings here that you want to apply to all profiles.</span>        &#125;,        <span class="hljs-attr">&quot;list&quot;</span>:        [            &#123;                <span class="hljs-comment">// Make changes here to the powershell.exe profile.</span>                <span class="hljs-attr">&quot;guid&quot;</span>: <span class="hljs-string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span>,                <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Windows PowerShell&quot;</span>,                <span class="hljs-attr">&quot;commandline&quot;</span>: <span class="hljs-string">&quot;powershell.exe&quot;</span>,                <span class="hljs-attr">&quot;hidden&quot;</span>: <span class="hljs-literal">false</span>,                <span class="hljs-attr">&quot;useAcrylic&quot;</span>: <span class="hljs-literal">true</span>,                <span class="hljs-attr">&quot;backgroundImage&quot;</span> : <span class="hljs-string">&quot;E:\\CMD.jpg&quot;</span>,                <span class="hljs-attr">&quot;backgroundImageOpacity&quot;</span> : <span class="hljs-number">0.80</span>,                <span class="hljs-attr">&quot;backgroundImageStretchMode&quot;</span> : <span class="hljs-string">&quot;fill&quot;</span>,                <span class="hljs-attr">&quot;fontFace&quot;</span> : <span class="hljs-string">&quot;Consolas&quot;</span>,                <span class="hljs-attr">&quot;fontSize&quot;</span> : <span class="hljs-number">10</span>,                <span class="hljs-attr">&quot;foreground&quot;</span> : <span class="hljs-string">&quot;#FFFFFF&quot;</span>,                <span class="hljs-attr">&quot;startingDirectory&quot;</span> : <span class="hljs-string">&quot;./&quot;</span>            &#125;,            &#123;                <span class="hljs-comment">// Make changes here to the cmd.exe profile.</span>                <span class="hljs-attr">&quot;guid&quot;</span>: <span class="hljs-string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span>,                <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Command Prompt&quot;</span>,                <span class="hljs-attr">&quot;commandline&quot;</span>: <span class="hljs-string">&quot;cmd.exe&quot;</span>,                <span class="hljs-attr">&quot;hidden&quot;</span>: <span class="hljs-literal">false</span>,                <span class="hljs-attr">&quot;useAcrylic&quot;</span>: <span class="hljs-literal">true</span>,                <span class="hljs-attr">&quot;backgroundImage&quot;</span> : <span class="hljs-string">&quot;E:\\CMD.jpg&quot;</span>,                <span class="hljs-attr">&quot;backgroundImageOpacity&quot;</span> : <span class="hljs-number">0.80</span>,                <span class="hljs-attr">&quot;backgroundImageStretchMode&quot;</span> : <span class="hljs-string">&quot;fill&quot;</span>,                <span class="hljs-attr">&quot;fontSize&quot;</span> : <span class="hljs-number">10</span>,                <span class="hljs-attr">&quot;foreground&quot;</span> : <span class="hljs-string">&quot;#FFFFFF&quot;</span>,                <span class="hljs-attr">&quot;startingDirectory&quot;</span> : <span class="hljs-string">&quot;./&quot;</span>            &#125;,            &#123;                <span class="hljs-attr">&quot;guid&quot;</span>: <span class="hljs-string">&quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;</span>,                <span class="hljs-attr">&quot;hidden&quot;</span>: <span class="hljs-literal">false</span>,                <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Azure Cloud Shell&quot;</span>,                <span class="hljs-attr">&quot;source&quot;</span>: <span class="hljs-string">&quot;Windows.Terminal.Azure&quot;</span>,                <span class="hljs-attr">&quot;useAcrylic&quot;</span>: <span class="hljs-literal">true</span>,                <span class="hljs-attr">&quot;backgroundImage&quot;</span> : <span class="hljs-string">&quot;E:\\CMD.jpg&quot;</span>,                <span class="hljs-attr">&quot;backgroundImageOpacity&quot;</span> : <span class="hljs-number">0.80</span>,                <span class="hljs-attr">&quot;backgroundImageStretchMode&quot;</span> : <span class="hljs-string">&quot;fill&quot;</span>,                <span class="hljs-attr">&quot;fontSize&quot;</span> : <span class="hljs-number">10</span>,                <span class="hljs-attr">&quot;foreground&quot;</span> : <span class="hljs-string">&quot;#FFFFFF&quot;</span>,                <span class="hljs-attr">&quot;startingDirectory&quot;</span> : <span class="hljs-string">&quot;./&quot;</span>            &#125;,            &#123;                <span class="hljs-comment">// Make changes here to the cmd.exe profile.</span>                <span class="hljs-attr">&quot;guid&quot;</span>: <span class="hljs-string">&quot;&#123;cfb9fc88-ea98-414c-b489-326c80724aab&#125;&quot;</span>,                <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Raspbian Pi&quot;</span>,                <span class="hljs-attr">&quot;icon&quot;</span>: <span class="hljs-string">&quot;E:\\RaspberryPi.ico&quot;</span>,                <span class="hljs-attr">&quot;commandline&quot;</span>: <span class="hljs-string">&quot;ssh pi@192.168.0.200&quot;</span>,                <span class="hljs-attr">&quot;hidden&quot;</span>: <span class="hljs-literal">false</span>,                <span class="hljs-attr">&quot;useAcrylic&quot;</span>: <span class="hljs-literal">true</span>,                <span class="hljs-attr">&quot;backgroundImage&quot;</span> : <span class="hljs-string">&quot;E:\\CMD.jpg&quot;</span>,                <span class="hljs-attr">&quot;backgroundImageOpacity&quot;</span> : <span class="hljs-number">0.80</span>,                <span class="hljs-attr">&quot;backgroundImageStretchMode&quot;</span> : <span class="hljs-string">&quot;fill&quot;</span>,                <span class="hljs-attr">&quot;fontSize&quot;</span> : <span class="hljs-number">10</span>,                <span class="hljs-attr">&quot;foreground&quot;</span> : <span class="hljs-string">&quot;#FFFFFF&quot;</span>,                <span class="hljs-attr">&quot;startingDirectory&quot;</span> : <span class="hljs-string">&quot;./&quot;</span>            &#125;        ]    &#125;,    <span class="hljs-comment">// Add custom color schemes to this array.</span>    <span class="hljs-comment">// To learn more about color schemes, visit https://aka.ms/terminal-color-schemes</span>    <span class="hljs-attr">&quot;schemes&quot;</span>: [],    <span class="hljs-comment">// Add custom actions and keybindings to this array.</span>    <span class="hljs-comment">// To unbind a key combination from your defaults.json, set the command to &quot;unbound&quot;.</span>    <span class="hljs-comment">// To learn more about actions and keybindings, visit https://aka.ms/terminal-keybindings</span>    <span class="hljs-attr">&quot;actions&quot;</span>:    [        <span class="hljs-comment">// Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V in your defaults.json.</span>        <span class="hljs-comment">// These two lines additionally bind them to Ctrl+C and Ctrl+V.</span>        <span class="hljs-comment">// To learn more about selection, visit https://aka.ms/terminal-selection</span>        &#123; <span class="hljs-attr">&quot;command&quot;</span>: &#123;<span class="hljs-attr">&quot;action&quot;</span>: <span class="hljs-string">&quot;copy&quot;</span>, <span class="hljs-attr">&quot;singleLine&quot;</span>: <span class="hljs-literal">false</span> &#125;, <span class="hljs-attr">&quot;keys&quot;</span>: <span class="hljs-string">&quot;ctrl+c&quot;</span> &#125;,        &#123; <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;paste&quot;</span>, <span class="hljs-attr">&quot;keys&quot;</span>: <span class="hljs-string">&quot;ctrl+v&quot;</span> &#125;,        <span class="hljs-comment">// Press Ctrl+Shift+F to open the search box</span>        &#123; <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;find&quot;</span>, <span class="hljs-attr">&quot;keys&quot;</span>: <span class="hljs-string">&quot;ctrl+shift+f&quot;</span> &#125;,        <span class="hljs-comment">// Press Alt+Shift+D to open a new pane.</span>        <span class="hljs-comment">// - &quot;split&quot;: &quot;auto&quot; makes this pane open in the direction that provides the most surface area.</span>        <span class="hljs-comment">// - &quot;splitMode&quot;: &quot;duplicate&quot; makes the new pane use the focused pane&#x27;s profile.</span>        <span class="hljs-comment">// To learn more about panes, visit https://aka.ms/terminal-panes</span>        &#123; <span class="hljs-attr">&quot;command&quot;</span>: &#123; <span class="hljs-attr">&quot;action&quot;</span>: <span class="hljs-string">&quot;splitPane&quot;</span>, <span class="hljs-attr">&quot;split&quot;</span>: <span class="hljs-string">&quot;auto&quot;</span>, <span class="hljs-attr">&quot;splitMode&quot;</span>: <span class="hljs-string">&quot;duplicate&quot;</span> &#125;, <span class="hljs-attr">&quot;keys&quot;</span>: <span class="hljs-string">&quot;alt+shift+d&quot;</span> &#125;    ]&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>终端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA环境安装(1.8示例)</title>
    <link href="/2020/01/30/Java%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85(1.8%E7%89%88%E6%9C%AC%E5%AE%9E%E4%BE%8B)/"/>
    <url>/2020/01/30/Java%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85(1.8%E7%89%88%E6%9C%AC%E5%AE%9E%E4%BE%8B)/</url>
    
    <content type="html"><![CDATA[<p>(转至自己的简书,所以时间比较早)</p><blockquote><p>Java所需要了解的一些事</p></blockquote><p>首先，对于JAVA来说，JAVA环境配置需要了解一下几个内容。</p><ol><li><p>JDK(Java Development Kit) 是 Java 语言的软件开发工具包(<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/SDK">SDK</a>)。即，需要开发JAVA软件的话，JDK是必须要的。</p><p> JDK中分为SE,EE,ME三个版本。‘</p><p>SE(JavaSE，standard edition ：标准版，是我们通常使用的一个版本，从JDK 5.0开始，改名为Java SE。</p><p>EE(JavaEE，enterprise edition）：企业版，使用这种JDK开发J2EE应用程序，从JDK 5.0开始，改名为Java EE。从2018年2月26日开始，J2EE改名为Jakarta EE。</p><p> ME(J2ME，micro edition）：主要用于移动设备、嵌入式设备上的java应用程序，从JDK 5.0开始，改名为Java ME。</p></li><li><p> JRE(Java Runtime Environment）是 Java 语言的运行环境。 其包括Java虚拟机（JVM），Java核心库和支持文件。即，如果要运行JAVA程序的话，JRE是必须的。</p></li><li><p>JVM(Java Virtual Machine）：是Java<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E6%9C%BA">虚拟机</a>，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p><p>（目前Java的最高版本是15版本，但是不推荐安装其最高版本，因为市面上的Java版本大部分是1.7，1.8版本，如果Java版本安装过高，会出现不兼容现象。）</p></li></ol><blockquote><p>Java环境安装</p></blockquote><p>首先，访问官网，下载安装包。</p><p>  官网链接：  <em><a href="https://links.jianshu.com/go?to=https://www.oracle.com/technetwork/java/javase/downloads/index.html">Java SE下载地址</a></em></p><p>​            <a href="https://links.jianshu.com/go?to=https://www.oracle.com/cn/java/technologies/java-ee-glance.html">Java EE下载地址</a></p><p>​            <a href="https://links.jianshu.com/go?to=https://www.oracle.com/java/technologies/javameoverview.html">Java ME下载地址</a></p><p>（其实JAVA SE下载地址中已经包含了其它的下载地址。另外，Java SE已经满足日常学习。没有必要要求，无需安装Java EE。Java是由Sun公司开发的，后来被甲骨文公司所购买。）</p><p><strong><em>访问官网下载</em></strong></p><p> 1.访问官网，下载相对应的 Java 版本安装包。</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/1.png" alt="下载对应的Java版本安装包"></p><p>访问官网</p><p>2.选择自己相对应的系统版本安装包</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/2.png" alt="选择自己相对应的系统版本安装包"></p><p>下载相对应的安装包</p><p><strong><em>Windows版本安装</em></strong></p><p>  1.访问官网下载相对应安装包。</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/3.png" alt="访问官网下载相对应安装包"></p><p>选择相应的包</p><p>2.有甲骨文账号的登陆，没有甲骨文账号的注册之后再登陆后即可下载。（=-=我不知道为什么我居然访问不了）</p><p>3.用管理员权限打开下载好的软件。</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/4.png" alt="软件安装界面"></p><p>打开的界面</p><p>下一步</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/5.png" alt="选择JDK的位置"></p><p>选择JDK的位置</p><p>点击下一步，操作一部分会弹出JRE的安装程序。安装的进度条也会卡住。请注意。</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/6.png" alt="JRE安装"></p><p>JRE安装</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/7.png" alt="安装成功"></p><p>安装成功！</p><p>你以为这样就安装成功了吗？不，我们可能还需要配置一些环境变量。</p><p>4.配置环境变量</p><p>打开环境变量设置有多种方法。</p><p>  方法一：通过我的电脑-&gt;<strong>双击此电脑</strong>-&gt;计算机-&gt;属性-&gt;高级系统设置-&gt;环境变量。</p><p>  方法二：Windows键+R打开运行（或者在开始里面找到运行）-&gt;输入 <strong>sysdm.cpl</strong> 之后确定 -&gt;高级-&gt;环境变量。</p><p>这里使用方法一：</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/8.png" alt="打开我的电脑"></p><p>打开我的电脑</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/9.png" alt="双击计算机"></p><p>双击计算机</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/10.png" alt="点击属性"></p><p>点击属性</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/11.png" alt="点击高级系统设置"></p><p>点击高级系统设置</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/12.png" alt="点击环境变量"></p><p>点击环境变量</p><p>Java配置环境变量需要两个设置，一个JAVA_HOME，一个是CLASSPATH.</p><p>JAVA_HOME:用于指示Java开发环境。告诉操作系统在哪个目录下可以寻找到相对应的Java开发软件，同时也是部分IDE所需要的。</p><p>CLASSPATH:用于告诉Java执行环境，在哪些目录下可以找到所要执行的Java程序所需要的类或者包。</p><p>下面，就配置Java的环境变量</p><p>1.在系统变量中，新键环境变量</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/13.png" alt="新键环境变量"></p><p>新建环境变量</p><p>2.在变量名中填写 <strong>JAVA_HOME</strong> ，在变量值中填写之前所安装的JDK的位置。确定即可。我之前安装设置在D盘下的JAVA目录下的JDK目录。</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/14.png" alt="设置JDK的环境变量"></p><p>配置JAVA_HOME</p><p>3.然后在系统变量中找到变量为Path,选中之后点击编辑。如果不是长条，就按下图操作。</p><p>  （1）.新建一个，然后在框中输入一个小点（英文） .</p><p>  （2）.继续新建一个，然后在框中输入 %JAVA_HOME%\bin</p><p>如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/15.png" alt="设置Path环境变量"></p><p>配置Path</p><p>如果不是上图类型，就在变量值框中输入以下语句: <strong>;.;%JAVA_HOME%\bin</strong></p><p>4.接着继续新建一个系统变量，在变量名中填写 <strong>CLASSPATH</strong> ,在变量值中填写</p><p> <strong>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/16.png" alt="设置CLASSPATH的环境变量"></p><p>配置CLASSPATH</p><p>(注意：JAVA版本在1.5以上，不配置CLASSPATH也可以正常编译和运行JAVA)</p><p>5，确认保存退出即可完成配置。</p><p>6.检验是否安装成功:</p><p>​    1.首先 Windows键+R，弹出运行，（也可以直接在开始中搜索）</p><p>​    2.输入cmd，弹出cmd控制台。</p><p>（上述两个操作可以在开始直接搜索cmd运行控制台）.  </p><p>​    3.输入 javac，看是否出现下图</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/17.png" alt="测试javac"></p><p>成功示意图</p><p>  4.输入 java，看是否出现下图</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/18.png" alt="测试java"></p><p>成功示意图</p><p>（javac是java的编译器，java是java的运行。）</p><p>Windows安装Java完成！</p><p>  <strong><em>Linux 版本安装\</em></strong></p><p><strong><em>Linux版本的Java可以直接搜索安装。这个就不用多说了，下面是到官方下载相应的包，解压后安装过程。\</em></strong></p><p>1.访问官网下载相对应的包</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/19.png" alt="下载软件"></p><p>下载Linux版本的压缩包</p><p>2.创建目录</p><p>在usr目录下创建Java目录。</p><p>在终端中输入指令</p><p><strong>sudo mkdir /usr/local/Java</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/20.png" alt="创建文件夹"></p><p>创建文件夹</p><p>3.将Java解压到目录</p><p>1.先切换到包含Java安装包的文件夹中</p><p>2.解压文件到/usr/local/Java中</p><p><strong>sudo tar -zxvf 你Java安装包的名字 -C /usr/local/Java</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/21.png" alt="解压软件"></p><p>解压安装包</p><p>3.配置Java环境变量  </p><p>（先移动到/usr/local/Java目录下，查看文件名）</p><p>  (1).先输入<strong>sudo vi /etc/profile</strong> ，编辑配置文件。  </p><p>  (2).然后将光标移动到最后的位置，按下按钮 i 键，进入编辑模式</p><p>  (3).添加如下语句</p><p>​    <strong>set java environment</strong></p><p>​    <strong>JAVA_HOME=/usr/local/Java/<del>jdk1.8.0_241</del></strong>  </p><p>​    <strong>JRE_HOME=/usr/local/Java/<del>jdk1.8.0_241</del>/jre</strong>  </p><p>​    <strong>CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</strong></p><p>​    <strong>PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</strong></p><p>​    <strong>export JAVA_HOME JRE_HOME CLASS_PATH PATH</strong></p><p>  (注意：删除线包括的部分（jdk1.8.0_241）是由java包解压后的文件名所决定。也就是/usr/local/Java目录下的文件夹。如果Java目录不是安装在/usr/local/Java目录下，请自行更改)</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/22.png" alt="配置环境变量"></p><p>4.在编辑模式下，按下<strong>Esc</strong>键退出编辑模式，然后在<strong>Shift+:**，进入命令模式，输入</strong>wq<strong>后保存退出。（不保存退出是</strong>q!**）</p><p>5.对修改的配置进行设置生效</p><p>在命令行中输入</p><p><strong>sudo -s</strong></p><p><strong>source /etc/profile</strong></p><p>6.测试Java是否安装成功</p><p>(1.测试javac)</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/23.png" alt="测试javac"></p><p>javac成功示意图</p><p>（2.测试java）</p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/[%E8%BD%AC%E8%BD%BD]JAVA%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/24.png" alt="测试java"></p><p>java成功示意图</p><p>Linux Java环境安装完成。</p><blockquote><p>总结</p></blockquote><p>Java安装较难的地方是难在配置环境变量上面，需要了解环境变量是怎么回事以及如何配置。其它的都还好。</p><p>声明:在文章中借鉴了部分百度百科以及CSDN上面的内容。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>编程</tag>
      
      <tag>环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>JAVA环境安装(1.8示例)</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Java所需要了解的一些事</p></blockquote><p>首先，对于JAVA来说，JAVA环境配置需要了解一下几个内容。</p><ol><li>JDK(Java Development Kit) 是 Java 语言的软件开发工具包(<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/SDK">SDK</a>)。即，需要开发JAVA软件的话，JDK是必须要的。</li></ol><pre><code>JDK中分为SE,EE,ME三个版本。‘</code></pre><p>   SE(JavaSE，standard edition ：标准版，是我们通常使用的一个版本，从JDK 5.0开始，改名为Java SE。</p><p>   EE(JavaEE，enterprise edition）：企业版，使用这种JDK开发J2EE应用程序，从JDK 5.0开始，改名为Java EE。从2018年2月26日开始，J2EE改名为Jakarta EE。</p><pre><code>ME(J2ME，micro edition）：主要用于移动设备、嵌入式设备上的java应用程序，从JDK 5.0开始，改名为Java ME。</code></pre><ol start="2"><li><p> JRE(Java Runtime Environment）是 Java 语言的运行环境。 其包括Java虚拟机（JVM），Java核心库和支持文件。即，如果要运行JAVA程序的话，JRE是必须的。</p></li><li><p>JVM(Java Virtual Machine）：是Java<a href="https://links.jianshu.com/go?to=https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E6%9C%BA">虚拟机</a>，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p><p>（目前Java的最高版本是15版本，但是不推荐安装其最高版本，因为市面上的Java版本大部分是1.7，1.8版本，如果Java版本安装过高，会出现不兼容现象。）</p></li></ol><blockquote><p>Java环境安装</p></blockquote><p>首先，访问官网，下载安装包。</p><p>  官网链接：  <em><a href="https://links.jianshu.com/go?to=https://www.oracle.com/technetwork/java/javase/downloads/index.html">Java SE下载地址</a></em></p><p>​            <a href="https://links.jianshu.com/go?to=https://www.oracle.com/cn/java/technologies/java-ee-glance.html">Java EE下载地址</a></p><p>​            <a href="https://links.jianshu.com/go?to=https://www.oracle.com/java/technologies/javameoverview.html">Java ME下载地址</a></p><p>（其实JAVA SE下载地址中已经包含了其它的下载地址。另外，Java SE已经满足日常学习。没有必要要求，无需安装Java EE。Java是由Sun公司开发的，后来被甲骨文公司所购买。）</p><p><strong><em>访问官网下载</em></strong></p><p> 1.访问官网，下载相对应的 Java 版本安装包。</p><p><img src="./1.png" alt="img"></p><p>访问官网</p><p>2.选择自己相对应的系统版本安装包</p><p><img src="./2.png" alt="img"></p><p>下载相对应的安装包</p><p><strong><em>Windows版本安装</em></strong></p><p>  1.访问官网下载相对应安装包。</p><p><img src="./3.png" alt="img"></p><p>选择相应的包</p><p>2.有甲骨文账号的登陆，没有甲骨文账号的注册之后再登陆后即可下载。（=-=我不知道为什么我居然访问不了）</p><p>3.用管理员权限打开下载好的软件。</p><p><img src="./4.png" alt="img"></p><p>打开的界面</p><p>下一步</p><p><img src="./5.png" alt="img"></p><p>选择JDK的位置</p><p>点击下一步，操作一部分会弹出JRE的安装程序。安装的进度条也会卡住。请注意。</p><p><img src="./6.png" alt="img"></p><p>JRE安装</p><p><img src="./7.png" alt="img"></p><p>安装成功！</p><p>你以为这样就安装成功了吗？不，我们可能还需要配置一些环境变量。</p><p>4.配置环境变量</p><p>打开环境变量设置有多种方法。</p><p>  方法一：通过我的电脑-&gt;<strong>双击此电脑</strong>-&gt;计算机-&gt;属性-&gt;高级系统设置-&gt;环境变量。</p><p>  方法二：Windows键+R打开运行（或者在开始里面找到运行）-&gt;输入 <strong>sysdm.cpl</strong> 之后确定 -&gt;高级-&gt;环境变量。</p><p>这里使用方法一：</p><p><img src="./8.png" alt="img"></p><p>打开我的电脑</p><p><img src="./9.png" alt="img"></p><p>点击计算机</p><p><img src="./10.png" alt="img"></p><p>点击属性</p><p><img src="./11.png" alt="img"></p><p>点击高级系统设置</p><p><img src="./12.png" alt="img"></p><p>点击环境变量</p><p>Java配置环境变量需要两个设置，一个JAVA_HOME，一个是CLASSPATH.</p><p>JAVA_HOME:用于指示Java开发环境。告诉操作系统在哪个目录下可以寻找到相对应的Java开发软件，同时也是部分IDE所需要的。</p><p>CLASSPATH:用于告诉Java执行环境，在哪些目录下可以找到所要执行的Java程序所需要的类或者包。</p><p>下面，就配置Java的环境变量</p><p>1.在系统变量中，新键环境变量</p><p><img src="./13.png" alt="img"></p><p>新建环境变量</p><p>2.在变量名中填写 <strong>JAVA_HOME</strong> ，在变量值中填写之前所安装的JDK的位置。确定即可。我之前安装设置在D盘下的JAVA目录下的JDK目录。</p><p><img src="./14.png" alt="img"></p><p>配置JAVA_HOME</p><p>3.然后在系统变量中找到变量为Path,选中之后点击编辑。如果不是长条，就按下图操作。</p><p>  （1）.新建一个，然后在框中输入一个小点（英文） .</p><p>  （2）.继续新建一个，然后在框中输入 %JAVA_HOME%\bin</p><p>如图所示</p><p><img src="./15.png" alt="img"></p><p>配置Path</p><p>如果不是上图类型，就在变量值框中输入以下语句: <strong>;.;%JAVA_HOME%\bin</strong></p><p>4.接着继续新建一个系统变量，在变量名中填写 <strong>CLASSPATH</strong> ,在变量值中填写</p><p> <strong>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</strong></p><p><img src="./16.png" alt="img"></p><p>配置CLASSPATH</p><p>(注意：JAVA版本在1.5以上，不配置CLASSPATH也可以正常编译和运行JAVA)</p><p>5，确认保存退出即可完成配置。</p><p>6.检验是否安装成功:</p><p>​    1.首先 Windows键+R，弹出运行，（也可以直接在开始中搜索）</p><p>​    2.输入cmd，弹出cmd控制台。</p><p>（上述两个操作可以在开始直接搜索cmd运行控制台）.  </p><p>​    3.输入 javac，看是否出现下图</p><p><img src="./17.png" alt="img"></p><p>成功示意图</p><p>  4.输入 java，看是否出现下图</p><p><img src="./18.png" alt="img"></p><p>成功示意图</p><p>（javac是java的编译器，java是java的运行。）</p><p>Windows安装Java完成！</p><p>  <strong><em>Linux 版本安装\</em></strong></p><p><strong><em>Linux版本的Java可以直接搜索安装。这个就不用多说了，下面是到官方下载相应的包，解压后安装过程。\</em></strong></p><p>1.访问官网下载相对应的包</p><p><img src="./19.png" alt="img"></p><p>下载Linux版本的压缩包</p><p>2.创建目录</p><p>在usr目录下创建Java目录。</p><p>在终端中输入指令</p><p><strong>sudo mkdir /usr/local/Java</strong></p><p><img src="./20.png" alt="img"></p><p>创建文件夹</p><p>3.将Java解压到目录</p><p>1.先切换到包含Java安装包的文件夹中</p><p>2.解压文件到/usr/local/Java中</p><p><strong>sudo tar -zxvf 你Java安装包的名字 -C /usr/local/Java</strong></p><p><img src="./21.png" alt="img"></p><p>解压安装包</p><p>3.配置Java环境变量  </p><p>（先移动到/usr/local/Java目录下，查看文件名）</p><p>  (1).先输入<strong>sudo vi /etc/profile</strong> ，编辑配置文件。  </p><p>  (2).然后将光标移动到最后的位置，按下按钮 i 键，进入编辑模式</p><p>  (3).添加如下语句</p><p>​    <strong>set java environment</strong></p><p>​    <strong>JAVA_HOME=/usr/local/Java/<del>jdk1.8.0_241</del></strong>  </p><p>​    <strong>JRE_HOME=/usr/local/Java/<del>jdk1.8.0_241</del>/jre</strong>  </p><p>​    <strong>CLASS_PATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</strong></p><p>​    <strong>PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</strong></p><p>​    <strong>export JAVA_HOME JRE_HOME CLASS_PATH PATH</strong></p><p>  (注意：删除线包括的部分（jdk1.8.0_241）是由java包解压后的文件名所决定。也就是/usr/local/Java目录下的文件夹。如果Java目录不是安装在/usr/local/Java目录下，请自行更改)</p><p><img src="./22.png" alt="img"></p><p>4.在编辑模式下，按下<strong>Esc</strong>键退出编辑模式，然后在<strong>Shift+:**，进入命令模式，输入</strong>wq<strong>后保存退出。（不保存退出是</strong>q!**）</p><p>5.对修改的配置进行设置生效</p><p>在命令行中输入</p><p><strong>sudo -s</strong></p><p><strong>source /etc/profile</strong></p><p>6.测试Java是否安装成功</p><p>(1.测试javac)</p><p><img src="./23.png" alt="img"></p><p>javac成功示意图</p><p>（2.测试java）</p><p><img src="./24.png" alt="img"></p><p>java成功示意图</p><p>Linux Java环境安装完成。</p><blockquote><p>总结</p></blockquote><p>Java安装较难的地方是难在配置环境变量上面，需要了解环境变量是怎么回事以及如何配置。其它的都还好。</p><p>嘻嘻，写的不好还请大神指点。</p><p>声明:在文章中借鉴了部分百度百科以及CSDN上面的内容。</p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p> &emsp;&emsp;一名想要创建一个属于自己的程序的小菜鸟。 </p><p>另外还想找个小团队，一起努力，一起加油！</p><p>“别把青春插错秧，恋爱哪有学习香”</p><blockquote><p>  联系我</p></blockquote><p><a href="http://wpa.qq.com/msgrd?v=3&uin=417859858&site=qq&menu=yes" title="QQ号">QQ：417859858</a></p><p><a href="mailto:m21211314@qq.com" title="QQ邮箱">邮箱:m21211314@qq.com</a></p><blockquote><p>捐赠</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/about/zfb.jpg" alt="支付宝"></p><p><img src="https://cdn.jsdelivr.net/gh/Teimlz/teimlz.github.io@master/image/docs/about/wx.png" alt="微信"></p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb开发</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是Web"><a href="#什么是Web" class="headerlink" title="什么是Web?"></a>什么是Web?</h2><p>&emsp;&emsp;Web的本意是网的意思，而在计算机领域中，Web则是**万维网WWW(World Wide Web)**的简称，现如今广泛翻译成网络，万维网，互联网等。</p><p>万维网是一个巨大的资源空间。每一个资源都由一个全域的<strong>统一资源标识符（URL）</strong>进行标识，我们可以使用这些标识符，通过<strong>超文本传输协议（HyperText Transfer Protocol,HHTP）</strong>来获取这些资源。所以可以说，万维网或者说是Web是一个通过网络进行互联的超文件系统。</p><h2 id="如何开发一个Web"><a href="#如何开发一个Web" class="headerlink" title="如何开发一个Web?"></a>如何开发一个Web?</h2><p>&emsp;&emsp;一个Web的构成，一般都是由<strong>HTML</strong>作为骨架，<strong>CSS</strong>作为界面渲染，<strong>JavaScript（JS）</strong>作为事件处理构成。开发一个基本的Web是十分简单的，比如说，你现在创建一个文件，后缀名为**.html<strong>或</strong>htm**。将以下代码复制到其中，然后使用浏览器打开，即可完成一个简单的网页。</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    Hello World;<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>然后，你就会发现，浏览器显示了其中的<strong>Hello World</strong>。</p><img src="E:\Teimlz\source\JavaWeb开发\1.png" alt="简单的Web运行结果" style="zoom: 50%;" /><p>&emsp;&emsp;当然，这只是Web中的资源，浏览器通过解析该资源，将各式各样的美丽世界呈现在我们面前。我们如果要将该资源分享给别人，那么，我们就需要通过一个协议了，那就是<strong>HTTP(超文本传输)协议</strong>。</p><h2 id="HTTP-HyperText-Transfer-Protocol-超文本传输协议"><a href="#HTTP-HyperText-Transfer-Protocol-超文本传输协议" class="headerlink" title="HTTP(HyperText Transfer Protocol,超文本传输协议)"></a>HTTP(HyperText Transfer Protocol,超文本传输协议)</h2><p>&emsp;&emsp;了解一个网络协议，必然离不开网络。我们先了解一下<strong>开放式系统互联（Open System Interconnect， OSI）</strong>,简称<strong>OSI参考模型</strong>。其定义了**网络互联的七层框架结构(物理层、数据链路层、网络层、传输层、会话层、表现层、应用层)**。</p><img src="E:\Teimlz\source\JavaWeb开发\2.png" alt="preview" style="zoom: 80%;" /><p>&emsp;&emsp;从图中我们可以看到，HTTP协议是属于OSI模型中的第5，6，7层的。而这三层分别是会话层、表现层、应用层。在现在的一些书中，已经开始使用了<strong>OSI五层模型</strong>（我的教科书上就是OSI五层模型，它将5，6，7层合成了一层，即应用层）。在这里因为篇幅原因，不想写太多，可以看看<a href="https://www.zhihu.com/question/50901704">知乎 如何通俗易懂地讲解网络七层协议？</a>。</p><p>&emsp;&emsp;好了，知道了HTTP处于什么地位，那么我们开始了解？</p><p>​        &emsp;&emsp;你以为我会开始详细的写HTTP？不，我偷懒了。网上明明有那么多，为什么我还要写？</p><p>​                这篇写的不错~：<a href="https://blog.csdn.net/qq_35703848/article/details/103404926">CSDN HTTP、HTTP2.0 详解</a></p><p>​                菜鸟教程？<a href="https://www.runoob.com/http/http-tutorial.html">HTTP教程</a></p><p>&emsp;&emsp;了解了协议后，当然是自己实现协议来玩啊~</p><h2 id="如何使用Java开发Web"><a href="#如何使用Java开发Web" class="headerlink" title="如何使用Java开发Web?"></a>如何使用Java开发Web?</h2><p>&emsp;&emsp;Java是一个<strong>面向对象</strong>的高级语言，它经常浪迹在Web的后台中，负责处理前端JS传递过来的数据。在<strong>Java EE</strong>中，有一个叫做<strong>JSP</strong>的词语。</p><p>&emsp;&emsp;<strong>JSP(Java Server Pages)**是由</strong>Sun Microsystems<strong>公司倡导，许多公司一起参与建立的一种</strong>动态网页技术标准<strong>。与ASP.NET、PHP并列为三大后台编程语言。如果你了解过PHP的话，相信你就会了解</strong>JSP**，简单说一下：在HTML中嵌入Java代码，通过Java使其动态生成HTML。</p><p>&emsp;&emsp;好了，这样，我们就可以使用JSP来进行Web开发。当然，现在JSP似乎过时了？好像都是使用Spring框架+Ajax技术进行开发了？但是，即使过时了，但是我们也要了解，因为这对于Java的Web开发理解是十分重要的，而有些公司，也依旧使用着JSP。</p><h2 id="如何将自己的网站通过网络展示给别人看？"><a href="#如何将自己的网站通过网络展示给别人看？" class="headerlink" title="如何将自己的网站通过网络展示给别人看？"></a>如何将自己的网站通过网络展示给别人看？</h2><p>&emsp;&emsp;</p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>关于Android端的Socket</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>我的Effective Java</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<blockquote><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5></blockquote><p>&emsp;&emsp;在今年的六一八，我买下了《Effective Java》第三版。结果自己到迄今为止才看到前十点。深感惭愧。在这本书中的前十点，让我了解到了如何去编写一些比较优良的代码。于是打算做笔记。下次好复习。</p><blockquote><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5></blockquote><ul><li><p>创建和销毁对象</p><ol><li>使用静态方法代替构造器</li></ol></li></ul>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>使用静态方法代替构造器</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在Java中,经常会见到以下方法:</p><pre><code class="hljs reasonml">String trueStr = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>value<span class="hljs-constructor">Of(<span class="hljs-params">true</span>)</span>; <span class="hljs-comment">//类型转换</span>final String <span class="hljs-literal">[]</span>arrays = &#123;<span class="hljs-string">&quot;Hello World&quot;</span>,<span class="hljs-string">&quot;Hello Effective Java&quot;</span>,<span class="hljs-string">&quot;Hello Effective Java&quot;</span>&#125;;List&lt;String&gt; strings = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(<span class="hljs-params">arrays</span>)</span>; <span class="hljs-comment">//数组转List</span>Calendar instance = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Calendar</span>.</span></span>get<span class="hljs-constructor">Instance()</span>; <span class="hljs-comment">//获取单利对象</span> boolean isEmpty = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">Empty(<span class="hljs-params">str</span>)</span>;<span class="hljs-comment">//判断字符串是否为空</span></code></pre><p>&emsp;&emsp;这些,通常拥有着<code>public</code>,<code>static</code>的特点的方法,能够通过参数或者无参数,创建出需要的对象.</p><p>&emsp;&emsp;这些方法,就是静态工厂方法.通常都躺在我们的工具箱里面,安安静静的等等着我们去调用.<br>(注意,静态工厂方法与设计模式中的工厂方法模式不同.)</p><p>&emsp;&emsp;提供静态工厂方法而不是公有的构造器,这样既有优势,也有劣势.</p><blockquote><p>优势</p></blockquote><ol><li><p>它们拥有名称.<br>如果构造器的参数本身没有确切地描述正被返还的对象,那么具有适当名称的静态工厂会更容易适用,代码也更容易阅读.因为我相信静态方法名应该是十分明确的.</p></li><li><p>不必要每次调用它们的时候都创建一个对象.<br>这使得不可变类(被final声明的类)可以使用预先构建好的实例(对象),或者将构建好的实例缓存起来,进行重复利用,从而避免不必要的重复对象.</p></li><li><p>可以返回原返回类型的任何子类型.<br>这使得我们在选择返回对象的类时,就拥有了更大的灵活性.,这使得API可以返回对象,同时又不会使对象的类变成公有的.</p></li><li><p>可以通过参数的不同,而返回不同的实例.  </p></li><li><p>方法返回的对象所示的类,在编写包含该静态工厂方法的类时可以不存在.</p></li></ol>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一份博客</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h3 id="我的第一份博客"><a href="#我的第一份博客" class="headerlink" title="我的第一份博客"></a>我的第一份博客</h3><p>在今天，我使用了Hexo+Github Pages搭建了这一份自己的静态博客,原本之前是在<a href="https://www.jianshu.com/u/b8e4d58db7d4">简书-筏执</a>上面写博客的，但是后来总想着自己搭建一个博客系统,自己慢慢写,虽然,这样看的人更少了，但是,博客有时候不是写给别人看的，更多的是写给自己，给自己这个粗心大意的人提个醒。</p><p>现如今我以及大三了，再过一年便要出入社会了，回忆起自己在大学的时光里，自己的时间匆匆流过,以前想的大学里面做的事情，现如今一件事情也没有完成，反而觉得越来越远了。</p><p>自己的事情,终究要自己去解决，虽然有时候放弃是最好的选择，但是,当在劫难逃，索性不逃！</p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<h1 id="注解-Annotation"><a href="#注解-Annotation" class="headerlink" title="注解(Annotation)"></a>注解(Annotation)</h1><blockquote><p>什么是注解</p></blockquote><p>&#8195;&#8195;Annotation(注解)是JDK1.5及以后版本引入的。其是一种代码级别的说明，与类、接口、枚举是在同一个层次。可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。</p><p>&#8195;&#8195;作用分类：</p><ol><li>编写文档：通过代码里标识的元数据生成文档【生成文档doc文档】</li><li>代码分析：通过代码里标识的元数据对代码进行分析【使用反射】</li><li>编译检查：通过代码里标识的元数据让编译器能够实现基本的编译检查【Override】</li></ol><blockquote><p>基本内置注解</p></blockquote><p>&#8195;&#8195;基本内置注解是JDK内置的一些注解。</p><ol><li><p>@Override</p><p>说明对覆盖超类中的方法进行标记。 也就是重写方法注解。</p><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;&#125;</code></pre></li><li><p>@Deprecated</p><p>对不应该再使用的类型添加注解。也就是不推荐使用注解。</p><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Target(ElementType.ANNOTATION_TYPE)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Documented &#123;&#125;</code></pre></li><li><p>@SuppressWarnings</p><p>忽略警告信息。</p><p>其参数有：</p><ol><li><p>deprecation，使用了过时的类或方法时的警告</p><pre><code>2. unchecked，执行了未检查的转换时的警告3. fallthrough，当 switch 程序块直接通往下一种情况而没有 break 时的警告4. path，在类路径、源文件路径等中有不存在的路径时的警告5. serial，当在可序列化的类上缺少serialVersionUID 定义时的警告6. finally ，任何 finally 子句不能正常完成时的警告7. all，关于以上所有情况的警告</code></pre></li></ol><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SuppressWarnings &#123;    String[] value();&#125;</code></pre></li><li><p>@SafeVarargs</p><p>JDK1.7新添基本注解。当使用可变数量的参数的时候，而参数的类型又是泛型T的话，就会出现警告。 这个时候，就使用@SafeVarargs来去掉这个警告。</p><p>@SafeVarargs注解只能用在参数长度可变的方法或构造方法上，且方法必须声明为static或final，否则会出现编译错误。一个方法使用@SafeVarargs注解的前提是，开发人员必须确保这个方法的实现中对泛型类型参数的处理不会引发类型安全问题。</p><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Target(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD&#125;)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SafeVarargs &#123;&#125;</code></pre></li></ol><ol start="5"><li><p>@FunctionalInterface</p><p>JDK1.8新添基本注解。用于约定函数式接口。</p><p>函数式接口概念： 如果接口中只有一个抽象方法（可以包含多个默认方法或多个static方法），该接口称为函数式接口。函数式接口其存在的意义，主要是配合Lambda 表达式 来使用。</p><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Target(ElementType.TYPE)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> FunctionalInterface &#123;&#125;</code></pre></li></ol><blockquote><p>元注解</p></blockquote><p>&#8195;&#8195;元注解是注解的注解。其主要是为注解提供一些信息的注解。主要有4种元注解。</p><ol><li><p>@Documented</p><p>为注解提供Javadoc支持。也就是在使用javadoc命令生成API文档后，可以在文档中看到注解说明。</p><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Target(ElementType.ANNOTATION_TYPE)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Documented &#123;&#125;</code></pre></li><li><p>@Target</p><p>该注解用于表示 注解能够放在什么的位置上。用于声明注解范围。其值是一个枚举类型ElementType数组。</p><p>如果没有该注解，则注解可以用于任何地方。</p><pre><code class="hljs Java"><span class="hljs-comment">//注意：以下中文不是翻译！以下中文不是翻译！以下中文不是翻译！</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">ElementType</span> </span>&#123;    <span class="hljs-comment">/** Class, interface (including annotation type), or enum declaration */</span>    <span class="hljs-comment">/** 作用与类，接口(包括注解类型),或者枚举 声明 */</span>    TYPE,    <span class="hljs-comment">/** Field declaration (includes enum constants) */</span>    <span class="hljs-comment">/** 作用与字段(类的成员变量等)，包枚举常量 */</span>    FIELD,    <span class="hljs-comment">/** Method declaration */</span>    <span class="hljs-comment">/** 作用与方法 */</span>    METHOD,    <span class="hljs-comment">/** Formal parameter declaration */</span>    <span class="hljs-comment">/* 作用与方法参数 */</span>    PARAMETER,    <span class="hljs-comment">/** Constructor declaration */</span>    <span class="hljs-comment">/** 作用与构造器 */</span>    CONSTRUCTOR,    <span class="hljs-comment">/** Local variable declaration */</span>    <span class="hljs-comment">/* 作用与局部变量 */</span>    LOCAL_VARIABLE,    <span class="hljs-comment">/** Annotation type declaration */</span>    <span class="hljs-comment">/** 作用与注解 */</span>    ANNOTATION_TYPE,    <span class="hljs-comment">/** Package declaration */</span>    <span class="hljs-comment">/** 作用与包 */</span>    PACKAGE,    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Type parameter declaration</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 1.8</span><span class="hljs-comment">     */</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 类型参数声明 : 作用于类型泛型，即泛型方法、泛型类、泛型接口</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * 作用在1.8及其以上</span><span class="hljs-comment">     */</span>    TYPE_PARAMETER,    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Use of a type</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 1.8</span><span class="hljs-comment">     */</span>     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 使用一个类型 : 可以用于标注任意类型除了 class</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * 作用在1.8及其以上</span><span class="hljs-comment">     */</span>    TYPE_USE&#125;</code></pre><p>例如@Override中，@Target注解中的值就是ElementType.METHOD，也就是只能用于方法上面。</p><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Target(ElementType.ANNOTATION_TYPE)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Target &#123;    ElementType[] value();&#125;</code></pre></li><li><p>@Retention</p><p>注解的保留位置。也可以说是注解的生命周期。其值是一个枚举RetentionPolicy。</p><p>如果没有该注解，则默认保留在Class中</p><pre><code class="hljs Java"><span class="hljs-comment">//注意：以下中文不是翻译！以下中文不是翻译！以下中文不是翻译！</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">RetentionPolicy</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Annotations are to be discarded by the compiler.</span><span class="hljs-comment">     */</span>    <span class="hljs-comment">//注解仅保留在源码中，在Class字节码文件中不会包含</span>    SOURCE,    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Annotations are to be recorded in the class file by the compiler</span><span class="hljs-comment">     * but need not be retained by the VM at run time.  This is the default</span><span class="hljs-comment">     * behavior.</span><span class="hljs-comment">     */</span>    <span class="hljs-comment">//Retention默认值，注解在Class文件中存在，但是在运行时无法获取。</span>    CLASS,    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Annotations are to be recorded in the class file by the compiler and</span><span class="hljs-comment">     * retained by the VM at run time, so they may be read reflectively.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> java.lang.reflect.AnnotatedElement</span><span class="hljs-comment">     */</span>    <span class="hljs-comment">//注解在运行期也存在。可以通过反射进行获取。</span>    RUNTIME&#125;</code></pre><p>@Retention注解就是用于约束注解的生命周期，一般自定义注解都是选择RetentionPolicy.RUNTIME。而且</p><p>RUNTIME &gt; CLASS &gt; SOURCE;如果是运行期存在，那么Class中也必然存在。</p><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Target(ElementType.ANNOTATION_TYPE)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Retention &#123;    <span class="hljs-function">RetentionPolicy <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;&#125;</code></pre></li><li><p>@Inherited</p><p>声明子类可以继承该注解。假如A类使用了该注解，那么A类的子类也会继承此注解。</p><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Target(ElementType.ANNOTATION_TYPE)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Inherited &#123;&#125;</code></pre></li><li><p>@Repeatable</p><p>JDK1.8新添注解。用于声明标记的注解可以多次应用于相同的声明或类型。也就是注解可以同时作用一个对象多次，但是每次作用注解又代表这不同的意义。</p><p>其值是一个class。</p><pre><code class="hljs Java"><span class="hljs-meta">@Documented</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Target(ElementType.ANNOTATION_TYPE)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Repeatable &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Indicates the &lt;em&gt;containing annotation type&lt;/em&gt; for the</span><span class="hljs-comment">     * repeatable annotation type.</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the containing annotation type</span><span class="hljs-comment">     */</span>    Class&lt;? extends Annotation&gt; value();&#125;</code></pre></li></ol><blockquote><p>自定义注解</p></blockquote><ol><li><p>声明一个注解</p><pre><code class="hljs Java"><span class="hljs-meta">@interface</span> 注解名&#123;<span class="hljs-comment">//default 默认值 可以选择不用。 也就是 属性类型 属性名();</span><span class="hljs-comment">//属性 可以 看作是成员变量。</span>属性类型 属性名() <span class="hljs-keyword">default</span> 默认值;&#125;</code></pre><p>例如：</p><pre><code class="hljs Java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 数据库映射表 注解</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Documented</span><span class="hljs-meta">@Target(ElementType.TYPE)</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Table &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 表名</span><span class="hljs-comment">     */</span>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;&#125;</code></pre></li></ol><ol start="2"><li><p>属性类型</p><ol><li>基本数据类型(int,double,float,char,short,long,boolean,byte)</li><li>String类型</li><li>枚举类型</li><li>注解类型</li><li>Class类型</li><li>以上类型的一维数组类型</li></ol></li><li><p>注解的本质</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Annotation</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span></span>;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span></span>;    <span class="hljs-function">String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>;    Class&lt;? extends Annotation&gt; annotationType();&#125;</code></pre><p>注解的本质是一个接口，注解本身就是Annotation的一个子接口，在注解中，我们定义的方法其实就相当于注解的属性(因为接口的属性都是static final的，无法改变，所以使用了方法来代替属性。)，所以，在注解中的成员变量会有括号。不过不同与接口的是，我们可以给注解中的括号进行赋值。</p></li></ol><blockquote><p>注解的使用方法</p></blockquote><p>&#8195;&#8195;根据@Target注解中的注解范围来决定注解在那行地方进行使用。</p><pre><code class="hljs gcode">@注解名<span class="hljs-comment">(属性名 = 属性值,...)</span>类，接口，方法....<span class="hljs-comment">(注意，该部分是由@Target指定的作用范围)</span></code></pre><p>例如我们使用 自定义注解 1.声明一个注解 的例子注解 来对一个用户类进行注解。</p><pre><code class="hljs Java"><span class="hljs-meta">@Table(&quot;db_user&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-comment">/** ....... **/</span>&#125;</code></pre><p>&#8195;&#8195;<strong>注意： 当属性名为value时，可以忽略属性名。</strong>但是如果属性名不是value或者没有默认值的话，那就必须显式使用。</p><blockquote><p>什么是反射</p></blockquote><p>&#8195;&#8195;反射是在运行状态中，对于<strong>任意</strong>一个类，都能够知道这个类的所有属性和方法;对于任意一个对象，都能够调用它的任意一个方法和属性。</p><blockquote><p>Class类</p></blockquote><p>&#8195;&#8195;反射机制的基础。任意一个类在初始化时，都会生成一个Class类型的唯一实例，该实例保存着对应类的所有信息。</p><blockquote><p>反射的使用方法</p></blockquote><p>&emsp;&emsp;反射需要基于Class类,通过Class获取类信息,再通过java.lang.reflect包下的反射类等等进行反射,实现类的实例化,修改类的字段,调用类的方法等等一系列高端操作.下面就是一个极其普通的例子.</p><blockquote><p>反射的简单性能对比</p></blockquote><blockquote><p>注解+反射</p></blockquote><blockquote><p>什么是动态代理</p></blockquote><blockquote><p>JDK实现动态代理</p></blockquote><blockquote><p>注解+动态代理</p></blockquote><blockquote><p>总结</p></blockquote>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>搭建一份属于你的博客吧</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这是一篇使用GitHub Pages + Hexo搭建自己博客的笔记。内容会尽可能的详细,因为怕自己哪天就忘记了。</p><p>&emsp;&emsp;在搭建之前,我们需要了解一下GitHub Pages 和Hexo。</p><h4 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a><a href="https://pages.github.com/">GitHub Pages</a></h4><p>&emsp;&emsp;相信会编程的人都知道一个网站 <a href="https://github.com/">github</a> ，这是一个面向开源及私有软件项目的托管平台。这是一个拥有百万程序员的网站，许多人都将自己的代码开源，并将代码托管给github。而GitHub Pages，则是github提供给用户用来展示个人或者项目主页的静态网页系统。也就是说，自己可以搭建一个静态的网页，将其交给GitHub Pages去呈现。就相当于一个微型服务器啦,重点是，这玩意是免费的.<br><a href="https://pages.github.com/"><img src="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/GitHubPages.png" alt="GitHub Pages" title="GitHub Pages"></a></p><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a><a href="https://hexo.io/zh-cn/index.html">Hexo</a></h4><p>&emsp;&emsp;Hexo是一个快速，简洁且高效的博客框架。其能够根据配置，主题，原始数据能够自动生成静态网页，而且Hexo还支持Github Flavored Markdown的所有功能,，外加一些强大的框架(网站数据统计,评论系统等等)。所以,我们就用Hexo生成静态网页，再将其发布到GitHub Pages上，最后由GitHub Pages展现出来。<br><a href="https://hexo.io/zh-cn/index.html"><img src="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/Hexo.png" alt="Hexo中文网站" title="Hexo中文网站"></a></p><h4 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown"></a><a href="https://markdown.com.cn/">MarkDown</a></h4><p>&emsp;&emsp;MarkDown，这里需要提及一下，因为Hexo的原始博客数据是由MardDown编写的，所以写博客的话需要了解一下MarkDown的语法。那么MarkDown是什么呢？这里引用<a href="https://markdown.com.cn/">MarkDown语法教程</a>的一句话：Markdown是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub 和技术问答网站 StackOverFlow 的御用书写格式。MarkDown可以让你专注你的文字内容而不是排版样式，使其编写出美观，直观可读的文本。<br><a href="https://markdown.com.cn/"><img src="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/MarkDown.png" alt="Markdown语法教程网站" title="MarkDown语法教程网站"></a>‘</p><p>好了，当了解了这些之后，我们便可以开始搭建一下自己的小博客网站了。</p><blockquote><h4 id="1-创建一个GitHub账户"><a href="#1-创建一个GitHub账户" class="headerlink" title="1. 创建一个GitHub账户"></a>1. 创建一个GitHub账户</h4></blockquote><p>&emsp;&emsp;因为GitHub Pages是GitHub提供的，所以我们理所当然的需要一个GitHub账户。创建GitHub是一个很简单的过程，这里也不会多说，就是一个普通的使用邮箱创建账户罢了。<strong>但是需要注意的是，用户名不能随便起哦，一定要想好，想清楚再起哦。一方面是因为GitHUb Pages提供的域名(网站名)是用户名.github.io，另一方面是在GitHub中改用户名很麻烦的。</strong></p><p><a href="https://github.com/join?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=/&source=header-home">点击我创建GitHub账户</a><br><a href="https://github.com/join?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=/&source=header-home"><img src="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/CreateGitHubAccount.png" alt="创建GitHub账户" title="创建GitHub账户"></a></p><blockquote><h4 id="2-登录GitHub网站"><a href="#2-登录GitHub网站" class="headerlink" title="2. 登录GitHub网站"></a>2. 登录GitHub网站</h4></blockquote><p><a href="https://github.com/">点击我登录GitHub网站</a><br><a href="https://github.com/"><img src="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/LoginGitHub.png" alt="登录GitHub账户" title="登录GitHub账户"></a></p><blockquote><h4 id="4-创建一个仓库"><a href="#4-创建一个仓库" class="headerlink" title="4.创建一个仓库"></a>4.创建一个仓库</h4></blockquote><p>&emsp;&emsp;创建一个GitHub仓库，用于搭建GitHub Pages，当然，这个仓库名不能随便乱起，必须是用户名.github.io。<br><img src="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%931.png" alt="创建仓库1" title="创建仓库1"><br><img src="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%932.png" alt="创建仓库2" title="创建仓库2"><br><img src="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%933.png" alt="创建仓库3" title="创建仓库3"></p><p>创建好之后的大概的样子.（因为我已经发布了文件,所以可能不一样。）<br><img src="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%934.png" alt="创建仓库4" title="创建仓库4"></p><blockquote><h4 id="5-下载Node-js"><a href="#5-下载Node-js" class="headerlink" title="5.下载Node.js"></a>5.下载Node.js</h4></blockquote><p>&emsp;&emsp;因为Hexo是需要Node.js环境的，所以我们需要下载安装Node.js。</p><p>&emsp;&emsp;根据<a href="http://nodejs.cn/download/">Node.js下载官网</a>自己选择相对应的Node.js包即可。<br><img src="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/NodeJS1.png" alt="下载Node.js" title="下载Node.js"></p><blockquote><h4 id="6-判断是否环境配置完成"><a href="#6-判断是否环境配置完成" class="headerlink" title="6.判断是否环境配置完成"></a>6.判断是否环境配置完成</h4></blockquote><p>&emsp;&emsp;打开Cmd(命令控制台),然后输入<strong>node -v</strong>,当出现版本号时,则Node.js安装完成.然后输入<strong>npm -v</strong>,检测npm包管理器是否正常.</p><p>如下图所示<br><img src="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E6%A3%80%E6%B5%8BNodeJS%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" alt="检测NodeJS是否安装完成" title="检测NodeJS是否安装完成"></p><p>当然,也可以点击以下链接了解以下</p><p><a href="https://jingyan.baidu.com/article/20095761e58096cb0721b4fc.html">百度知道-如何检查Node.js是否安装正常</a></p><p><a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">菜鸟教程-Node.js 安装配置</a></p><p><a href="https://www.cnblogs.com/xt-Corrine/p/10812503.html">博客园-Node.js安装及环境配置</a></p><blockquote><h4 id="7-安装Hexo"><a href="#7-安装Hexo" class="headerlink" title="7.安装Hexo"></a>7.安装Hexo</h4></blockquote><p>&emsp;&emsp;推荐查看<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>进行学习.安装Hexo很简单,只需要打开Cmd,然后输入<strong>npm install -g hexo-cli</strong>,回车即可.然后不出意外的话,一会儿就会安装完成(因为我已经安装过一次了,所以也没办法截图.).然后我们检测一下Hexo是否安装成功.</p><p>&emsp;&emsp;我们在Cmd中,输入<strong>hexo -v</strong>,回车后会出现Hexo版本的一些信息.(如果没有的话,就输入<strong>npx hexo -v</strong>.因为Hexo的环境变量没有配置好,所以就无法直接使用hexo指令,不过我们完全可以使用npx来调用执行hexo.)</p><p>如图<br><a href="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E6%A3%80%E6%B5%8BHexo%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" title="检测Hexo是否安装完成">!检测Hexo是否安装完成</a></p><p>可以看看这些博客</p><p><a href="https://www.jianshu.com/p/09875c4a629c">简书-hexo安装与配置</a></p><blockquote><h4 id="8-安装Git"><a href="#8-安装Git" class="headerlink" title="8.安装Git"></a>8.安装Git</h4></blockquote><p>&emsp;&emsp;因为Hexo生成的静态网页文件需要上传到Github上面,所以Git当然是必不可少的啦.我们需要安装Git.(同上,Git已经安装过了,所以没办法截图.不过需要注意的是,Git下载有个PortableGit,这是一个免安装版本,下载后运行,选择安装目录,然后配置环境就可以使用了.方便了许多.)</p><p><a href="https://git-scm.com/downloads">Git下载官网</a></p><p><a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝的Git镜像网站</a></p><p>(<strong>推荐使用淘宝的Git镜像网站,下载会快一点,往下面拉,选择最新版本哦~</strong>)</p><p>可以看看这些博客</p><p><a href="https://www.jianshu.com/p/bebba0d8038e">简书-Git安装教程（详细）</a></p><p><a href="https://www.cnblogs.com/ximiaomiao/p/7140456.html">博客园-Git安装和使用</a></p><p><a href="https://www.runoob.com/git/git-tutorial.html">菜鸟教程-Git</a></p><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496">廖雪峰的官方网站-Git教程中的安装Git</a></p><blockquote><h4 id="9-初始化Hexo博客目录"><a href="#9-初始化Hexo博客目录" class="headerlink" title="9.初始化Hexo博客目录"></a>9.初始化Hexo博客目录</h4></blockquote><p>&emsp;&emsp;打开一个文件目录.选中你心仪的文件夹.例如我选择了D盘,初始化一个名为blog的博客目录.就是在Cmd命令中,输入<strong>hexo init blog</strong>或者<strong>npx hexo init blog</strong>,进行初始化博客目录.这时,hexo就开始下载.下载完成后,就自动帮你创建一个名为blog的文件夹.</p><p><a href="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E5%88%9D%E5%A7%8B%E5%8C%96Hexo%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95%E4%B8%AD.png" title="初始化Hexo博客目录中">!初始化Hexo博客目录中</a><br><a href="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E5%88%9D%E5%A7%8B%E5%8C%96Hexo%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95%E5%AE%8C%E6%88%90.png" title="初始化Hexo博客目录完成">!初始化Hexo博客目录完成</a></p><blockquote><h4 id="10-修改Hexo的配置文件"><a href="#10-修改Hexo的配置文件" class="headerlink" title="10.修改Hexo的配置文件"></a>10.修改Hexo的配置文件</h4></blockquote><p>&emsp;&emsp;推荐查看<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>进行学习配置Hexo的配置文件.在博客目录中,有着一个_config.yml文件,这个文件就是Hexo的配置文件.</p><p>&emsp;&emsp;我的Hexo配置文件</p><pre><code class="hljs yaml"><span class="hljs-comment"># Hexo Configuration</span><span class="hljs-comment">## Docs: https://hexo.io/docs/configuration.html</span><span class="hljs-comment">## Source: https://github.com/hexojs/hexo/</span><span class="hljs-comment"># Site</span><span class="hljs-attr">title:</span> <span class="hljs-string">筏执的小课本</span> <span class="hljs-comment">#网站标题</span><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;青春激昂,裙角撩人&#x27;</span> <span class="hljs-comment">#网站副标题</span><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#网站描述</span><span class="hljs-attr">keywords:</span> <span class="hljs-comment">#网站的关键词。支援多个关键词。</span><span class="hljs-attr">author:</span> <span class="hljs-string">筏执</span> <span class="hljs-comment">#您的名字</span><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span> <span class="hljs-comment">#网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。</span><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;UTC&#x27;</span> <span class="hljs-comment">#网站时区。Hexo 默认使用您电脑的时区。请参考 时区列表 进行设置，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。</span><span class="hljs-comment"># URL</span><span class="hljs-comment">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span><span class="hljs-attr">url:</span> <span class="hljs-string">http://example.com</span> <span class="hljs-comment">#网址, must starts with http:// or https://</span><span class="hljs-attr">root:</span> <span class="hljs-string">/</span> <span class="hljs-comment">#网站根目录</span><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span> <span class="hljs-comment">#文章的 永久链接 格式</span><span class="hljs-attr">permalink_defaults:</span> <span class="hljs-comment">#永久链接中各部分的默认值</span><span class="hljs-attr">pretty_urls:</span> <span class="hljs-comment">#改写 permalink 的值来美化 URL</span>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks(是否在永久链接中保留尾部的 index.html，设置为 false 时去除)</span>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks(是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效))</span><span class="hljs-comment"># Directory</span><span class="hljs-attr">source_dir:</span> <span class="hljs-string">source</span> <span class="hljs-comment">#资源文件夹，这个文件夹用来存放内容</span><span class="hljs-attr">public_dir:</span> <span class="hljs-string">public</span> <span class="hljs-comment">#公共文件夹，这个文件夹用于存放生成的站点文件。</span><span class="hljs-attr">tag_dir:</span> <span class="hljs-string">tags</span> <span class="hljs-comment">#标签文件夹</span><span class="hljs-attr">archive_dir:</span> <span class="hljs-string">archives</span> <span class="hljs-comment">#归档文件夹</span><span class="hljs-attr">category_dir:</span> <span class="hljs-string">categories</span> <span class="hljs-comment">#分类文件夹</span><span class="hljs-attr">code_dir:</span> <span class="hljs-string">downloads/code</span> <span class="hljs-comment">#Include code 文件夹，source_dir 下的子目录</span><span class="hljs-attr">i18n_dir:</span> <span class="hljs-string">:lang</span> <span class="hljs-comment">#国际化（i18n）文件夹</span><span class="hljs-comment">#skip_render：跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 public 目录中。您可使用 glob 表达式来匹配路径。</span><span class="hljs-comment">#skip_render: &quot;mypage/**/*&quot;</span><span class="hljs-comment"># 将会直接将 `source/mypage/index.html` 和 `source/mypage/code.js` 不做改动地输出到 &#x27;public&#x27; 目录</span><span class="hljs-comment"># 你也可以用这种方法来跳过对指定文章文件的渲染</span><span class="hljs-comment">#skip_render: &quot;_posts/test-post.md&quot;</span><span class="hljs-comment"># 这将会忽略对 &#x27;test-post.md&#x27; 的渲染</span><span class="hljs-comment">#如果您刚刚开始接触 Hexo，通常没有必要修改这一部分的值。</span><span class="hljs-attr">skip_render:</span>                     <span class="hljs-comment"># Writing</span><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:title.md</span> <span class="hljs-comment"># File name of new posts(新文章的文件名称)</span><span class="hljs-attr">default_layout:</span> <span class="hljs-string">post</span> <span class="hljs-comment">#(预设布局)</span><span class="hljs-attr">auto_spacing:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#在中文和英文之间加入空格</span><span class="hljs-attr">titlecase:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Transform title into titlecase #(把标题转换为 title case)</span><span class="hljs-attr">external_link:</span> <span class="hljs-comment">#在新标签中打开链接</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Open external links in new tab(对整个网站（site）生效或仅对文章（post）生效)</span>  <span class="hljs-attr">field:</span> <span class="hljs-string">site</span> <span class="hljs-comment"># Apply to the whole site(对整个网站（site）生效或仅对文章（post）生效)</span>  <span class="hljs-attr">exclude:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">#需要排除的域名。主域名和子域名如 www 需分别配置</span><span class="hljs-attr">filename_case:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#把文件名称转换为 (1) 小写或 (2) 大写 (0)不需要</span><span class="hljs-attr">render_drafts:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#显示草稿</span><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#启动 Asset 文件夹</span><span class="hljs-attr">relative_link:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#把链接改为与根目录的相对位址</span><span class="hljs-attr">future:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#显示未来的文章</span><span class="hljs-attr">highlight:</span> <span class="hljs-comment">#代码块的设置</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">false</span><span class="hljs-attr">prismjs:</span> <span class="hljs-comment">#代码块的设置, see PrismJS section for usage guide</span>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#默认情况下，Hexo 生成的超链接都是绝对地址。</span><span class="hljs-comment">#例如，如果您的网站域名为 example.com,您有一篇文章名为 hello，那么绝对链接可能像这样：http://example.com/hello.html，它是绝对于域名的。</span><span class="hljs-comment">#相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</span><span class="hljs-comment"># Home page setting</span><span class="hljs-comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)(您的博客索引页的根路径。)</span><span class="hljs-comment"># per_page: Posts displayed per page. (0 = disable pagination)(每页显示的文章。(0 =禁用分页))</span><span class="hljs-comment"># order_by: Posts order. (Order by date descending by default)(文章的顺序。(默认按日期降序排列))</span><span class="hljs-attr">index_generator:</span>  <span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;&#x27;</span>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><span class="hljs-comment"># Category &amp; Tag</span><span class="hljs-attr">default_category:</span> <span class="hljs-string">uncategorized</span> <span class="hljs-comment">#默认分类</span><span class="hljs-attr">category_map:</span> <span class="hljs-comment">#分类别名</span><span class="hljs-attr">tag_map:</span> <span class="hljs-comment">#标签别名</span><span class="hljs-comment"># Metadata elements</span><span class="hljs-comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span><span class="hljs-attr">meta_generator:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># Date / Time format</span><span class="hljs-comment">## Hexo uses Moment.js to parse and display date</span><span class="hljs-comment">## You can customize the date format as defined in</span><span class="hljs-comment">## http://momentjs.com/docs/#/displaying/format/</span><span class="hljs-attr">date_format:</span> <span class="hljs-string">YYYY-MM-DD</span> <span class="hljs-comment">#日期格式</span><span class="hljs-attr">time_format:</span> <span class="hljs-string">HH:mm:ss</span> <span class="hljs-comment">#时间格式</span><span class="hljs-comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span><span class="hljs-attr">updated_option:</span> <span class="hljs-string">&#x27;mtime&#x27;</span> <span class="hljs-comment">#(当Front Matter 中没有指定updated时updated的取值)</span><span class="hljs-comment"># Pagination</span><span class="hljs-comment">## Set per_page to 0 to disable pagination</span><span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span> <span class="hljs-comment">#每页显示的文章量(0为关闭分页功能)</span><span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">page</span> <span class="hljs-comment">#分页目录</span><span class="hljs-comment"># Include / Exclude file(s)</span><span class="hljs-comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span><span class="hljs-comment">#include配置：</span><span class="hljs-comment">## Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 . 开头的文件和文件夹，Hexo 的 _posts 和 _data 等目录除外）。</span><span class="hljs-comment">## 通过设置此字段将使 Hexo 处理他们并将它们复制到 source 目录下。</span><span class="hljs-comment"># 举例</span><span class="hljs-comment"># Include/Exclude Files/Folders</span><span class="hljs-comment"># include:</span><span class="hljs-comment">#  - &quot;.nojekyll&quot;</span><span class="hljs-comment"># # 包括 &#x27;source/css/_typing.css&#x27;</span><span class="hljs-comment">#  - &quot;css/_typing.css&quot;</span><span class="hljs-comment">#  # 包括 &#x27;source/_css/&#x27; 中的任何文件，但不包括子目录及其其中的文件。</span><span class="hljs-comment">#  - &quot;_css/*&quot;</span><span class="hljs-comment">#  # 包含 &#x27;source/_css/&#x27; 中的任何文件和子目录下的任何文件</span><span class="hljs-comment">#  - &quot;_css/**/*&quot;</span><span class="hljs-comment">#</span><span class="hljs-comment">#exclude:</span><span class="hljs-comment">#  # 不包括 &#x27;source/js/test.js&#x27;</span><span class="hljs-comment">#  - &quot;js/test.js&quot;</span><span class="hljs-comment">#  # 不包括 &#x27;source/js/&#x27; 中的文件、但包括子目录下的所有目录和文件</span><span class="hljs-comment">#  - &quot;js/*&quot;</span><span class="hljs-comment">#  # 不包括 &#x27;source/js/&#x27; 中的文件和子目录下的任何文件</span><span class="hljs-comment">#  - &quot;js/**/*&quot;</span><span class="hljs-comment">#  # 不包括 &#x27;source/js/&#x27; 目录下的所有文件名以 &#x27;test&#x27; 开头的文件，但包括其它文件和子目录下的单文件</span><span class="hljs-comment">#  - &quot;js/test*&quot;</span><span class="hljs-comment">#  # 不包括 &#x27;source/js/&#x27; 及其子目录中任何以 &#x27;test&#x27; 开头的文件</span><span class="hljs-comment">#  - &quot;js/**/test*&quot;</span><span class="hljs-comment">#  # 不要用 exclude 来忽略 &#x27;source/_posts/&#x27; 中的文件。你应该使用 &#x27;skip_render&#x27;，或者在要忽略的文件的文件名之前加一个下划线 &#x27;_&#x27;</span><span class="hljs-comment">#  # 在这里配置一个 - &quot;_posts/hello-world.md&quot; 是没有用的。</span><span class="hljs-comment">#</span><span class="hljs-comment">#ignore:</span><span class="hljs-comment">#  # Ignore any folder named &#x27;foo&#x27;.</span><span class="hljs-comment">#  - &quot;**/foo&quot;</span><span class="hljs-comment">#  # Ignore &#x27;foo&#x27; folder in &#x27;themes/&#x27; only.</span><span class="hljs-comment">#  - &quot;**/themes/*/foo&quot;</span><span class="hljs-comment">#  # Same as above, but applies to every subfolders of &#x27;themes/&#x27;.</span><span class="hljs-comment">#  - &quot;**/themes/**/foo&quot;</span><span class="hljs-attr">include:</span><span class="hljs-attr">exclude:</span> <span class="hljs-comment">#Hexo 会忽略这些文件和目录</span><span class="hljs-attr">ignore:</span> <span class="hljs-comment">#Ignore files/folders</span><span class="hljs-comment"># Extensions</span><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><span class="hljs-attr">theme:</span> <span class="hljs-string">landscape</span> <span class="hljs-comment">#当前主题名称。值为false时禁用主题</span><span class="hljs-comment">#theme_config：#主题的配置文件。在这里放置的配置会覆盖主题目录下的 _config.yml 中的配置</span><span class="hljs-comment"># Deployment</span><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="hljs-comment">##(部署部分的设置)</span><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repo:</span> <span class="hljs-comment">#git的链接</span>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span></code></pre><blockquote><h4 id="11-Hexo的一些命令了解和使用"><a href="#11-Hexo的一些命令了解和使用" class="headerlink" title="11.Hexo的一些命令了解和使用"></a>11.Hexo的一些命令了解和使用</h4></blockquote><p>&emsp;&emsp;在进入Hexo博客目录之前,我们在Cmd中输入<strong>hexo help</strong>,就弹出了如下的信息.<br><a href="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/Hexo%E6%9C%AA%E8%BF%9B%E5%85%A5%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8C%87%E4%BB%A4.png" title="Hexo未进入博客目录中的一些指令">!Hexo未进入博客目录中的一些指令</a></p><p>1.hexo help : 弹出帮助指令</p><p>2.hexo init 博客目录名: 初始化博客目录</p><p>3.hexo version : hexo版本信息</p><p>&emsp;&emsp;在进入Hexo博客目录之后,我们在Cmd中输入<strong>hexo help</strong>,就弹出了如下的信息.</p><p><a href="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/Hexo%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8C%87%E4%BB%A4.png" title="Hexo博客目录中的一些指令">!Hexo博客目录中的一些指令.png</a></p><ol><li><p>hexo clean : 清除生成的博客网站信息包括文件</p></li><li><p>hexo config : 查看配置文件</p></li><li><p>hexo deploy : 部署你的网站</p></li><li><p>hexo generate : 生成静态博客网站文件</p></li><li><p>hexo help : 帮助</p></li><li><p>hexo init : 初始化博客目录</p></li><li><p>hexo list : 列出站点信息</p></li><li><p>hexo migrate : 将您的站点从其他系统迁移到Hexo</p></li><li><p>hexo new 文章名 : 创建一个post类型的文章</p></li><li><p>hexo server : 开启服务器预览</p></li></ol><p>&emsp;&emsp;主要的还是<strong>hexo clean</strong>,<strong>hexo deploy</strong>,<strong>hexo generate</strong>,<strong>hexo server</strong>,<strong>hexo new 文章名</strong>.这些.</p><ol><li><p>当生成静态博客时,推荐使用<strong>hexo clean &amp; hexo generate</strong> 或 <strong>hexo clean &amp; hexo g</strong>;</p></li><li><p>当生成静态博客并且预览时,推荐使用<strong>hexo clean &amp; hexo generate &amp; hexo server</strong> 或 <strong>hexo clean &amp; hexo g &amp; hexo s</strong>;</p></li><li><p>当生成静态博客并且部署时,推荐使用<strong>hexo clean &amp; hexo generate &amp; hexo deploy</strong> 或 <strong>hexo clean &amp; hexo g &amp; hexo d</strong>;</p></li></ol><blockquote><h4 id="12-使用Hexo生成文章"><a href="#12-使用Hexo生成文章" class="headerlink" title="12.使用Hexo生成文章"></a>12.使用Hexo生成文章</h4></blockquote><p>&emsp;&emsp;在博客目录下,使用Cmd,输入<strong>hexo new 文章名</strong>或者<strong>npx hexo new 文章名</strong>,即可创建一个文章,然后在<strong>source</strong>的目录下,找到<strong>_post</strong>目录下带有文章名.md文件,打开编辑即可.<br><a href="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/hexo%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E6%96%87%E7%AB%A0.png" title="hexo创建新的文章">!hexo创建新的文章</a><br><a href="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/hexo%E7%94%9F%E6%88%90%E7%9A%84%E6%96%87%E7%AB%A0%E6%89%80%E5%9C%A8%E5%9C%B0.png" title="hexo生成的文章所在地">!hexo生成的文章所在地</a></p><p>&emsp;&emsp;然后编辑md文件即可，如果需要删除文章，只需要删除文件即可。</p><blockquote><h4 id="13-部署Hexo博客到GitHub-Pages上面"><a href="#13-部署Hexo博客到GitHub-Pages上面" class="headerlink" title="13.部署Hexo博客到GitHub Pages上面"></a>13.部署Hexo博客到GitHub Pages上面</h4></blockquote><p>&emsp;&esmp;在部署之前，我们需要先在博客目录下，打开cmd，输入<strong>npm install hexo-deployer-git –save</strong>安装插件。然后在博客目录找到<strong>_config.yml</strong>文件,打开,找到以下信息:</p><pre><code class="hljs clean"># Deployment## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span>deploy:</code></pre><p>修改成这样</p><pre><code class="hljs dts"><span class="hljs-meta"># Deployment</span><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment</span></span><span class="hljs-symbol">deploy:</span><span class="hljs-symbol">  type:</span> git<span class="hljs-symbol">  repo:</span> GitHub仓库的git地址<span class="hljs-symbol">  branch:</span> master</code></pre><p>GitHub仓库的git地址查看方式</p><p><img src="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E8%8E%B7%E5%8F%96Git%E5%9C%B0%E5%9D%801.png" alt="获取Git地址1" title="获取Git地址1"><br><img src="../image/docs/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%BB%BD%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%90%A7/%E8%8E%B7%E5%8F%96Git%E5%9C%B0%E5%9D%802.png" alt="获取Git地址2" title="获取Git地址2"></p><p>修改完成配置完成后,保存,然后执行 <strong>hexo clean &amp; hexo g &amp; hexo d</strong>即可生成静态网站.</p><blockquote><h4 id="14-主题"><a href="#14-主题" class="headerlink" title="14.主题"></a>14.主题</h4></blockquote><p>&emsp;&emsp;我使用的是fluid主题.这是<a href="https://github.com/fluid-dev/hexo-theme-fluid">地址</a>,这里就不再累赘了.</p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>关于C++中fstream使用(ios::in|ios::out)在当文件不存在时不创建文件而是打开错误</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<blockquote><p>起因</p></blockquote><p>&emsp;&emsp;今天晚上本来闲聊的时候,突然滴滴的一声,我的小眼睛一瞟,哦~,原来是学弟在群里面问问题,本着学长的心态,依然义无反顾的点击进去,准备好好的回答一下学弟的小问题,结果,自己学艺不精,被难倒了.于是,就有了这一次记录.</p><blockquote><p>学弟的问题</p></blockquote><p>&emsp;&emsp;<strong>为什么fstream在使用ios::in|ios::out|ios::binary打开文件(文件不存在)时,不会创建文件,且打开文件失败.</strong></p><p><img src="%22./option1.jpg%22" alt="图1"></p><p><img src="%22./option2.jpg%22" alt="图2"></p><blockquote><p>解决问题</p></blockquote><p>&emsp;&emsp;起初,本以为是因为ios::in的问题,猜测可能是先使用了ios::in,结果文件不存在,导致文件打开失败,然后直接返回,而忽略了ios::out的文件不存在则创建文件.然后,总感觉哪里不对,于是,我决定去源文件中去看看到底是为什么导致了文件无法创建.</p><p>&emsp;&emsp;首先是去头文件中查看以下,以下是fstream的部分代码(只挑选了一些比较重要的代码,外加删除了一点点.):</p><pre><code class="hljs sqf"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _GLIBCXX_FSTREAM</span><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _GLIBCXX_FSTREAM 1</span><span class="hljs-meta">#pragma GCC system_header</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;istream&gt;             //输入流头文件</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ostream&gt;             //输出流头文件</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/codecvt.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;             // For BUFSIZ</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/basic_file.h&gt;  // For __basic_file, __c_lock</span></span><span class="hljs-meta">#if __cplusplus &gt;= 201103L</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;             // For std::string overloads.</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><span class="hljs-comment">//basic_filebuf类,继承的basic_streambuf类</span><span class="hljs-comment">// [27.8.1.1] template class basic_filebuf</span><span class="hljs-comment">/**</span><span class="hljs-comment"> *  @brief  The actual work of input and output (for files).</span><span class="hljs-comment"> *  @ingroup io</span><span class="hljs-comment"> *</span><span class="hljs-comment"> *  @tparam _CharT  Type of character stream.</span><span class="hljs-comment"> *  @tparam _Traits  Traits for character type, defaults to</span><span class="hljs-comment"> *                   char_traits&lt;_CharT&gt;.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> *  This class associates both its input and output sequence with an</span><span class="hljs-comment"> *  external disk file, and maintains a joint file position for both</span><span class="hljs-comment"> *  sequences.  Many of its semantics are described in terms of similar</span><span class="hljs-comment"> *  behavior in the Standard C Library&#x27;s @c FILE streams.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> *  Requirements on traits_type, specific to this class:</span><span class="hljs-comment"> *  - traits_type::pos_type must be fpos&lt;traits_type::state_type&gt;</span><span class="hljs-comment"> *  - traits_type::off_type must be streamoff</span><span class="hljs-comment"> *  - traits_type::state_type must be Assignable and DefaultConstructible,</span><span class="hljs-comment"> *  - traits_type::state_type() must be the initial state for codecvt.</span><span class="hljs-comment"> */</span>template&lt;<span class="hljs-built_in">typename</span> <span class="hljs-variable">_CharT</span>, <span class="hljs-built_in">typename</span> <span class="hljs-variable">_Traits</span>&gt;  class basic_filebuf : public basic_streambuf&lt;<span class="hljs-variable">_CharT</span>, <span class="hljs-variable">_Traits</span>&gt;  &#123;  public:    <span class="hljs-comment">// Types:</span>    typedef <span class="hljs-variable">_CharT</span>                             char_type;    typedef <span class="hljs-variable">_Traits</span>                            traits_type;    typedef <span class="hljs-built_in">typename</span> traits_type::int_type int_type;    typedef <span class="hljs-built_in">typename</span> traits_type::pos_type pos_type;    typedef <span class="hljs-built_in">typename</span> traits_type::off_type off_type;    typedef basic_streambuf&lt;char_type, traits_type&gt;  <span class="hljs-variable">__streambuf_type</span>;    typedef basic_filebuf&lt;char_type, traits_type&gt;     <span class="hljs-variable">__filebuf_type</span>;    typedef <span class="hljs-variable">__basic_file</span>&lt;char&gt;        <span class="hljs-variable">__file_type</span>;    typedef <span class="hljs-built_in">typename</span> traits_type::state_type          <span class="hljs-variable">__state_type</span>;    typedef codecvt&lt;char_type, char, <span class="hljs-variable">__state_type</span>&gt;    <span class="hljs-variable">__codecvt_type</span>;    friend class ios_base; <span class="hljs-comment">// For sync_with_stdio.</span>  protected:    <span class="hljs-comment">// Data Members:</span>    <span class="hljs-comment">// MT lock inherited from libio or other low-level io library.</span>    <span class="hljs-variable">__c_lock</span>          <span class="hljs-variable">_M_lock</span>;    <span class="hljs-comment">// External buffer.</span>    <span class="hljs-variable">__file_type</span> <span class="hljs-variable">_M_file</span>;    <span class="hljs-comment">/// Place to stash in || out || in | out settings for current filebuf.</span>    ios_base::openmode <span class="hljs-variable">_M_mode</span>;    <span class="hljs-comment">// Beginning state type for codecvt.</span>    <span class="hljs-variable">__state_type</span> <span class="hljs-variable">_M_state_beg</span>;    <span class="hljs-comment">// During output, the state that corresponds to pptr(),</span>    <span class="hljs-comment">// during input, the state that corresponds to egptr() and</span>    <span class="hljs-comment">// _M_ext_next.</span>    <span class="hljs-variable">__state_type</span><span class="hljs-variable">_M_state_cur</span>;    <span class="hljs-comment">// Not used for output. During input, the state that corresponds</span>    <span class="hljs-comment">// to eback() and _M_ext_buf.</span>    <span class="hljs-variable">__state_type</span><span class="hljs-variable">_M_state_last</span>;    <span class="hljs-comment">/// Pointer to the beginning of internal buffer.</span>    char_type*<span class="hljs-variable">_M_buf</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Actual size of internal buffer. This number is equal to the size</span><span class="hljs-comment">     *  of the put area + 1 position, reserved for the overflow char of</span><span class="hljs-comment">     *  a full area.</span><span class="hljs-comment">     */</span>    size_t<span class="hljs-variable">_M_buf_size</span>;    <span class="hljs-comment">// Set iff _M_buf is allocated memory from _M_allocate_internal_buffer.</span>    bool<span class="hljs-variable">_M_buf_allocated</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  _M_reading == false &amp;&amp; _M_writing == false for @b uncommitted mode;</span><span class="hljs-comment">     *  _M_reading == true for @b read mode;</span><span class="hljs-comment">     *  _M_writing == true for @b write mode;</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  NB: _M_reading == true &amp;&amp; _M_writing == true is unused.</span><span class="hljs-comment">     */</span>    bool                      <span class="hljs-variable">_M_reading</span>;    bool                      <span class="hljs-variable">_M_writing</span>;    <span class="hljs-comment">//@&#123;</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Necessary bits for putback buffer management.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  @note pbacks of over one character are not currently supported.</span><span class="hljs-comment">     */</span>    char_type<span class="hljs-variable">_M_pback</span>;    char_type*<span class="hljs-variable">_M_pback_cur_save</span>;    char_type*<span class="hljs-variable">_M_pback_end_save</span>;    bool<span class="hljs-variable">_M_pback_init</span>;    <span class="hljs-comment">//@&#125;</span>    <span class="hljs-comment">// Cached codecvt facet.</span>    const <span class="hljs-variable">__codecvt_type</span>* <span class="hljs-variable">_M_codecvt</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Buffer for external characters. Used for input when</span><span class="hljs-comment">     *  codecvt::always_noconv() == false. When valid, this corresponds</span><span class="hljs-comment">     *  to eback().</span><span class="hljs-comment">     */</span>    char*<span class="hljs-variable">_M_ext_buf</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Size of buffer held by _M_ext_buf.</span><span class="hljs-comment">     */</span>    streamsize<span class="hljs-variable">_M_ext_buf_size</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Pointers into the buffer held by _M_ext_buf that delimit a</span><span class="hljs-comment">     *  subsequence of bytes that have been read but not yet converted.</span><span class="hljs-comment">     *  When valid, _M_ext_next corresponds to egptr().</span><span class="hljs-comment">     */</span>    const char*<span class="hljs-variable">_M_ext_next</span>;    char*<span class="hljs-variable">_M_ext_end</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Initializes pback buffers, and moves normal buffers to safety.</span><span class="hljs-comment">     *  Assumptions:</span><span class="hljs-comment">     *  _M_in_cur has already been moved back</span><span class="hljs-comment">     */</span>    void    <span class="hljs-variable">_M_create_pback</span>()    &#123;<span class="hljs-keyword">if</span> (!<span class="hljs-variable">_M_pback_init</span>)  &#123;    <span class="hljs-variable">_M_pback_cur_save</span> = this-&gt;gptr();    <span class="hljs-variable">_M_pback_end_save</span> = this-&gt;egptr();    this-&gt;setg(&amp;<span class="hljs-variable">_M_pback</span>, &amp;<span class="hljs-variable">_M_pback</span>, &amp;<span class="hljs-variable">_M_pback</span> + <span class="hljs-number">1</span>);    <span class="hljs-variable">_M_pback_init</span> = <span class="hljs-literal">true</span>;  &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Deactivates pback buffer contents, and restores normal buffer.</span><span class="hljs-comment">     *  Assumptions:</span><span class="hljs-comment">     *  The pback buffer has only moved forward.</span><span class="hljs-comment">     */</span>    void    <span class="hljs-variable">_M_destroy_pback</span>() <span class="hljs-keyword">throw</span>()    &#123;<span class="hljs-keyword">if</span> (<span class="hljs-variable">_M_pback_init</span>)  &#123;    <span class="hljs-comment">// Length _M_in_cur moved in the pback buffer.</span>    <span class="hljs-variable">_M_pback_cur_save</span> += this-&gt;gptr() != this-&gt;eback();    this-&gt;setg(<span class="hljs-variable">_M_buf</span>, <span class="hljs-variable">_M_pback_cur_save</span>, <span class="hljs-variable">_M_pback_end_save</span>);    <span class="hljs-variable">_M_pback_init</span> = <span class="hljs-literal">false</span>;  &#125;    &#125;  public:    <span class="hljs-comment">// Constructors/destructor:</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Does not open any files.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  The default constructor initializes the parent class using its</span><span class="hljs-comment">     *  own default ctor.</span><span class="hljs-comment">     */</span>    basic_filebuf();    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  The destructor closes the file first.</span><span class="hljs-comment">     */</span>    virtual    ~basic_filebuf()    &#123; this-&gt;close(); &#125;    <span class="hljs-comment">// Members:</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Returns true if the external file is open.</span><span class="hljs-comment">     */</span>    bool    is_open() const <span class="hljs-keyword">throw</span>()    &#123; return <span class="hljs-variable">_M_file</span>.is_open(); &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Opens an external file.</span><span class="hljs-comment">     *  @param  __s  The name of the file.</span><span class="hljs-comment">     *  @param  __mode  The open mode flags.</span><span class="hljs-comment">     *  @return  @c this on success, NULL on failure</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If a file is already open, this function immediately fails.</span><span class="hljs-comment">     *  Otherwise it tries to open the file named @a __s using the flags</span><span class="hljs-comment">     *  given in @a __mode.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  Table 92, adapted here, gives the relation between openmode</span><span class="hljs-comment">     *  combinations and the equivalent @c fopen() flags.</span><span class="hljs-comment">     *  (NB: lines app, in|out|app, in|app, binary|app, binary|in|out|app,</span><span class="hljs-comment">     *  and binary|in|app per DR 596)</span><span class="hljs-comment">     *  &lt;pre&gt;</span><span class="hljs-comment">     *  +---------------------------------------------------------+</span><span class="hljs-comment">     *  | ios_base Flag combination            stdio equivalent   |</span><span class="hljs-comment">     *  |binary  in  out  trunc  app                              |</span><span class="hljs-comment">     *  +---------------------------------------------------------+</span><span class="hljs-comment">     *  |             +                        w                  |</span><span class="hljs-comment">     *  |             +           +            a                  |</span><span class="hljs-comment">     *  |                         +            a                  |</span><span class="hljs-comment">     *  |             +     +                  w                  |</span><span class="hljs-comment">     *  |         +                            r                  |</span><span class="hljs-comment">     *  |         +   +                        r+                 |</span><span class="hljs-comment">     *  |         +   +     +                  w+                 |</span><span class="hljs-comment">     *  |         +   +           +            a+                 |</span><span class="hljs-comment">     *  |         +               +            a+                 |</span><span class="hljs-comment">     *  +---------------------------------------------------------+</span><span class="hljs-comment">     *  |   +         +                        wb                 |</span><span class="hljs-comment">     *  |   +         +           +            ab                 |</span><span class="hljs-comment">     *  |   +                     +            ab                 |</span><span class="hljs-comment">     *  |   +         +     +                  wb                 |</span><span class="hljs-comment">     *  |   +     +                            rb                 |</span><span class="hljs-comment">     *  |   +     +   +                        r+b                |</span><span class="hljs-comment">     *  |   +     +   +     +                  w+b                |</span><span class="hljs-comment">     *  |   +     +   +           +            a+b                |</span><span class="hljs-comment">     *  |   +     +               +            a+b                |</span><span class="hljs-comment">     *  +---------------------------------------------------------+</span><span class="hljs-comment">     *  &lt;/pre&gt;</span><span class="hljs-comment">     */</span>    <span class="hljs-variable">__filebuf_type</span>*    open(const char* <span class="hljs-variable">__s</span>, ios_base::openmode <span class="hljs-variable">__mode</span>);<span class="hljs-meta">#if __cplusplus &gt;= 201103L</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Opens an external file.</span><span class="hljs-comment">     *  @param  __s  The name of the file.</span><span class="hljs-comment">     *  @param  __mode  The open mode flags.</span><span class="hljs-comment">     *  @return  @c this on success, NULL on failure</span><span class="hljs-comment">     */</span>    <span class="hljs-variable">__filebuf_type</span>*    open(const std::string&amp; <span class="hljs-variable">__s</span>, ios_base::openmode <span class="hljs-variable">__mode</span>)    &#123; return open(<span class="hljs-variable">__s</span>.c_str(), <span class="hljs-variable">__mode</span>); &#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// C++11</span></span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Closes the currently associated file.</span><span class="hljs-comment">     *  @return  @c this on success, NULL on failure</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If no file is currently open, this function immediately fails.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If a &lt;em&gt;put buffer area&lt;/em&gt; exists, @c overflow(eof) is</span><span class="hljs-comment">     *  called to flush all the characters.  The file is then</span><span class="hljs-comment">     *  closed.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If any operations fail, this function also fails.</span><span class="hljs-comment">     */</span>    <span class="hljs-variable">__filebuf_type</span>*    close();  protected:    void    <span class="hljs-variable">_M_allocate_internal_buffer</span>();    void    <span class="hljs-variable">_M_destroy_internal_buffer</span>() <span class="hljs-keyword">throw</span>();    <span class="hljs-comment">// [27.8.1.4] overridden virtual functions</span>    virtual streamsize    showmanyc();    <span class="hljs-comment">// Stroustrup, 1998, p. 628</span>    <span class="hljs-comment">// underflow() and uflow() functions are called to get the next</span>    <span class="hljs-comment">// character from the real input source when the buffer is empty.</span>    <span class="hljs-comment">// Buffered input uses underflow()</span>    virtual int_type    underflow();    virtual int_type    pbackfail(int_type <span class="hljs-variable">__c</span> = <span class="hljs-variable">_Traits</span>::eof());    <span class="hljs-comment">// Stroustrup, 1998, p 648</span>    <span class="hljs-comment">// The overflow() function is called to transfer characters to the</span>    <span class="hljs-comment">// real output destination when the buffer is full. A call to</span>    <span class="hljs-comment">// overflow(c) outputs the contents of the buffer plus the</span>    <span class="hljs-comment">// character c.</span>    <span class="hljs-comment">// 27.5.2.4.5</span>    <span class="hljs-comment">// Consume some sequence of the characters in the pending sequence.</span>    virtual int_type    overflow(int_type <span class="hljs-variable">__c</span> = <span class="hljs-variable">_Traits</span>::eof());    <span class="hljs-comment">// Convert internal byte sequence to external, char-based</span>    <span class="hljs-comment">// sequence via codecvt.</span>    bool    <span class="hljs-variable">_M_convert_to_external</span>(char_type*, streamsize);    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Manipulates the buffer.</span><span class="hljs-comment">     *  @param  __s  Pointer to a buffer area.</span><span class="hljs-comment">     *  @param  __n  Size of @a __s.</span><span class="hljs-comment">     *  @return  @c this</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If no file has been opened, and both @a __s and @a __n are zero, then</span><span class="hljs-comment">     *  the stream becomes unbuffered.  Otherwise, @c __s is used as a</span><span class="hljs-comment">     *  buffer; see</span><span class="hljs-comment">     *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/streambufs.html#io.streambuf.buffering</span><span class="hljs-comment">     *  for more.</span><span class="hljs-comment">     */</span>    virtual <span class="hljs-variable">__streambuf_type</span>*    setbuf(char_type* <span class="hljs-variable">__s</span>, streamsize <span class="hljs-variable">__n</span>);    virtual pos_type    seekoff(off_type <span class="hljs-variable">__off</span>, ios_base::seekdir <span class="hljs-variable">__way</span>,      ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out);    virtual pos_type    seekpos(pos_type <span class="hljs-variable">__pos</span>,      ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out);    <span class="hljs-comment">// Common code for seekoff, seekpos, and overflow</span>    pos_type    <span class="hljs-variable">_M_seek</span>(off_type <span class="hljs-variable">__off</span>, ios_base::seekdir <span class="hljs-variable">__way</span>, <span class="hljs-variable">__state_type</span> <span class="hljs-variable">__state</span>);    int    <span class="hljs-variable">_M_get_ext_pos</span>(<span class="hljs-variable">__state_type</span> &amp;<span class="hljs-variable">__state</span>);    virtual int    sync();    virtual void    imbue(const locale&amp; <span class="hljs-variable">__loc</span>);    virtual streamsize    xsgetn(char_type* <span class="hljs-variable">__s</span>, streamsize <span class="hljs-variable">__n</span>);    virtual streamsize    xsputn(const char_type* <span class="hljs-variable">__s</span>, streamsize <span class="hljs-variable">__n</span>);    <span class="hljs-comment">// Flushes output buffer, then writes unshift sequence.</span>    bool    <span class="hljs-variable">_M_terminate_output</span>();    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  This function sets the pointers of the internal buffer, both get</span><span class="hljs-comment">     *  and put areas. Typically:</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *   __off == egptr() - eback() upon underflow/uflow (@b read mode);</span><span class="hljs-comment">     *   __off == 0 upon overflow (@b write mode);</span><span class="hljs-comment">     *   __off == -1 upon open, setbuf, seekoff/pos (@b uncommitted mode).</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  NB: epptr() - pbase() == _M_buf_size - 1, since _M_buf_size</span><span class="hljs-comment">     *  reflects the actual allocated memory and the last cell is reserved</span><span class="hljs-comment">     *  for the overflow char of a full put area.</span><span class="hljs-comment">     */</span>    void    <span class="hljs-variable">_M_set_buffer</span>(streamsize <span class="hljs-variable">__off</span>)    &#123;const bool <span class="hljs-variable">__testin</span> = <span class="hljs-variable">_M_mode</span> &amp; ios_base::<span class="hljs-built_in">in</span>;const bool <span class="hljs-variable">__testout</span> = (<span class="hljs-variable">_M_mode</span> &amp; ios_base::out      || <span class="hljs-variable">_M_mode</span> &amp; ios_base::app);<span class="hljs-keyword">if</span> (<span class="hljs-variable">__testin</span> &amp;&amp; <span class="hljs-variable">__off</span> &gt; <span class="hljs-number">0</span>)  this-&gt;setg(<span class="hljs-variable">_M_buf</span>, <span class="hljs-variable">_M_buf</span>, <span class="hljs-variable">_M_buf</span> + <span class="hljs-variable">__off</span>);<span class="hljs-keyword">else</span>  this-&gt;setg(<span class="hljs-variable">_M_buf</span>, <span class="hljs-variable">_M_buf</span>, <span class="hljs-variable">_M_buf</span>);<span class="hljs-keyword">if</span> (<span class="hljs-variable">__testout</span> &amp;&amp; <span class="hljs-variable">__off</span> == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">_M_buf_size</span> &gt; <span class="hljs-number">1</span> )  this-&gt;setp(<span class="hljs-variable">_M_buf</span>, <span class="hljs-variable">_M_buf</span> + <span class="hljs-variable">_M_buf_size</span> - <span class="hljs-number">1</span>);<span class="hljs-keyword">else</span>  this-&gt;setp(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);    &#125;  &#125;;  <span class="hljs-comment">//basic_fstream类,继承basic_iostream</span>  <span class="hljs-comment">//basic_fstream类就是fstream类,只不过使用了typedef</span>  <span class="hljs-comment">//typedef basic_fstream&lt;char&gt; fstream;</span>  <span class="hljs-comment">// [27.8.1.11] Template class basic_fstream</span>  <span class="hljs-comment">/**</span><span class="hljs-comment">   *  @brief  Controlling input and output for files.</span><span class="hljs-comment">   *  @ingroup io</span><span class="hljs-comment">   *</span><span class="hljs-comment">   *  @tparam _CharT  Type of character stream.</span><span class="hljs-comment">   *  @tparam _Traits  Traits for character type, defaults to</span><span class="hljs-comment">   *                   char_traits&lt;_CharT&gt;.</span><span class="hljs-comment">   *</span><span class="hljs-comment">   *  This class supports reading from and writing to named files, using</span><span class="hljs-comment">   *  the inherited functions from std::basic_iostream.  To control the</span><span class="hljs-comment">   *  associated sequence, an instance of std::basic_filebuf is used, which</span><span class="hljs-comment">   *  this page refers to as @c sb.</span><span class="hljs-comment">   */</span>  template&lt;<span class="hljs-built_in">typename</span> <span class="hljs-variable">_CharT</span>, <span class="hljs-built_in">typename</span> <span class="hljs-variable">_Traits</span>&gt;    class basic_fstream : public basic_iostream&lt;<span class="hljs-variable">_CharT</span>, <span class="hljs-variable">_Traits</span>&gt;    &#123;    public:      <span class="hljs-comment">// Types:</span>      typedef <span class="hljs-variable">_CharT</span> char_type;      typedef <span class="hljs-variable">_Traits</span> traits_type;      typedef <span class="hljs-built_in">typename</span> traits_type::int_type int_type;      typedef <span class="hljs-built_in">typename</span> traits_type::pos_type pos_type;      typedef <span class="hljs-built_in">typename</span> traits_type::off_type off_type;      <span class="hljs-comment">// Non-standard types:</span>      typedef basic_filebuf&lt;char_type, traits_type&gt; <span class="hljs-variable">__filebuf_type</span>;      typedef basic_ios&lt;char_type, traits_type&gt;<span class="hljs-variable">__ios_type</span>;      typedef basic_iostream&lt;char_type, traits_type&gt;<span class="hljs-variable">__iostream_type</span>;    <span class="hljs-keyword">private</span>:      <span class="hljs-variable">__filebuf_type</span><span class="hljs-variable">_M_filebuf</span>;    public:      <span class="hljs-comment">// Constructors/destructor:</span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Default constructor.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  Initializes @c sb using its default constructor, and passes</span><span class="hljs-comment">       *  @c &amp;sb to the base class initializer.  Does not open any files</span><span class="hljs-comment">       *  (you haven&#x27;t given it a filename to open).</span><span class="hljs-comment">       */</span>      basic_fstream()      : <span class="hljs-variable">__iostream_type</span>(), <span class="hljs-variable">_M_filebuf</span>()      &#123; this-&gt;init(&amp;<span class="hljs-variable">_M_filebuf</span>); &#125;      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Create an input/output file stream.</span><span class="hljs-comment">       *  @param  __s  Null terminated string specifying the filename.</span><span class="hljs-comment">       *  @param  __mode  Open file in specified mode (see std::ios_base).</span><span class="hljs-comment">       */</span>      explicit      basic_fstream(const char* <span class="hljs-variable">__s</span>,        ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out)      : <span class="hljs-variable">__iostream_type</span>(<span class="hljs-number">0</span>), <span class="hljs-variable">_M_filebuf</span>()      &#123;  this-&gt;init(&amp;<span class="hljs-variable">_M_filebuf</span>);  this-&gt;open(<span class="hljs-variable">__s</span>, <span class="hljs-variable">__mode</span>);      &#125;<span class="hljs-meta">#if __cplusplus &gt;= 201103L</span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Create an input/output file stream.</span><span class="hljs-comment">       *  @param  __s  Null terminated string specifying the filename.</span><span class="hljs-comment">       *  @param  __mode  Open file in specified mode (see std::ios_base).</span><span class="hljs-comment">       */</span>      explicit      basic_fstream(const std::string&amp; <span class="hljs-variable">__s</span>,        ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out)      : <span class="hljs-variable">__iostream_type</span>(<span class="hljs-number">0</span>), <span class="hljs-variable">_M_filebuf</span>()      &#123;  this-&gt;init(&amp;<span class="hljs-variable">_M_filebuf</span>);  this-&gt;open(<span class="hljs-variable">__s</span>, <span class="hljs-variable">__mode</span>);      &#125;      basic_fstream(const basic_fstream&amp;) = delete;      basic_fstream(basic_fstream&amp;&amp; <span class="hljs-variable">__rhs</span>)      : <span class="hljs-variable">__iostream_type</span>(std::<span class="hljs-built_in">move</span>(<span class="hljs-variable">__rhs</span>)),      <span class="hljs-variable">_M_filebuf</span>(std::<span class="hljs-built_in">move</span>(<span class="hljs-variable">__rhs</span>.<span class="hljs-variable">_M_filebuf</span>))      &#123; <span class="hljs-variable">__iostream_type</span>::set_rdbuf(&amp;<span class="hljs-variable">_M_filebuf</span>); &#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  The destructor does nothing.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  The file is closed by the filebuf object, not the formatting</span><span class="hljs-comment">       *  stream.</span><span class="hljs-comment">       */</span>      ~basic_fstream()      &#123; &#125;      <span class="hljs-comment">// Members:</span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Accessing the underlying buffer.</span><span class="hljs-comment">       *  @return  The current basic_filebuf buffer.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  This hides both signatures of std::basic_ios::rdbuf().</span><span class="hljs-comment">       */</span>      <span class="hljs-variable">__filebuf_type</span>*      rdbuf() const      &#123; return const_cast&lt;<span class="hljs-variable">__filebuf_type</span>*&gt;(&amp;<span class="hljs-variable">_M_filebuf</span>); &#125;      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Wrapper to test for an open file.</span><span class="hljs-comment">       *  @return  @c rdbuf()-&gt;is_open()</span><span class="hljs-comment">       */</span>      bool      is_open()      &#123; return <span class="hljs-variable">_M_filebuf</span>.is_open(); &#125;      <span class="hljs-comment">// _GLIBCXX_RESOLVE_LIB_DEFECTS</span>      <span class="hljs-comment">// 365. Lack of const-qualification in clause 27</span>      bool      is_open() const      &#123; return <span class="hljs-variable">_M_filebuf</span>.is_open(); &#125;      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Opens an external file.</span><span class="hljs-comment">       *  @param  __s  The name of the file.</span><span class="hljs-comment">       *  @param  __mode  The open mode flags.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  Calls @c std::basic_filebuf::open(__s,__mode).  If that</span><span class="hljs-comment">       *  function fails, @c failbit is set in the stream&#x27;s error state.</span><span class="hljs-comment">       */</span>      void      open(const char* <span class="hljs-variable">__s</span>,     ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out)      &#123;  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">_M_filebuf</span>.open(<span class="hljs-variable">__s</span>, <span class="hljs-variable">__mode</span>))    this-&gt;setstate(ios_base::failbit);  <span class="hljs-keyword">else</span>    <span class="hljs-comment">// _GLIBCXX_RESOLVE_LIB_DEFECTS</span>    <span class="hljs-comment">// 409. Closing an fstream should clear error state</span>    this-&gt;clear();      &#125;<span class="hljs-meta">#if __cplusplus &gt;= 201103L</span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Opens an external file.</span><span class="hljs-comment">       *  @param  __s  The name of the file.</span><span class="hljs-comment">       *  @param  __mode  The open mode flags.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  Calls @c std::basic_filebuf::open(__s,__mode).  If that</span><span class="hljs-comment">       *  function fails, @c failbit is set in the stream&#x27;s error state.</span><span class="hljs-comment">       */</span>      void      open(const std::string&amp; <span class="hljs-variable">__s</span>,     ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out)      &#123;  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">_M_filebuf</span>.open(<span class="hljs-variable">__s</span>, <span class="hljs-variable">__mode</span>))    this-&gt;setstate(ios_base::failbit);  <span class="hljs-keyword">else</span>    <span class="hljs-comment">// _GLIBCXX_RESOLVE_LIB_DEFECTS</span>    <span class="hljs-comment">// 409. Closing an fstream should clear error state</span>    this-&gt;clear();      &#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// C++11</span></span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Close the file.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  Calls @c std::basic_filebuf::close().  If that function</span><span class="hljs-comment">       *  fails, @c failbit is set in the stream&#x27;s error state.</span><span class="hljs-comment">       */</span>      void      close()      &#123;  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">_M_filebuf</span>.close())    this-&gt;setstate(ios_base::failbit);      &#125;    &#125;;</code></pre><p>&emsp;&emsp;看的头皮发麻,还得删掉一些,得找到重点</p><pre><code class="hljs sqf"><span class="hljs-comment">/** @file include/fstream</span><span class="hljs-comment"> *  This is a Standard C++ Library header.</span><span class="hljs-comment"> */</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;istream&gt;             //输入流头文件</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ostream&gt;             //输出流头文件</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/codecvt.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;             // For BUFSIZ</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/basic_file.h&gt;  // For __basic_file, __c_lock</span></span><span class="hljs-meta">#if __cplusplus &gt;= 201103L</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;             // For std::string overloads.</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><span class="hljs-comment">//basic_filebuf类,继承的basic_streambuf类</span>template&lt;<span class="hljs-built_in">typename</span> <span class="hljs-variable">_CharT</span>, <span class="hljs-built_in">typename</span> <span class="hljs-variable">_Traits</span>&gt;  class basic_filebuf : public basic_streambuf&lt;<span class="hljs-variable">_CharT</span>, <span class="hljs-variable">_Traits</span>&gt;  &#123;  public:    typedef <span class="hljs-variable">_CharT</span>                           char_type;<span class="hljs-comment">//重命名_CharT为char_type</span>    typedef <span class="hljs-variable">_Traits</span>                          traits_type;<span class="hljs-comment">//重命名_Traits为traits_type</span>    typedef <span class="hljs-built_in">typename</span> traits_type::int_type int_type;<span class="hljs-comment">//同理</span>    typedef <span class="hljs-built_in">typename</span> traits_type::pos_type pos_type;<span class="hljs-comment">//同理</span>    typedef <span class="hljs-built_in">typename</span> traits_type::off_type off_type;<span class="hljs-comment">//同理</span>    typedef basic_streambuf&lt;char_type, traits_type&gt;  <span class="hljs-variable">__streambuf_type</span>;<span class="hljs-comment">//同理</span>    <span class="hljs-comment">//!!!!!!!!!!!!!</span>    <span class="hljs-comment">//留意一下,比较重要,它将自身重命名了__filebuf_type类型,也就是说__filebuf_type类型的对象就是basic_filebuf类的对象</span>    typedef basic_filebuf&lt;char_type, traits_type&gt;     <span class="hljs-variable">__filebuf_type</span>;<span class="hljs-comment">//重命名basic_filebuf&lt;char_type, traits_type&gt;为__filebuf_type</span>    typedef <span class="hljs-variable">__basic_file</span>&lt;char&gt;        <span class="hljs-variable">__file_type</span>;<span class="hljs-comment">//同理</span>    typedef <span class="hljs-built_in">typename</span> traits_type::state_type          <span class="hljs-variable">__state_type</span>;<span class="hljs-comment">//同理</span>    typedef codecvt&lt;char_type, char, <span class="hljs-variable">__state_type</span>&gt;    <span class="hljs-variable">__codecvt_type</span>;<span class="hljs-comment">//同理</span>    <span class="hljs-comment">//朋友类,ios_base,也就ios::in,ios::out这些</span>    friend class ios_base; <span class="hljs-comment">// For sync_with_stdio.</span>  protected:    <span class="hljs-comment">//数据定义</span>    <span class="hljs-variable">__file_type</span> <span class="hljs-variable">_M_file</span>;<span class="hljs-comment">//留意一下,自身保存了自己的一个对象!</span>    ios_base::openmode <span class="hljs-variable">_M_mode</span>;    <span class="hljs-comment">//打开文件的模式</span>    <span class="hljs-variable">__c_lock</span>          <span class="hljs-variable">_M_lock</span>;    <span class="hljs-variable">__state_type</span> <span class="hljs-variable">_M_state_beg</span>;<span class="hljs-comment">//文件指针状态开头</span>    <span class="hljs-variable">__state_type</span><span class="hljs-variable">_M_state_cur</span>;<span class="hljs-comment">//文件指针状态当前位置</span>    <span class="hljs-variable">__state_type</span><span class="hljs-variable">_M_state_last</span>;<span class="hljs-comment">//文件指针状态末尾</span>    <span class="hljs-comment">/// Pointer to the beginning of internal buffer.</span>    char_type*<span class="hljs-variable">_M_buf</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Actual size of internal buffer. This number is equal to the size</span><span class="hljs-comment">     *  of the put area + 1 position, reserved for the overflow char of</span><span class="hljs-comment">     *  a full area.</span><span class="hljs-comment">     */</span>    size_t<span class="hljs-variable">_M_buf_size</span>;    <span class="hljs-comment">// Set iff _M_buf is allocated memory from _M_allocate_internal_buffer.</span>    bool<span class="hljs-variable">_M_buf_allocated</span>;    bool                      <span class="hljs-variable">_M_reading</span>;    bool                      <span class="hljs-variable">_M_writing</span>;    char_type<span class="hljs-variable">_M_pback</span>;    char_type*<span class="hljs-variable">_M_pback_cur_save</span>;    char_type*<span class="hljs-variable">_M_pback_end_save</span>;    bool<span class="hljs-variable">_M_pback_init</span>;    const <span class="hljs-variable">__codecvt_type</span>* <span class="hljs-variable">_M_codecvt</span>;    char*<span class="hljs-variable">_M_ext_buf</span>;    streamsize<span class="hljs-variable">_M_ext_buf_size</span>;    const char*<span class="hljs-variable">_M_ext_next</span>;    char*<span class="hljs-variable">_M_ext_end</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Initializes pback buffers, and moves normal buffers to safety.</span><span class="hljs-comment">     *  Assumptions:</span><span class="hljs-comment">     *  _M_in_cur has already been moved back</span><span class="hljs-comment">     */</span>    void    <span class="hljs-variable">_M_create_pback</span>()    &#123;<span class="hljs-keyword">if</span> (!<span class="hljs-variable">_M_pback_init</span>)  &#123;    <span class="hljs-variable">_M_pback_cur_save</span> = this-&gt;gptr();    <span class="hljs-variable">_M_pback_end_save</span> = this-&gt;egptr();    this-&gt;setg(&amp;<span class="hljs-variable">_M_pback</span>, &amp;<span class="hljs-variable">_M_pback</span>, &amp;<span class="hljs-variable">_M_pback</span> + <span class="hljs-number">1</span>);    <span class="hljs-variable">_M_pback_init</span> = <span class="hljs-literal">true</span>;  &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  Deactivates pback buffer contents, and restores normal buffer.</span><span class="hljs-comment">     *  Assumptions:</span><span class="hljs-comment">     *  The pback buffer has only moved forward.</span><span class="hljs-comment">     */</span>    void    <span class="hljs-variable">_M_destroy_pback</span>() <span class="hljs-keyword">throw</span>()    &#123;<span class="hljs-keyword">if</span> (<span class="hljs-variable">_M_pback_init</span>)  &#123;    <span class="hljs-comment">// Length _M_in_cur moved in the pback buffer.</span>    <span class="hljs-variable">_M_pback_cur_save</span> += this-&gt;gptr() != this-&gt;eback();    this-&gt;setg(<span class="hljs-variable">_M_buf</span>, <span class="hljs-variable">_M_pback_cur_save</span>, <span class="hljs-variable">_M_pback_end_save</span>);    <span class="hljs-variable">_M_pback_init</span> = <span class="hljs-literal">false</span>;  &#125;    &#125;  public:    <span class="hljs-comment">// Constructors/destructor:</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Does not open any files.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  The default constructor initializes the parent class using its</span><span class="hljs-comment">     *  own default ctor.</span><span class="hljs-comment">     */</span>    basic_filebuf();<span class="hljs-comment">//构造函数</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  The destructor closes the file first.</span><span class="hljs-comment">     */</span>    virtual    ~basic_filebuf()<span class="hljs-comment">//销毁函数</span>    &#123; this-&gt;close(); &#125;    <span class="hljs-comment">// Members:</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Returns true if the external file is open.</span><span class="hljs-comment">     */</span>    bool    is_open() const <span class="hljs-keyword">throw</span>()<span class="hljs-comment">//判断是否打开文件</span>    &#123; return <span class="hljs-variable">_M_file</span>.is_open(); &#125;    <span class="hljs-comment">//我们的重点,打开文件的函数</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Opens an external file.</span><span class="hljs-comment">     *  @param  __s  The name of the file.</span><span class="hljs-comment">     *  @param  __mode  The open mode flags.</span><span class="hljs-comment">     *  @return  @c this on success, NULL on failure</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If a file is already open, this function immediately fails.</span><span class="hljs-comment">     *  Otherwise it tries to open the file named @a __s using the flags</span><span class="hljs-comment">     *  given in @a __mode.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  Table 92, adapted here, gives the relation between openmode</span><span class="hljs-comment">     *  combinations and the equivalent @c fopen() flags.</span><span class="hljs-comment">     *  (NB: lines app, in|out|app, in|app, binary|app, binary|in|out|app,</span><span class="hljs-comment">     *  and binary|in|app per DR 596)</span><span class="hljs-comment">     *  &lt;pre&gt;</span><span class="hljs-comment">     *  +---------------------------------------------------------+</span><span class="hljs-comment">     *  | ios_base Flag combination            stdio equivalent   |</span><span class="hljs-comment">     *  |binary  in  out  trunc  app                              |</span><span class="hljs-comment">     *  +---------------------------------------------------------+</span><span class="hljs-comment">     *  |             +                        w                  |</span><span class="hljs-comment">     *  |             +           +            a                  |</span><span class="hljs-comment">     *  |                         +            a                  |</span><span class="hljs-comment">     *  |             +     +                  w                  |</span><span class="hljs-comment">     *  |         +                            r                  |</span><span class="hljs-comment">     *  |         +   +                        r+                 |</span><span class="hljs-comment">     *  |         +   +     +                  w+                 |</span><span class="hljs-comment">     *  |         +   +           +            a+                 |</span><span class="hljs-comment">     *  |         +               +            a+                 |</span><span class="hljs-comment">     *  +---------------------------------------------------------+</span><span class="hljs-comment">     *  |   +         +                        wb                 |</span><span class="hljs-comment">     *  |   +         +           +            ab                 |</span><span class="hljs-comment">     *  |   +                     +            ab                 |</span><span class="hljs-comment">     *  |   +         +     +                  wb                 |</span><span class="hljs-comment">     *  |   +     +                            rb                 |</span><span class="hljs-comment">     *  |   +     +   +                        r+b                |</span><span class="hljs-comment">     *  |   +     +   +     +                  w+b                |</span><span class="hljs-comment">     *  |   +     +   +           +            a+b                |</span><span class="hljs-comment">     *  |   +     +               +            a+b                |</span><span class="hljs-comment">     *  +---------------------------------------------------------+</span><span class="hljs-comment">     *  &lt;/pre&gt;</span><span class="hljs-comment">     */</span>     <span class="hljs-comment">//没有函数体,视乎是一个声明,不管了,先放着一边,返回值是自身类型的一个指针</span>    <span class="hljs-variable">__filebuf_type</span>*    open(const char* <span class="hljs-variable">__s</span>, ios_base::openmode <span class="hljs-variable">__mode</span>);<span class="hljs-meta">#if __cplusplus &gt;= 201103L</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Opens an external file.</span><span class="hljs-comment">     *  @param  __s  The name of the file.</span><span class="hljs-comment">     *  @param  __mode  The open mode flags.</span><span class="hljs-comment">     *  @return  @c this on success, NULL on failure</span><span class="hljs-comment">     */</span>     <span class="hljs-comment">//又是一个打开文件函数,不管使用了预编译,需要大于特定版本</span>    <span class="hljs-variable">__filebuf_type</span>*    open(const std::string&amp; <span class="hljs-variable">__s</span>, ios_base::openmode <span class="hljs-variable">__mode</span>)    &#123; return open(<span class="hljs-variable">__s</span>.c_str(), <span class="hljs-variable">__mode</span>); &#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// C++11</span></span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     *  @brief  Closes the currently associated file.</span><span class="hljs-comment">     *  @return  @c this on success, NULL on failure</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If no file is currently open, this function immediately fails.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If a &lt;em&gt;put buffer area&lt;/em&gt; exists, @c overflow(eof) is</span><span class="hljs-comment">     *  called to flush all the characters.  The file is then</span><span class="hljs-comment">     *  closed.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     *  If any operations fail, this function also fails.</span><span class="hljs-comment">     */</span>    <span class="hljs-variable">__filebuf_type</span>*    close();<span class="hljs-comment">//关闭函数</span>  protected:    <span class="hljs-comment">//...还有一大把函数</span>  &#125;;  <span class="hljs-comment">//basic_fstream类,继承basic_iostream</span>  <span class="hljs-comment">//basic_fstream类就是fstream类,只不过使用了typedef</span>  <span class="hljs-comment">//typedef basic_fstream&lt;char&gt; fstream;</span>  template&lt;<span class="hljs-built_in">typename</span> <span class="hljs-variable">_CharT</span>, <span class="hljs-built_in">typename</span> <span class="hljs-variable">_Traits</span>&gt;    class basic_fstream : public basic_iostream&lt;<span class="hljs-variable">_CharT</span>, <span class="hljs-variable">_Traits</span>&gt;    &#123;    public:      typedef <span class="hljs-variable">_CharT</span> char_type;<span class="hljs-comment">//重命名_CharT为char_type</span>      typedef <span class="hljs-variable">_Traits</span> traits_type;<span class="hljs-comment">//重命名_Traits为traits_type</span>      typedef <span class="hljs-built_in">typename</span> traits_type::int_type int_type;<span class="hljs-comment">//同理</span>      typedef <span class="hljs-built_in">typename</span> traits_type::pos_type pos_type;<span class="hljs-comment">//同理</span>      typedef <span class="hljs-built_in">typename</span> traits_type::off_type off_type;<span class="hljs-comment">//同理</span>      <span class="hljs-comment">//留意一下,比较重要,它重命名了basic_filebuf为__filebuf_type</span>      typedef basic_filebuf&lt;char_type, traits_type&gt; <span class="hljs-variable">__filebuf_type</span>;      typedef basic_ios&lt;char_type, traits_type&gt;<span class="hljs-variable">__ios_type</span>;<span class="hljs-comment">//同理</span>      typedef basic_iostream&lt;char_type, traits_type&gt;<span class="hljs-variable">__iostream_type</span>;<span class="hljs-comment">//同理</span>    <span class="hljs-keyword">private</span>:      <span class="hljs-comment">//只有一个私有对象,那就是上面提到的basic_filebuf类的对象</span>      <span class="hljs-comment">//(重命名了basic_filebuf&lt;char_type, traits_type&gt;为basic_filebuf)</span>      <span class="hljs-variable">__filebuf_type</span><span class="hljs-variable">_M_filebuf</span>;    public:      basic_fstream()<span class="hljs-comment">//构造函数</span>      : <span class="hljs-variable">__iostream_type</span>(), <span class="hljs-variable">_M_filebuf</span>()      &#123; this-&gt;init(&amp;<span class="hljs-variable">_M_filebuf</span>); &#125;      explicit      basic_fstream(const char* <span class="hljs-variable">__s</span>,        ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out)<span class="hljs-comment">//又是一个构造函数</span>      : <span class="hljs-variable">__iostream_type</span>(<span class="hljs-number">0</span>), <span class="hljs-variable">_M_filebuf</span>()      &#123;  this-&gt;init(&amp;<span class="hljs-variable">_M_filebuf</span>);  this-&gt;open(<span class="hljs-variable">__s</span>, <span class="hljs-variable">__mode</span>);<span class="hljs-comment">//这个构造函数,调用了自身的一个打开函数,需要关注一下</span>      &#125;<span class="hljs-meta">#if __cplusplus &gt;= 201103L</span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Create an input/output file stream.</span><span class="hljs-comment">       *  @param  __s  Null terminated string specifying the filename.</span><span class="hljs-comment">       *  @param  __mode  Open file in specified mode (see std::ios_base).</span><span class="hljs-comment">       */</span>       <span class="hljs-comment">//预编译的构造函数,需要C++版本大于一定的版本</span>      explicit      basic_fstream(const std::string&amp; <span class="hljs-variable">__s</span>,        ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out)      : <span class="hljs-variable">__iostream_type</span>(<span class="hljs-number">0</span>), <span class="hljs-variable">_M_filebuf</span>()      &#123;  this-&gt;init(&amp;<span class="hljs-variable">_M_filebuf</span>);  this-&gt;open(<span class="hljs-variable">__s</span>, <span class="hljs-variable">__mode</span>);<span class="hljs-comment">//也打开了这个函数</span>      &#125;      basic_fstream(const basic_fstream&amp;) = delete;      basic_fstream(basic_fstream&amp;&amp; <span class="hljs-variable">__rhs</span>)      : <span class="hljs-variable">__iostream_type</span>(std::<span class="hljs-built_in">move</span>(<span class="hljs-variable">__rhs</span>)),      <span class="hljs-variable">_M_filebuf</span>(std::<span class="hljs-built_in">move</span>(<span class="hljs-variable">__rhs</span>.<span class="hljs-variable">_M_filebuf</span>))      &#123; <span class="hljs-variable">__iostream_type</span>::set_rdbuf(&amp;<span class="hljs-variable">_M_filebuf</span>); &#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  The destructor does nothing.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  The file is closed by the filebuf object, not the formatting</span><span class="hljs-comment">       *  stream.</span><span class="hljs-comment">       */</span>      ~basic_fstream()<span class="hljs-comment">//析构函数</span>      &#123; &#125;      <span class="hljs-comment">// Members:</span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Accessing the underlying buffer.</span><span class="hljs-comment">       *  @return  The current basic_filebuf buffer.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  This hides both signatures of std::basic_ios::rdbuf().</span><span class="hljs-comment">       */</span>      <span class="hljs-variable">__filebuf_type</span>*      rdbuf() const      &#123; return const_cast&lt;<span class="hljs-variable">__filebuf_type</span>*&gt;(&amp;<span class="hljs-variable">_M_filebuf</span>); &#125;      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Wrapper to test for an open file.</span><span class="hljs-comment">       *  @return  @c rdbuf()-&gt;is_open()</span><span class="hljs-comment">       */</span>      bool      is_open()      &#123; return <span class="hljs-variable">_M_filebuf</span>.is_open(); &#125;      <span class="hljs-comment">// _GLIBCXX_RESOLVE_LIB_DEFECTS</span>      <span class="hljs-comment">// 365. Lack of const-qualification in clause 27</span>      bool      is_open() const      &#123; return <span class="hljs-variable">_M_filebuf</span>.is_open(); &#125;<span class="hljs-comment">/*************************************这次解决问题的重点**********************/</span>      <span class="hljs-comment">//在构造时,调用到的打开函数</span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Opens an external file.</span><span class="hljs-comment">       *  @param  __s  The name of the file.</span><span class="hljs-comment">       *  @param  __mode  The open mode flags.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  Calls @c std::basic_filebuf::open(__s,__mode).  If that</span><span class="hljs-comment">       *  function fails, @c failbit is set in the stream&#x27;s error state.</span><span class="hljs-comment">       */</span>       <span class="hljs-comment">//第一个参数是字符数组指针(字符串),第二个参数是打开模式</span>       <span class="hljs-comment">//打开模式默认为ios_base::in | ios_base::out</span>      void      open(const char* <span class="hljs-variable">__s</span>,     ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out)      &#123;  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">_M_filebuf</span>.open(<span class="hljs-variable">__s</span>, <span class="hljs-variable">__mode</span>))<span class="hljs-comment">//调用basic_filebuf类中的open,如果打开失败,则设置failbit(会使得fail()函数返回真,其它的为false)</span>    this-&gt;setstate(ios_base::failbit);  <span class="hljs-keyword">else</span>    <span class="hljs-comment">// _GLIBCXX_RESOLVE_LIB_DEFECTS</span>    <span class="hljs-comment">// 409. Closing an fstream should clear error state</span>    this-&gt;clear();<span class="hljs-comment">//打开成功的话,就清除错误状态,(可能之前就有)</span>      &#125;<span class="hljs-comment">/*************************************这次解决问题的重点**********************/</span><span class="hljs-meta">#if __cplusplus &gt;= 201103L</span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Opens an external file.</span><span class="hljs-comment">       *  @param  __s  The name of the file.</span><span class="hljs-comment">       *  @param  __mode  The open mode flags.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  Calls @c std::basic_filebuf::open(__s,__mode).  If that</span><span class="hljs-comment">       *  function fails, @c failbit is set in the stream&#x27;s error state.</span><span class="hljs-comment">       */</span>      void      open(const std::string&amp; <span class="hljs-variable">__s</span>,     ios_base::openmode <span class="hljs-variable">__mode</span> = ios_base::<span class="hljs-built_in">in</span> | ios_base::out)      &#123;  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">_M_filebuf</span>.open(<span class="hljs-variable">__s</span>, <span class="hljs-variable">__mode</span>))    this-&gt;setstate(ios_base::failbit);  <span class="hljs-keyword">else</span>    <span class="hljs-comment">// _GLIBCXX_RESOLVE_LIB_DEFECTS</span>    <span class="hljs-comment">// 409. Closing an fstream should clear error state</span>    this-&gt;clear();      &#125;<span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">// C++11</span></span>      <span class="hljs-comment">/**</span><span class="hljs-comment">       *  @brief  Close the file.</span><span class="hljs-comment">       *</span><span class="hljs-comment">       *  Calls @c std::basic_filebuf::close().  If that function</span><span class="hljs-comment">       *  fails, @c failbit is set in the stream&#x27;s error state.</span><span class="hljs-comment">       */</span>      void      close()      &#123;  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">_M_filebuf</span>.close())    this-&gt;setstate(ios_base::failbit);      &#125;    &#125;;</code></pre><p>&emsp;&emsp;好家伙,总算找到了,它调用basic_filebuf类中的open函数,但是basic_filebuf类中的open函数只有一个声明,没有函数体,emmmmm,不管咯,先上网查一下basic_filebuf类.</p><p><a href="https://www.apiref.com/cpp-zh/cpp/io/basic_filebuf.html">basic_filebuf类详情链接</a></p><p><img src="./basic_filebuf%E7%B1%BB1.png" alt="basic_filebuf类"><br><img src="./basic_filebuf%E7%B1%BB2.png" alt="basic_filebuf类"></p><p>&emsp;&emsp;点击open函数,看看是怎么样的</p><p><img src="./basic_filebuf%E7%B1%BB3open%E5%87%BD%E6%95%B0.png" alt="basic_filebuf类的open函数"></p><p>&emsp;&emsp;!!!找到原因</p><p><img src="./basic_filebuf%E7%B1%BB3open%E5%87%BD%E6%95%B0%E5%B8%A6%E6%B3%A8%E8%A7%A3.png" alt="basic_filebuf类的open函数"></p><blockquote><p>问题结果答案</p></blockquote><p>&emsp;&emsp;当我们在fstream类中使用ios::in|ios::out或者ios::in|ios::out打开文件时,就是r+(C语言文件打开方式,扩展性读取,可读可写,但是文件不存在打开失败!)或者r+b(C语言文件打开方式,扩展性读取二进制文件,可读可写,但是文件不存在打开失败!)</p><p><img src="./result.png" alt="问题答案结果"></p><blockquote><p>结语</p></blockquote><p>&emsp;&emsp;嗯,不错,总算解决了当初为什么一定要加ios::app才能创建文件的问题了.不过,我也感觉到自己好蠢啊,我丢,明明在basic_filebuf类中的open有个表的,自己也看了一下,结果就秒过去了,自己找basic_filebuf类的open函数的函数体找了半天,如果看到那个表,就能早早结束了……….</p><pre><code class="hljs gherkin"><span class="hljs-symbol">*</span>  Table 92, adapted here, gives the relation between openmode<span class="hljs-symbol">*</span>  combinations and the equivalent <span class="hljs-meta">@c</span> fopen() flags.<span class="hljs-symbol">*</span>  (NB: lines app, in|<span class="hljs-string">out</span>|<span class="hljs-string">app, in</span>|<span class="hljs-string">app, binary</span>|<span class="hljs-string">app, binary</span>|<span class="hljs-string">in</span>|<span class="hljs-string">out</span>|<span class="hljs-string">app,</span><span class="hljs-string">*  and binary</span>|<span class="hljs-string">in</span>|<span class="hljs-string">app per DR 596)</span><span class="hljs-string">*  &lt;pre&gt;</span><span class="hljs-string">*  +---------------------------------------------------------+</span><span class="hljs-string">*  </span>|<span class="hljs-string"> ios_base Flag combination            stdio equivalent   </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">binary  in  out  trunc  app                              </span>|<span class="hljs-symbol">*</span>  +---------------------------------------------------------+<span class="hljs-symbol">*</span>  |<span class="hljs-string">             +                        w                  </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">             +           +            a                  </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">                         +            a                  </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">             +     +                  w                  </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">         +                            r                  </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">         +   +                        r+                 </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">         +   +     +                  w+                 </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">         +   +           +            a+                 </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">         +               +            a+                 </span>|<span class="hljs-symbol">*</span>  +---------------------------------------------------------+<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +         +                        wb                 </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +         +           +            ab                 </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +                     +            ab                 </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +         +     +                  wb                 </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +     +                            rb                 </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +     +   +                        r+b                </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +     +   +     +                  w+b                </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +     +   +           +            a+b                </span>|<span class="hljs-symbol">*</span>  |<span class="hljs-string">   +     +               +            a+b                </span>|<span class="hljs-symbol">*</span>  +---------------------------------------------------------+</code></pre><p>&emsp;&emsp; 现在时间是晚上2点14分,该睡觉了,晚安.</p>]]></content>
    
  </entry>
  
  
  
</search>
